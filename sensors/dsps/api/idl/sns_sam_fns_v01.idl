/*****************************************************************************
  @FILE     sns_sam_fns.idl

  @BRIEF    Message definition for FNS.

  @DESCRIPTION
  This file defines FNS messages used by Face and Shake algo services,

  As prerequisite, the sensor algorithm must use the common Interface
  defined in the Sensor Algorithms framework.

  The messages defined herein will be passed to the Sensor framework using
  the sensor1_write() API.

  @COPYRIGHT
  Copyright (c) 2011-2014 Qualcomm Technologies, Inc.  All Rights Reserved
  Qualcomm Technologies Proprietary and Confidential.

*****************************************************************************/
include "sns_sam_common_v01.idl";

revision 4;

const SNS_SAM_FNS_SUID = 0xbf1071d0c2113946;

/* ENUMs are for reference only, uint8 is used instead */

//! @ENUM   SNS_SAM_FNS_EVENT_ENUM
enum {
  FACE_N_SHAKE_EVENT_UNKNOWN = 0, /**< FNS event unknown. */
  FACE_N_SHAKE_AXIS_LEFT   = 3,   /**< FNS axis left. */
  FACE_N_SHAKE_AXIS_RIGHT  = 4,   /**< FNS axis right. */
  FACE_N_SHAKE_AXIS_TOP    = 5,   /**< FNS axis top. */
  FACE_N_SHAKE_AXIS_BOTTOM = 6,   /**< FNS axis bottom. */
  FACE_N_SHAKE_AXIS_UNK    = 7    /**< FNS axis unknown. */
} sns_sam_face_and_shake_event_e;

/* Following are message definitions shared by all FNS-related services */

//============================================================================
/** @COMMAND SNS_SAM_FNS_ENABLE
    @BRIEF This command enables a sensor algorithm.
*/
//============================================================================

//! @MSG     SNS_SAM_FNS_ENABLE_REQ
//! @TYPE    Request
//! @SENDER  Client
//----------------------------------------------------------------------------

message {
  optional uint32 sample_rate;
  /**< Sample rate in Hz; Q16 format. */
  optional uint32 facing_angle_threshold;
  /**< Angle in radians; Q16 format. */
  optional uint32 basic_sleep;
  /**< Sleep time in seconds after the gesture is generated; Q16 format. */
  optional uint32 basic_shake_threshold;
  /**< Shake threshold, m/s/s; Q16 format. */
  optional  uint32 timeout;
  /**< Timeout in seconds; Q16 format. */
  //! @VERSION 1.2
  optional sns_suspend_notification_s notify_suspend;
  /**< Identifies whether indications for this request are to be sent
       when the processor is in the Suspend state.

       If this field is not specified, the default value is set to: \n
       notify_suspend->proc_type                  = SNS_PROC_APPS \n
       notify_suspend->send_indications_during_suspend  = FALSE

       This field does not have any bearing on error indication
       messages, which are sent even during Suspend.
    */
} sns_sam_fns_enable_req_msg;

//! @MSG     SNS_SAM_FNS_ENABLE_RESP
//! @TYPE    Response
//! @SENDER  Service
//----------------------------------------------------------------------------

message {
  mandatory sns_common_resp_s                resp = 2;
  /**< Common response message. */
  mandatory uint8                            instance_id;
  /**< Instance ID, which is maintained/assigned by the SAM.
       The client must use this instance ID for future messages associated with
       the current algorithm instance.
  */
} sns_sam_fns_enable_resp_msg;


//============================================================================
/** @COMMAND SNS_SAM_FNS_DISABLE
    @BRIEF This command disables a sensor algorithm.
*/
//============================================================================

//! @MSG     SNS_SAM_FNS_DISABLE_REQ
//! @TYPE    Request
//! @SENDER  Client
//----------------------------------------------------------------------------

message {
  mandatory uint8                            instance_id;
  /**< Identifies the algorithm instance.  */
} sns_sam_fns_disable_req_msg;

//! @MSG     SNS_SAM_FNS_DISABLE_RESP
//! @TYPE    Response
//! @SENDER  Service
//----------------------------------------------------------------------------

message {
  mandatory sns_common_resp_s                resp = 2;
  /**< Common response message. */
  mandatory uint8                            instance_id;
  /**< Identifies the algorithm instance.  */
} sns_sam_fns_disable_resp_msg;


//============================================================================
/** @COMMAND SNS_SAM_FNS_REPORT
    @BRIEF Output report from a sensor algorithm.
*/
//============================================================================

//! @MSG     SNS_SAM_FNS_REPORT_IND
//! @TYPE    Indication
//! @SENDER  Service
//----------------------------------------------------------------------------

message {
  mandatory uint8                            instance_id;
  /**< Identifies the algorithm instance.  */
  mandatory uint32                           timestamp;
  /**< Timestamp of the input that caused this indication; in SSC ticks. */
  mandatory sns_sam_face_and_shake_event_e    state;
  /**< FNS state. */
} sns_sam_fns_report_ind_msg;


//============================================================================
/** @COMMAND SNS_SAM_FNS_GET_REPORT
    @BRIEF This command fetches latest report output from a sensor algorithm.
*/
//============================================================================

//! @MSG     SNS_SAM_FNS_GET_REPORT_REQ
//! @TYPE    Request
//! @SENDER  Client
//----------------------------------------------------------------------------

message {
  mandatory uint8                            instance_id;
  /**< Identifies the algorithm instance.  */
} sns_sam_fns_get_report_req_msg;

//! @MSG     SNS_SAM_FNS_GET_REPORT_RESP
//! @TYPE    Response
//! @SENDER  Service
//----------------------------------------------------------------------------

message {
  mandatory sns_common_resp_s                resp = 2;
  /**< Common response message. */
  mandatory uint8                            instance_id;
  /**< Identifies the algorithm instance.  */
  mandatory uint32                           timestamp;
  /**< Timestamp at which this report is fetched; in SSC ticks. */
  mandatory sns_sam_face_and_shake_event_e   state;
  /**< FNS state. */
} sns_sam_fns_get_report_resp_msg;


//============================================================================
/** @COMMAND SNS_SAM_FNS_ERROR
    @BRIEF Asynchronous error report from a sensor algorithm.
*/
//============================================================================

//! @MSG     SNS_SAM_FNS_ERROR_IND
//! @TYPE    Indication
//! @SENDER  Service
//============================================================================

message {
  mandatory uint8                            error;
  /**< Sensors error code. */
  mandatory uint8                            instance_id;
  /**< Identifies the algorithm instance.  */
} sns_sam_fns_error_ind_msg;

//============================================================================
/** @COMMAND SNS_SAM_FNS_CANCEL
    @BRIEF This command cancels all requests to the algorithm service.
*/
//============================================================================

//============================================================================
/** @COMMAND SNS_SAM_FNS_VERSION
    @BRIEF This command requests algorithm service version.
*/
//============================================================================

//============================================================================
// Service definition
//============================================================================
service SNS_SAM_FNS_SVC {
  //! @ID SNS_SAM_FNS_CANCEL
  sns_common_cancel_req_msg        SNS_SAM_FNS_CANCEL_REQ,
  sns_common_cancel_resp_msg       SNS_SAM_FNS_CANCEL_RESP
    = 0x00;

  //! @ID SNS_SAM_FNS_VERSION
  sns_common_version_req_msg       SNS_SAM_FNS_VERSION_REQ,
  sns_common_version_resp_msg      SNS_SAM_FNS_VERSION_RESP
    = 0x01;

  //! @ID SNS_SAM_FNS_ENABLE
  sns_sam_fns_enable_req_msg       SNS_SAM_FNS_ENABLE_REQ,
  sns_sam_fns_enable_resp_msg      SNS_SAM_FNS_ENABLE_RESP
    = 0x02;

  //! @ID SNS_SAM_FNS_DISABLE
  sns_sam_fns_disable_req_msg      SNS_SAM_FNS_DISABLE_REQ,
  sns_sam_fns_disable_resp_msg     SNS_SAM_FNS_DISABLE_RESP
    = 0x03;

  //! @ID SNS_SAM_FNS_GET_REPORT
  sns_sam_fns_get_report_req_msg   SNS_SAM_FNS_GET_REPORT_REQ,
  sns_sam_fns_get_report_resp_msg  SNS_SAM_FNS_GET_REPORT_RESP
    = 0x04;

  //! @ID SNS_SAM_FNS_REPORT
  sns_sam_fns_report_ind_msg       SNS_SAM_FNS_REPORT_IND
    = 0x05;

  //! @ID SNS_SAM_FNS_ERROR
  sns_sam_fns_error_ind_msg        SNS_SAM_FNS_ERROR_IND
    = 0x06;

  //! @ID SNS_SAM_GET_ALGO_ATTRIBUTES
  sns_sam_get_algo_attrib_req_msg  SNS_SAM_FNS_GET_ATTRIBUTES_REQ,
  sns_sam_get_algo_attrib_resp_msg SNS_SAM_FNS_GET_ATTRIBUTES_RESP
    = 0x24;

} = SNS_QMI_SVC_ID_9;

//============================================================================
// File footer
//============================================================================
/**
@FOOTER
*/

//============================================================================
// End of Module
//============================================================================

