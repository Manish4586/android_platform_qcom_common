/*****************************************************************************
  @FILE   sns_smgr_api_v01.idl

  @BRIEF  SNS_SMGR (Sensors Manager) API

  @DESCRIPTION
  The SMGR API defines messages which provide SMGR services to its clients.
  The SMGR services include getting all or single sensor information, and
  retrieving sensor samples, delivering calibration factors, and receiving sensor status.
  To get services, the clients must utilize these messages through the sensor API.

  @COPYRIGHT Copyright (c) 2011-2014 Qualcomm Technologies, Inc.
  All Rights Reserved
  Qualcomm Technologies Proprietary and Confidential.
*****************************************************************************/
include "sns_common_v01.idl";
include "sns_smgr_common_v01.idl";

revision 23;

//!============================================================================
/** @COMMAND SNS_SMGR_REPORT
    @BRIEF This command requests sensor periodic report for sensor sampling
    @USAGE Production
    @SECURITY_LEVEL Low Risk
    @REQUIRED_ACTION Default
*/
//!============================================================================


//! @MSG     SNS_SMGR_REPORT_REQ
//! @TYPE    Request
//! @SENDER  Client
message
{
  mandatory uint8                 ReportId;
  /**< The report ID assigned by a client to distinguish this report among its
       reports */

  mandatory uint8                 Action;
  /**< Defines if this report is to be added or deleted.
    - 01 - SNS_SMGR_REPORT_ACTION_ADD
    - 02 - SNS_SMGR_REPORT_ACTION_DELETE
    - All other values defined as SNS_SMGR_REPORT_ACTION_XXXX style are reserved
      for future use
    When SNS_SMGR_REPORT_ACTION_ADD is used and the same report ID is already added,
    the old one will be replaced by the new report request.
    */

  mandatory uint16                ReportRate;
  /**< Defines reporting rate. This value shall be within the sensor capacity which
    can be identified by using SNS_SMGR_SINGLE_SENSOR_INFO message. When this parameter
    is 0, 20Hz will be used as the default.
    If a value greater than SNS_SMGR_SAMPLING_RATE_INVERSION_POINT is given, then this
    parameter will be treated as a report period, in milliseconds. This allows a client
    to sample the sensor at a rate less than 1 Hz. It is not recommended to sample any
    sensor but environmental sensors at a rate less than 1 Hz. */

  mandatory uint8                 BufferFactor;
  /**< This parameter is defined for future use and is NOT implemented.
       This value shall be set to 0 */

  mandatory sns_smgr_periodic_report_item_s  Item<SNS_SMGR_MAX_ITEMS_PER_REPORT>;

  //! @VERSION 1.2
  optional uint8                  cal_sel<SNS_SMGR_MAX_ITEMS_PER_REPORT>;
  /**< Defines the calibration option to be used. The index of the cal sel should match
    to the index of the Item parameter.
    - 00 - SNS_SMGR_CAL_SEL_FULL_CAL which refers applying factory calibration factors
           (if available) and auto calibration factors(if available) on to the raw data
    - 01 - SNS_SMGR_CAL_SEL_FACTORY_CAL which refers applying factory calibration factors
          (if available) on to the raw data
    - 02 - SNS_SMGR_CAL_SEL_RAW
    - All other values defined as SNS_SMGR_CAL_SEL_XXXX style are reserved for future use
    */

  //! @VERSION 1.6
  optional uint8                  SrcModule;
  /**< For sensor internal use only.
       Defines the source module that is sending this message.
    */

  //! @VERSION 1.7
  optional uint16                 SampleQuality<SNS_SMGR_MAX_ITEMS_PER_REPORT>;
  /**< Specifies the desired quality of sensor data
    - SNS_SMGR_SAMPLE_QUALITY_ACCURATE_TIMESTAMP - High accuracy for sample timestamp.
      Delivery sampling rate may be up to twice the requested sampling rate,
      and may also result in higher report rate.
      Clients are recommended to specify 50, 100, or 200Hz sampling rates to
      minimize the chance of increase in sampling rate.
    */

  //! @VERSION 1.8
  optional sns_suspend_notification_s notify_suspend;
  /**< Identifies if indications for this request should be sent
       when the processor is in suspend state.

       If this field is not specified, default value will be set to
       proc_type                  = SNS_PROC_APPS
       send_indications_during_suspend  = FALSE
    */

} sns_smgr_periodic_report_req_msg;


//! @MSG     SNS_SMGR_REPORT_RESP
//! @TYPE    Response
//! @SENDER  Service
message {

  mandatory sns_common_resp_s      Resp = 2;

  mandatory uint8                  ReportId;
  /**< The report ID assigned by a client to distinguish this report among its reports */

  mandatory uint8                  AckNak;
  /**< Defines whether this response is Acknowledgement or Negative Acknowledgement
    - 00 - SNS_SMGR_RESPONSE_ACK_SUCCESS
    - 01 - SNS_SMGR_RESPONSE_ACK_MODIFIED some parameters in the request are modified
    - 02 - SNS_SMGR_RESPONSE_NAK_RESOURCES
    - 03 - SNS_SMGR_RESPONSE_NAK_REPORT_ID Can't find report to delete
    - 04 - SNS_SMGR_RESPONSE_NAK_NO_ITEMS no item is supplied or the item is
           deleted by SMGR because of wrong parameters
    - 05 - SNS_SMGR_RESPONSE_NAK_UNK_ACTION when the action value is other than
           add or delete
    - All other values defined as SNS_SMGR_RESPONSE_ACK/NAK_XXXX style are reserved
      for future use
  */

  mandatory sns_smgr_reason_pair_s ReasonPair<SNS_SMGR_MAX_NUM_REASONS>;

} sns_smgr_periodic_report_resp_msg;

/** Sensor Periodic Report Message
  Sent to a client at the reporting rate.
*/


//!============================================================================
/** @COMMAND SNS_SMGR_REPORT_IND
    @BRIEF This command requests sensor periodic report for sensor sampling
    @USAGE Production
    @SECURITY_LEVEL Medium Risk
    @REQUIRED_ACTION Default
*/
//!============================================================================

//! @MSG     SNS_SMGR_REPORT_IND
//! @TYPE    Indication
//! @SENDER  Service
message {

  mandatory uint8                 ReportId;
  /**< The report ID assigned by a client to distinguish this report among its
       reports */

  mandatory uint8                 status;
  /**< Defines the status. Non-zero code notifies that this report is canceled
      - 00 - SNS_SMGR_REPORT_OK
      - 01 - SNS_SMGR_REPORT_CANCEL_RESOURCE
      - 02 - SNS_SMGR_REPORT_CANCEL_FAILURE
      - All other values defined as SNS_SMGR_REPORT_XXXX style are reserved for
        future use
       */

  mandatory uint16                CurrentRate;
  /**< The current reporting rate that is the sampling rate of the first item.
       If this value is greater than SNS_SMGR_SAMPLING_RATE_INVERSION_POINT,
       then it should be interpreted as the current period, in milliseconds. */

  mandatory sns_smgr_data_item_s  Item<SNS_SMGR_MAX_ITEMS_PER_REPORT>;
  /* The structure repeats for each item that was defined for this
     report. */

  //! @VERSION 1.7
  optional uint32                  SamplingRate<SNS_SMGR_MAX_ITEMS_PER_REPORT>;
  /**< Specifies the frequency at which sensor is actually sampled. This value
       is expressed in Q16 format and in unit of Hz.
     */
} sns_smgr_periodic_report_ind_msg;

//!============================================================================
/** @COMMAND SNS_SMGR_CAL
    @BRIEF This command sets dynamic or auto generated calibrate factors of a sensor.
    @USAGE Production
    @SECURITY_LEVEL Critical
    @SECURITY_SUBLEVEL Other
    @SECURITY_SUBLEVEL_OTHER This message can cause sensor to go into bad state
    @REQUIRED_ACTION Other
    @REQUIRED_ACTION_OTHER API and code review
*/
//!============================================================================

//! @MSG     SNS_SMGR_CAL_REQ
//! @TYPE    Request
//! @SENDER  Client
//----------------------------------------------------------------------------

message {
  mandatory uint8 usage;
  /**< Defines the usage of the calibration data in this request message.
    - 00 - SNS_SMGR_CAL_DYNAMIC
    - 02 - SNS_SMGR_CAL_FACTORY
    - All other values defined as SNS_SMGR_CAL_XXX style are reserved for
      future use
  */

  mandatory uint8        SensorId;
  /**< Defines the sensor that this configuration pertains to. Refer to the
       Sensor ID table defined under "Define sensor identifier" .
  */

  mandatory uint8        DataType;
  /**< Defines sensor data type which classifies if the data type is primary
    or secondary.
    - 00 - SNS_SMGR_DATA_TYPE_PRIMARY
    - 01 - SNS_SMGR_DATA_TYPE_SECONDARY
    - All other values defined as SNS_SMGR_DATA_TYPE_XXXX style are reserved
      for future use
      This parameter identifies the sensor data type.
   */

  mandatory int32        ZeroBias<SNS_SMGR_SENSOR_DIMENSION>;
  /**<
    The value must be Q16 format (16 bits for integer part, 16 bits for decimal
    part), indicating the zero bias that is to be added (in nominal engineering
    units)
  */

  mandatory uint32       ScaleFactor<SNS_SMGR_SENSOR_DIMENSION>;
  /**<
    The value must be Q16 format, a multiplier that indicates scale factor need
    to be multiplied to current data .
    For example, enter 1.01 if the scaling is 1% less aggressive or 0.95 if it
    is 5% more aggressive.
  */

  optional int32        CompensationMatrix<SNS_SMGR_COMPENSATION_MATRIX_SIZE>;
  /**<
    The Compensation Matrix, if present to calibrate sensor data for.
    If the Compensation Matrix is supplied, the ScaleFactor above are ignored.
    The calibrated sample (Sc) is computed as
    Sc = (Sr - Bias)*CM
    where :
        Sc = Calibrated sensor sample
        Sr = Read sensor sample
        CM = Compensation Matrix (from this message)
        Bias = Zero Bias (from this message)

    Matrix elements are in Q16 format in row major order ie:
    CM =  CM0  CM1  CM2
          CM3  CM4  CM5
          CM6  CM7  CM8
  */

  optional int32       CalibrationAccuracy;
  /**< Calibration Accuracy. The interpretation of this field is
       implementation dependant. A guiding rule though, is that higher
       accuracies are better with 0 meaning complete unreliability.
  */

} sns_smgr_sensor_cal_req_msg;

//! @MSG     SNS_SMGR_CAL_RESP
//! @TYPE    Response
//! @SENDER  Service
message {

  mandatory sns_common_resp_s Resp = 2;

} sns_smgr_sensor_cal_resp_msg;



//!============================================================================
/** @COMMAND SNS_SMGR_ALL_SENSOR_INFO
    @BRIEF This command sends all sensor info request and get all sensor IDs and
           short sensor names.
    @USAGE Production
    @SECURITY_LEVEL Low Risk
    @REQUIRED_ACTION Default
*/
//!============================================================================


//!============================================================================

//! @MSG     SNS_SMGR_ALL_SENSOR_INFO_REQ
//! @TYPE    Request
//! @SENDER  Client
//----------------------------------------------------------------------------

message { /* empty body */ } sns_smgr_all_sensor_info_req_msg;


//! @MSG     SNS_SMGR_ALL_SENSOR_INFO_RESP
//! @TYPE    Response
//! @SENDER  Service
//----------------------------------------------------------------------------
message {

  mandatory sns_common_resp_s Resp = 2;

  mandatory sns_smgr_sensor_id_info_s SensorInfo<SNS_SMGR_MAX_SENSOR_NUM>;

} sns_smgr_all_sensor_info_resp_msg;

//!============================================================================
/** @COMMAND SNS_SMGR_SINGLE_SENSOR_INFO
    @BRIEF This command sends single sensor info request and gets all the detailed
           information of the sensor
    @USAGE Production
    @SECURITY_LEVEL Medium Risk
    @REQUIRED_ACTION Default
*/
//!============================================================================

//! @MSG     SNS_SMGR_SINGLE_SENSOR_INFO_REQ
//! @TYPE    Request
//! @SENDER  Client
//----------------------------------------------------------------------------

message {
mandatory uint8     SensorID;
  /**< see #define SNS_SMGR_ID_XXX_XXX */
} sns_smgr_single_sensor_info_req_msg;

//! @MSG     SNS_SMGR_SINGLE_SENSOR_INFO_RESP
//! @TYPE    Response
//! @SENDER  Service
//----------------------------------------------------------------------------
message {

 mandatory sns_common_resp_s Resp = 2;

 mandatory sns_smgr_sensor_info_s SensorInfo;

 optional uint32 num_buffered_reports<SNS_SMGR_MAX_DATA_TYPE_PER_SENSOR>;
 /**< The max number of reports that can be buffered for this data type */

 optional sns_smgr_op_mode_e op_mode;
 /**< Sensor's current operating mode */

 optional uint64 suid<SNS_SMGR_MAX_DATA_TYPE_PER_SENSOR>;
 /**< 64-bit Unique ID for this sensor */

 optional sns_smgr_odr_list_s supported_odr_list< SNS_SMGR_MAX_DATA_TYPE_PER_SENSOR >;
 /**< List of supported ODR; could be empty */

} sns_smgr_single_sensor_info_resp_msg;

//!============================================================================
/** @COMMAND SNS_SMGR_SENSOR_TEST
    @BRIEF This command requests all-sensor test.
    These message are defined for future use, so the messages WON'T be supported.
    @USAGE Production
    @SECURITY_LEVEL Medium Risk
    @REQUIRED_ACTION Remove QC
*/
//!============================================================================

//! @MSG     SNS_SMGR_SENSOR_TEST_REQ
//! @TYPE    Request
//! @SENDER  Client
message { /* empty body */} sns_smgr_sensor_test_req_msg;

//! @MSG     SMGR_SENSOR_TEST_RESP
//! @TYPE    Response
//! @SENDER  Service
message {

  mandatory sns_common_resp_s Resp = 2;

  mandatory sns_smgr_sensor_test_result_s result<SNS_SMGR_MAX_SENSOR_NUM>;

} sns_smgr_sensor_test_resp_msg;

//!============================================================================
/** @COMMAND SNS_SMGR_SINGLE_SENSOR_TEST
    @BRIEF This command requests single sensor test.
    Currently only single sensor self-test is supported.
    @CMD_VERSION 1.3
    @USAGE Production
    @SECURITY_LEVEL Medium Risk
    @REQUIRED_ACTION Default
*/
//!============================================================================

//! @MSG     SNS_SMGR_SINGLE_SENSOR_TEST_REQ
//! @TYPE    Request
//! @SENDER  Client
//! @VERSION 1.3
message {
  mandatory uint8             SensorID;
  /**< Defines the sensor that this configuration pertains to.
       The sensor ID is defined as SNS_SMGR_ID_XXXX style.
  */
  mandatory uint8             DataType;
  /**< Defines sensor data type which classifies if the data type is primary
    or secondary.
    - 00 - SNS_SMGR_DATA_TYPE_PRIMARY
    - 01 - SNS_SMGR_DATA_TYPE_SECONDARY
  */
  mandatory sns_smgr_test_type_e TestType;
  /**< Defines the type of test to be executed.
    - 00 - SNS_SMGR_TEST_SELF
    - All other values defined as SNS_SMGR_TEST_XXXX style are reserved
      for future use
  */
  optional boolean            SaveToRegistry;
  /**< Specifies whether calibration data generated during the test should be
       saved to sensors registry.
       This applies only to sensors which generate calibration data as part of
       factory test.
       Default behavior is TRUE (save calibration data to sensors registry).
  */
  optional boolean            ApplyCalNow;
  /**< Specifies whether calibration data should take affect immediately, rather
       than after reboot.
       This applies only to sensors which generate calibration data as part of
       factory test.
       Default behavior is TRUE (apply calibration data immediately).
  */
} sns_smgr_single_sensor_test_req_msg;

//! @MSG     SNS_SMGR_SINGLE_SENSOR_TEST_RESP
//! @TYPE    Response
//! @SENDER  Service
//! @VERSION 1.3
message {
  mandatory sns_common_resp_s Resp = 2;
  mandatory uint8             SensorID;
  /**< Defines the sensor that this configuration pertains to.
       The sensor ID is defined as SNS_SMGR_ID_XXXX style.
  */
  mandatory uint8             DataType;
  /**< Defines sensor data type which classifies if the data type is primary
    or secondary.
    - 00 - SNS_SMGR_DATA_TYPE_PRIMARY
    - 01 - SNS_SMGR_DATA_TYPE_SECONDARY
  */
  mandatory sns_smgr_test_type_e    TestType;
  /**< Defines the type of test to be executed.
    - 00 - SNS_SMGR_TEST_SELF
    - All other values are reserved for future use
  */
  mandatory sns_smgr_test_status_e  TestStatus;  /**< Identifies test status */
} sns_smgr_single_sensor_test_resp_msg;

//! @MSG     SNS_SMGR_SINGLE_SENSOR_TEST_IND
//! @TYPE    Indication
//! @SENDER  Service
//! @VERSION 1.3
message {
  mandatory uint8             SensorID;
  /**< Defines the sensor that this configuration pertains to.
       The sensor ID is defined as SNS_SMGR_ID_XXXX style.
  */
  mandatory uint8             DataType;
  /**< Defines sensor data type which classifies if the data type is primary
    or secondary
    - 00 - SNS_SMGR_DATA_TYPE_PRIMARY
    - 01 - SNS_SMGR_DATA_TYPE_SECONDARY
  */
  mandatory sns_smgr_test_type_e    TestType;
  /**< Defines the type of test to be executed.
    - 00 - SNS_SMGR_TEST_SELF
    - All other values are reserved for future use
  */
  mandatory sns_smgr_test_result_e  TestResult; /**< Indicates test result */
  optional uint8                    ErrorCode;  /**< Test-specific error code */
} sns_smgr_single_sensor_test_ind_msg;

//!============================================================================
/** @COMMAND SNS_SMGR_SENSOR_POWER_STATUS
    @BRIEF This command requests sensor power status.
    These message are defined for future use, so the messages WON'T be supported.
    @USAGE Production
    @SECURITY_LEVEL Low Risk
    @REQUIRED_ACTION Remove QC
*/
//!============================================================================

//! @MSG     SNS_SMGR_SENSOR_POWER_STATUS_REQ
//! @TYPE    Request
//! @SENDER  Client
message {
  mandatory uint8                  ReportId;
  /**< ID assigned by client to distinguish client's reports */
  mandatory uint8 Action;
  /**< SNS_SMGR_POWER_STATUS_ADD =0 ,Add;
       SNS_SMGR_POWER_STATUS_DEL =1, Delete */
} sns_smgr_sensor_power_status_req_msg;


//! @MSG     SNS_SMGR_SENSOR_POWER_STATUS_RESP
//! @TYPE    Response
//! @SENDER  Service
message {

  mandatory sns_common_resp_s Resp = 2;

} sns_smgr_sensor_power_status_resp_msg;

//!============================================================================
/** @COMMAND SNS_SMGR_SENSOR_POWER_STATUS_IND
    @BRIEF This command requests sensor power status.
    These message are defined for future use, so the messages WON'T be supported.
    @USAGE Production
    @SECURITY_LEVEL Medium Risk
    @REQUIRED_ACTION Remove QC
*/
//!============================================================================

//! @MSG     SNS_SMGR_SENSOR_POWER_STATUS_IND
//! @TYPE    Indication
//! @SENDER  Service
message {
  mandatory uint8                  ReportId;
  /**< ID assigned by client to distinguish client's reports */
  mandatory sns_smgr_sensor_power_status_s PowerStatus<SNS_SMGR_MAX_SENSOR_NUM>;
} sns_smgr_sensor_power_status_ind_msg;


//!============================================================================
/** @COMMAND SNS_SMGR_SENSOR_POWER_CONTROL
    @BRIEF This command requests sensor power control.
    These message are defined for future use, so the messages WON'T be supported.
    @USAGE Production
    @SECURITY_LEVEL High Risk
    @REQUIRED_ACTION Remove QC
*/
//!============================================================================

//! @MSG     SNS_SMGR_SENSOR_POWER_CONTROL_REQ
//! @TYPE    Request
//! @SENDER  Client
message {
  mandatory uint8 SensorID;
  /**< See #define SNS_SMGR_ID_XXX_XXX; Defines the sensor that this configuration
       pertains to.
  */
  mandatory uint8 Action;
  /**< SNS_SMGR_POWER_CTRL_AUTO =0  automatic control (default)
       SNS_SMGR_POWER_CTRL_ACTIVE =1 active state - command the max power state
       SNS_SMGR_POWER_CTRL_IDLE =2   idle state - command to low power state
       SNS_SMGR_POWER_CTRL_OFF =3 = off - not possible in 8660 DSPS
  */
} sns_smgr_sensor_power_control_req_msg;

//! @MSG     SMGR_SENSOR_POWER_CONTROL_RESP
//! @TYPE    Response
//! @SENDER  Service
message {
  mandatory sns_common_resp_s Resp = 2;
} sns_smgr_sensor_power_control_resp_msg;


//!============================================================================
/** @COMMAND SNS_SMGR_SENSOR_STATUS
    @BRIEF This command requests sensor status which tells if the sensor is active,
    idle, or only one client is left for the sensor. Currently SMGR only supports
    one client at a time. So This feature is limited.
    @USAGE Production
    @SECURITY_LEVEL Medium Risk
    @REQUIRED_ACTION Default
*/
//!============================================================================

/* Status definition per processor */

//! @MSG     SNS_SMGR_SENSOR_STATUS_REQ
//! @TYPE    Request
//! @SENDER  Client
//! @VERSION 1.2
message {
  mandatory uint8             SensorID;
  /**< Defines the sensor that this configuration pertains to. Refer to the
       Sensor ID table defined under "Define sensor identifier" .
  */

  mandatory uint8             ReqDataTypeNum;
  /**< How many data types client monitors and requests sampling data, this
       is used by SMGR to tell if there is only one client left.  When the number
       of request items drop to this number, SMGR will send
       SNS_SMGR_SENSOR_STATUS_ONE_CLIENT indication for the sensor */
  mandatory uint8             Action;
  /**< SNS_SMGR_SENSOR_STATUS_ADD = 0, Add;
       SNS_SMGR_SENSOR_STATUS_DEL = 1, Delete
       All other values defined as SNS_SMGR_SENSOR_STATUS_XXXX style are reserved
       for future use
      */

} sns_smgr_sensor_status_req_msg;


//! @MSG     SNS_SMGR_SENSOR_STATUS_RESP
//! @TYPE    Response
//! @SENDER  Service
//! @VERSION 1.2
message {
   mandatory sns_common_resp_s Resp = 2;
   mandatory uint8             SensorID;
  /**< Defines the sensor that this configuration pertains to. Refer to the
       Sensor ID table defined under "Define sensor identifier" .
  */
} sns_smgr_sensor_status_resp_msg;

//!============================================================================
/** @COMMAND SNS_SMGR_SENSOR_STATUS_IND
    @BRIEF This command requests sensor status which tells if the sensor is active,
    idle, or only one client is left for the sensor. Currently SMGR only supports
    one client at a time. This feature is limited.
    @USAGE Production
    @SECURITY_LEVEL Medium Risk
    @REQUIRED_ACTION Default
*/
//!============================================================================

//! @MSG     SNS_SMGR_SENSOR_STATUS_IND
//! @TYPE    Indication
//! @SENDER  Service
//! @VERSION 1.2
message {
  mandatory uint8             SensorID;
  /**< Defines the sensor that this configuration pertains to. Refer to the
       Sensor ID table defined under "Define sensor identifier" .
  */

  mandatory uint8             SensorState;
  /**< Defines the sensor status for this indication. The status can be one of
    following:
    - 00 - SNS_SMGR_SENSOR_STATUS_UNKNOWN
    - 01 - SNS_SMGR_SENSOR_STATUS_IDLE
    - 02 - SNS_SMGR_SENSOR_STATUS_ACTIVE
    - 03 - SNS_SMGR_SENSOR_STATUS_ONE_CLIENT
    - All other values defined as SNS_SMGR_SENSOR_STATUS_XXXX style are reserved
      for future use
  */
  mandatory uint32            TimeStamp;
  /**< The timestamp when state is changed */

  optional uint16 PerProcToalClients<5>;
  /**< Total clients per processor indexed by the constants defined above */

  optional int32 MaxFreqPerProc<5>;
  /**< Max frequency of data requested by clients on each processor
       Units of Hz, Q16 format
  */

  optional int32 MaxUpdateRatePerProc<5>;
  /**< Max update rate of data requested by clients on each processor
       Units of Hz, Q16 format
  */

} sns_smgr_sensor_status_ind_msg;


//!============================================================================
/** @COMMAND SNS_SMGR_BUFFERING
  @BRIEF
  This command requests sensor data to be sampled and buffered up to be sent together

  @DETAILS
  For the purpose of power saving, sensors' data can be reported at a lower
  frequency than the frequency at which they are sampled.  This service
  benefits latency tolerant clients.

  @USAGE Production
  @SECURITY_LEVEL Low Risk
  @REQUIRED_ACTION Default
*/
//!============================================================================


//! @MSG     SNS_SMGR_BUFFERING_REQ
//! @TYPE    Request
//! @SENDER  Client
message
{
  mandatory uint8             ReportId;
  /**< The report ID assigned by client to be used for identifying corresponding
    response and indication messages
    */

  mandatory uint8             Action;
  /**< Specifies the action to be carried out for this report
    - SNS_SMGR_BUFFERING_ACTION_ADD
    - SNS_SMGR_BUFFERING_ACTION_DELETE
    - All other values will be rejected.
    An existing report will be replaced by a new report of the same ID.
    This includes Periodic Report.  It is advisable for clients to use different
    sets of IDs for Buffering reports and Periodic reports.
    */

  mandatory uint32            ReportRate;
  /**< Specifies the desired reporting rate expressed in Q16 format and in unit of Hz.
    This is only meaningful when paired with SNS_SMGR_BUFFERING_ACTION_ADD
    To indicate no periodic reports, use SNS_SMGR_BUFFERING_REPORT_RATE_NONE.
  */

  mandatory sns_smgr_buffering_req_item_s  Item<SNS_SMGR_BUFFERING_REQUEST_MAX_ITEMS>;
  /**< The items to be buffered.

       Note: It is NOT recommended to request a set of items with sampling
             rates less than 1 Hz and sampling rates above 1 Hz. Rather, it is
             recommended to request items with a sampling rate less than 1 Hz
             separately, in its own request. The reasoning behind this
             suggestion is to prevent large amounts of back-to-back QMI
             indications from coming in. Reports that have items with sub-hz
             (less than 1 Hz) sampling rates are forced to send each sample
             individually in back-to-back indications. (See TimeStampOffset in
             the sns_smgr_buffering_sample_s structure) (See Samples in the
             sns_smgr_buffering_ind_msg message)
  */

  //! @VERSION 1.8
  optional sns_suspend_notification_s notify_suspend;
  /**< Identifies if indications for this request should be sent
       when the processor is in suspend state.

       If this field is not specified, default value will be set to
       notify_suspend->proc_type                  = SNS_PROC_APPS
       notify_suspend->send_indications_during_suspend  = FALSE
    */

  //! @VERSION 1.9
  optional uint8                  SrcModule;
  /**< For sensor internal use only.
       Defines the source module that is sending this message.
    */
} sns_smgr_buffering_req_msg;

//! @MSG     SNS_SMGR_BUFFERING_RESP
//! @TYPE    Response
//! @SENDER  Service
message {

  mandatory sns_common_resp_s     Resp = 2;

  optional uint8                  ReportId;
  /**< The ID corresponding to a Buffering request */

  optional uint8                  AckNak;
  /**< Defines whether this response is Acknowledgement or Negative Acknowledgement
    - SNS_SMGR_RESPONSE_ACK_SUCCESS - the request has been accepted
    - SNS_SMGR_RESPONSE_ACK_MODIFIED - some parameters in the request are modified
    - SNS_SMGR_RESPONSE_NAK_RESOURCES - no resources to service the request
    - SNS_SMGR_RESPONSE_NAK_REPORT_ID - no such report to be deleted
    - SNS_SMGR_RESPONSE_NAK_NO_ITEMS - no valid items were sent in request
    - SNS_SMGR_RESPONSE_NAK_UNK_ACTION - invalid Action field in request
    - SNS_SMGR_RESPONSE_NAK_INTERNAL_ERR - unspecified error
  */

  optional sns_smgr_reason_pair_s ReasonPair<SNS_SMGR_MAX_NUM_REASONS>;

} sns_smgr_buffering_resp_msg;

//!============================================================================
/** @COMMAND SNS_SMGR_BUFFERING_QUERY
    @BRIEF This command allows the client to request sensor samples from
    the SMGR current buffer. Often combined with requesting a buffering
    report with the report rate set to SNS_SMGR_BUFFERING_REPORT_RATE_NONE.
    @USAGE Production
    @SECURITY_LEVEL Low Risk
    @REQUIRED_ACTION Default
*/
//!============================================================================

//! @MSG     SNS_SMGR_BUFFERING_QUERY_REQ
//! @TYPE    Request
//! @SENDER  Client
message
{
  mandatory uint16                QueryId;
  /**< The ID corresponding to a Buffering request
    The lower 8-bit value is the ReportId of the Buffering request initiated
    by same client
    The upper 8-bit value is the transaction ID assigned by client for each query
    Query response and indications for this request shall carry this QueryId
    */

  mandatory uint8                 SensorId;
  /**< Identifies the sensor from which to collect data. */

  mandatory uint8                 DataType;
  /**< Identifies the data type of the specified sensor */

  mandatory uint32                TimePeriod[2];
  /**< Specify the start and end of the time period within which to collect samples.
    - TimePeriod[0] is timestamp of the start of the time period
    - TimePeriod[1] is timestamp of the end of the time period
    */

  //! @VERSION 1.13
  optional uint8                  SrcModule;
  /**< For sensor internal use only.
       Defines the source module that is sending this message.
    */

} sns_smgr_buffering_query_req_msg;

//! @MSG     SNS_SMGR_BUFFERING_QUERY_RESP
//! @TYPE    Response
//! @SENDER  Service
message {

  mandatory sns_common_resp_s     Resp = 2;

  optional uint16                 QueryId;
  /**< The ID corresponding to a Query request */

  optional uint8                  AckNak;
  /**< Defines whether this response is Acknowledgement or Negative Acknowledgement
    - SNS_SMGR_RESPONSE_ACK_SUCCESS - the request has been accepted
    - SNS_SMGR_RESPONSE_NAK_RESOURCES - no resources to service the request
    - SNS_SMGR_RESPONSE_NAK_REPORT_ID - report not found for given ID
    - SNS_SMGR_RESPONSE_NAK_QUERY_ID - same request already received
    - SNS_SMGR_RESPONSE_NAK_TIME_PERIOD - the start of time period is not greater
        than end of time periodic
    - SNS_SMGR_RESPONSE_NAK_SENSOR_ID - requested sensor ID/data type is not in
        Buffering request
    - SNS_SMGR_RESPONSE_NAK_INTERNAL_ERR - unspecified error
  */

} sns_smgr_buffering_query_resp_msg;


//!============================================================================
/** @COMMAND SNS_SMGR_BUFFERING_QUERY_IND
    @BRIEF Sensor Buffering Report Message sent to a client at the reporting rate.
    @USAGE Production
    @SECURITY_LEVEL Medium Risk
    @REQUIRED_ACTION Default
*/
//!============================================================================

//! @MSG     SNS_SMGR_BUFFERING_QUERY_IND
//! @TYPE    Indication
//! @SENDER  Service
message {

  mandatory uint16                QueryId;
  /**< The ID corresponding to a Query request */

  mandatory uint32                FirstSampleTimestamp;
  /**< Timestamp of first sample belonging to this SensorId/DataType pair.
    */

  mandatory uint32                SamplingRate;
  /**< Specifies the actual frequency at which requested sensor is sampled.
       This value is expressed in Q16 format and in unit of Hz. */

  mandatory sns_smgr_buffering_sample_s  Samples<SNS_SMGR_BUFFERING_REPORT_MAX_SAMPLES>;
  /**< Samples collected within requested time period */

} sns_smgr_buffering_query_ind_msg;


//!============================================================================
//! Service definition
//! ============================================================================


service SNS_SMGR_SVC {
  //! @ID SNS_COMMON_CANCEL
  sns_common_cancel_req_msg             SNS_SMGR_CANCEL_REQ,
  sns_common_cancel_resp_msg            SNS_SMGR_CANCEL_RESP
   = 0x00;

  //! @ID SNS_COMMON_VERSION
  sns_common_version_req_msg            SNS_SMGR_VERSION_REQ,
  sns_common_version_resp_msg           SNS_SMGR_VERSION_RESP
    = 0x01;

  //! @ID SNS_SMGR_REPORT
  sns_smgr_periodic_report_req_msg      SNS_SMGR_REPORT_REQ,
  sns_smgr_periodic_report_resp_msg     SNS_SMGR_REPORT_RESP
    = 0x02;
  //! @ID SNS_SMGR_REPORT_IND
  sns_smgr_periodic_report_ind_msg      SNS_SMGR_REPORT_IND
    = 0x03;

   //! @ID SNS_SMGR_CAL
  sns_smgr_sensor_cal_req_msg           SNS_SMGR_CAL_REQ,
  sns_smgr_sensor_cal_resp_msg          SNS_SMGR_CAL_RESP
    = 0x04;

  //! @ID SNS_SMGR_ALL_SENSOR_INFO
  sns_smgr_all_sensor_info_req_msg      SNS_SMGR_ALL_SENSOR_INFO_REQ,
  sns_smgr_all_sensor_info_resp_msg     SNS_SMGR_ALL_SENSOR_INFO_RESP
    = 0x05;

  //! @ID SNS_SMGR_SINGLE_SENSOR_INFO
  sns_smgr_single_sensor_info_req_msg   SNS_SMGR_SINGLE_SENSOR_INFO_REQ,
  sns_smgr_single_sensor_info_resp_msg  SNS_SMGR_SINGLE_SENSOR_INFO_RESP
    = 0x06;

  //! @ID SNS_SMGR_SENSOR_TEST
  sns_smgr_sensor_test_req_msg           SNS_SMGR_SENSOR_TEST_REQ,
  sns_smgr_sensor_test_resp_msg          SNS_SMGR_SENSOR_TEST_RESP
    = 0x07;

  //! @ID SNS_SMGR_SENSOR_POWER_STATUS
  sns_smgr_sensor_power_status_req_msg   SNS_SMGR_SENSOR_POWER_STATUS_REQ,
  sns_smgr_sensor_power_status_resp_msg  SNS_SMGR_SENSOR_POWER_STATUS_RESP
    =0x08;
  //! @ID SNS_SMGR_SENSOR_POWER_STATUS_IND
  sns_smgr_sensor_power_status_ind_msg   SNS_SMGR_SENSOR_POWER_STATUS_IND
    =0x09;

  //! @ID SNS_SMGR_SENSOR_POWER_CONTROL
  sns_smgr_sensor_power_control_req_msg  SNS_SMGR_SENSOR_POWER_CONTROL_REQ,
  sns_smgr_sensor_power_control_resp_msg SNS_SMGR_SENSOR_POWER_CONTROL_RESP
    =0x0a;

  //! @ID SNS_SMGR_SENSOR_STATUS
  sns_smgr_sensor_status_req_msg         SNS_SMGR_SENSOR_STATUS_REQ,
  sns_smgr_sensor_status_resp_msg        SNS_SMGR_SENSOR_STATUS_RESP
    =0x0b;
  //! @ID SNS_SMGR_SENSOR_STATUS_IND
  sns_smgr_sensor_status_ind_msg         SNS_SMGR_SENSOR_STATUS_IND
    =0x0c;

  //! @ID SNS_SMGR_SINGLE_SENSOR_TEST
  sns_smgr_single_sensor_test_req_msg    SNS_SMGR_SINGLE_SENSOR_TEST_REQ,
  sns_smgr_single_sensor_test_resp_msg   SNS_SMGR_SINGLE_SENSOR_TEST_RESP,
  sns_smgr_single_sensor_test_ind_msg    SNS_SMGR_SINGLE_SENSOR_TEST_IND
    =0x0d;

  //! @ID SNS_SMGR_BUFFERING
  sns_smgr_buffering_req_msg             SNS_SMGR_BUFFERING_REQ,
  sns_smgr_buffering_resp_msg            SNS_SMGR_BUFFERING_RESP
    =0x21;
  //! @ID SNS_SMGR_BUFFERING_IND
  sns_smgr_buffering_ind_msg             SNS_SMGR_BUFFERING_IND
    =0x22;

  //! @ID SNS_SMGR_BUFFERING_QUERY
  sns_smgr_buffering_query_req_msg       SNS_SMGR_BUFFERING_QUERY_REQ,
  sns_smgr_buffering_query_resp_msg      SNS_SMGR_BUFFERING_QUERY_RESP
    =0x23;
  //! @ID SNS_SMGR_BUFFERING_QUERY_IND
  sns_smgr_buffering_query_ind_msg       SNS_SMGR_BUFFERING_QUERY_IND
    =0x24;

} = SNS_QMI_SVC_ID_0;

//============================================================================
// File footer
//============================================================================
/**
@FOOTER
Our sensor API is the greatest!
*/
//============================================================================
// End of Module
//============================================================================
