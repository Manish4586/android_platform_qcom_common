/*****************************************************************************
  @FILE     sns_sam_gyrobuf_v01.idl

  @BRIEF    Gyro Buffering

  @DESCRIPTION
  This specification contains API for using Gyro Buffering in Sensors Core
  (SAM). Gyro samples are provided on-demand; the client pulls data from the
  algorithm by issuing start and end times.

  For every REQ, there is a RESP acknowledgement. Sensor data are contained in
  IND some time after RESP.

  Copyright (c) 2012-2013 Qualcomm Technologies, Inc.  All Rights Reserved
  Qualcomm Technologies Proprietary and Confidential.

*****************************************************************************/
include "sns_common_v01.idl";

revision 3;

/****************************************************************************
 *  @BRIEF  Constants
 ****************************************************************************/
const SNS_SAM_GYROBUF_MAX_BUFSIZE = 16;   //!< max # of samples in 'gyro'
const SNS_SAM_GYROBUF_MAX_BUFSIZE2 = 12;  //!< max # of samples in 'gyro2'
/**<  Maximum number of samples <= 27 -- adding 1 for margin */


/****************************************************************************
 *  @BRIEF  Definition of a sample in GYROBUF
 ****************************************************************************/
struct {
  int32   value[3];   /**< gyro value (x,y,z), Q16 */
  uint32  timestamp;  //!< time instance (DSPS ticks) when x,y,z are acquired
} sns_sam_gyrobuf_sample_t;


/****************************************************************************
 *  @BRIEF   Message Definitions
 ****************************************************************************/

/****************************************************************************
 *  @COMMAND SNS_SAM_GYROBUF_ENABLE
 *  @BRIEF   Report request/response from a sensor algorithm.
 ****************************************************************************/

//! @MSG     SNS_SAM_GYROBUF_ENABLE_REQ
//! @TYPE    Request
//! @SENDER  Control point
//----------------------------------------------------------------------------
message {
  mandatory uint32 sample_rate;            //!< sample rate (Hz), Q16
  mandatory uint8  extra_sample;
  /**<  if extra_sample==1, include one sample before t_start, and one sample
        after t_end.
   */
  //! @VERSION 1.3
  optional sns_suspend_notification_s notify_suspend;
  /**< Identifies if indications for this request should be sent
       when the processor is in suspend state.

       If this field is not specified, default value will be set to
       notify_suspend->proc_type                  = SNS_PROC_APPS
       notify_suspend->send_indications_during_suspend  = FALSE

       This field does not have any bearing on error indication
       messages, which will be sent even during suspend.
    */

} sns_sam_gyrobuf_enable_req_msg;

//! @MSG     SNS_SAM_GYROBUF_ENABLE_RESP
//! @TYPE    Response
//! @SENDER  Service
//----------------------------------------------------------------------------
message {
  mandatory  sns_common_resp_s   resp = 2;
  optional   uint8               instance_id;
   /**<
    Instance ID is assigned by SAM.
    The client shall use this instance ID for future messages associated with
    this algorithm instance.
  */
} sns_sam_gyrobuf_enable_resp_msg;


/****************************************************************************
 *  @COMMAND SNS_SAM_GYROBUF_DISABLE
 *  @BRIEF   Disables algorithm
 ****************************************************************************/

//! @MSG     SNS_SAM_GYROBUF_DISABLE_REQ
//! @TYPE    Request
//! @SENDER  Control point
//----------------------------------------------------------------------------
message {
  mandatory uint8  instance_id;
} sns_sam_gyrobuf_disable_req_msg;

//! @MSG     SNS_SAM_GYROBUF_DISABLE_RESP
//! @TYPE    Response
//! @SENDER  Service
//----------------------------------------------------------------------------
message {
 mandatory  sns_common_resp_s   resp = 2;
 optional   uint8               instance_id;
} sns_sam_gyrobuf_disable_resp_msg;


/****************************************************************************
 *  @COMMAND SNS_SAM_GYROBUF_REPORT
 *  @BRIEF   Report indication from a sensor algorithm.
 *
 *  The indication is sent out by the algorithm some time after GET_REPORT_RESP
 *  is sent to the client. Reason: The client's request may not be satisfied
 *  right away, so REPORT_IND is used instead (to make it asynchronous). Once
 *  GYROBUF can fulfill the request after some delay, it then sends out a
 *  REPORT_IND with the desired data.
 ****************************************************************************/

//! @MSG     SNS_SAM_GYROBUF_REPORT_IND
//! @TYPE    Indication
//! @SENDER  Service
//----------------------------------------------------------------------------
message {
  mandatory uint8     instance_id;
  mandatory uint32    timestamp; //!< time when this msg is generated
  mandatory sns_sam_gyrobuf_sample_t    gyro<SNS_SAM_GYROBUF_MAX_BUFSIZE>;
  mandatory uint32    t_start;   //!< start time (DSPS tick)
  mandatory uint32    t_end;     //!< end time (DSPS tick)
  mandatory uint8     seqnum;    /**< sequence number (associated with the
                                      corresponding REPORT_REQ) */
  optional  sns_sam_gyrobuf_sample_t    gyro2<SNS_SAM_GYROBUF_MAX_BUFSIZE2>;
  /**< 'gyro2' is used to accommodate remaining gyro samples, after 'gyro' is
        filled up. */
} sns_sam_gyrobuf_report_ind_msg;


/****************************************************************************
 *  @COMMAND SNS_SAM_GYROBUF_GET_REPORT
 *  @BRIEF   Report request/response from a sensor algorithm.
 ****************************************************************************/

//! @MSG     SNS_SAM_GYROBUF_GET_REPORT_REQ
//! @TYPE    Request
//! @SENDER  Control point
//----------------------------------------------------------------------------
message {
  mandatory uint8     instance_id;
  mandatory uint32    t_start;   //!< start time (DSPS tick)
  mandatory uint32    t_end;     //!< end time (DSPS tick)
  mandatory uint8     seqnum;    //!< sequence number (issued by client)
} sns_sam_gyrobuf_get_report_req_msg;

//! @MSG     SNS_SAM_GYROBUF_GET_REPORT_RESP
//! @TYPE    Response
//! @SENDER  Service
//----------------------------------------------------------------------------
message {
  mandatory sns_common_resp_s  resp = 2;
  optional uint8              instance_id;
} sns_sam_gyrobuf_get_report_resp_msg;


/****************************************************************************
 *  @COMMAND  SNS_SAM_GYROBUF_ERROR
 *  @BRIEF    Asynchronous error report from a sensor algorithm.
 ****************************************************************************/

//! @MSG     SNS_SAM_GYROBUF_ERROR_IND
//! @TYPE    Indication
//! @SENDER  Service
//============================================================================
message {
  mandatory uint8       error;        //!< sensors error code
  mandatory uint8       instance_id;
} sns_sam_gyrobuf_error_ind_msg;


//============================================================================
// Service definition
//============================================================================
service SNS_SAM_GYROBUF_SVC {
  //! @ID SNS_COMMON_CANCEL
  sns_common_cancel_req_msg        SNS_SAM_GYROBUF_CANCEL_REQ,
  sns_common_cancel_resp_msg       SNS_SAM_GYROBUF_CANCEL_RESP
    = 0x00;

  //! @ID SNS_COMMON_VERSION
  sns_common_version_req_msg       SNS_SAM_GYROBUF_VERSION_REQ,
  sns_common_version_resp_msg      SNS_SAM_GYROBUF_VERSION_RESP
    = 0x01;

  //! @ID SNS_SAM_GYROBUF_ENABLE
  sns_sam_gyrobuf_enable_req_msg       SNS_SAM_GYROBUF_ENABLE_REQ,
  sns_sam_gyrobuf_enable_resp_msg      SNS_SAM_GYROBUF_ENABLE_RESP
    = 0x02;

  //! @ID SNS_SAM_GYROBUF_DISABLE
  sns_sam_gyrobuf_disable_req_msg      SNS_SAM_GYROBUF_DISABLE_REQ,
  sns_sam_gyrobuf_disable_resp_msg     SNS_SAM_GYROBUF_DISABLE_RESP
    = 0x03;

  //! @ID SNS_SAM_GYROBUF_GET_REPORT
  sns_sam_gyrobuf_get_report_req_msg   SNS_SAM_GYROBUF_GET_REPORT_REQ,
  sns_sam_gyrobuf_get_report_resp_msg  SNS_SAM_GYROBUF_GET_REPORT_RESP
    = 0x04;

  //! @ID SNS_SAM_GYROBUF_REPORT
  sns_sam_gyrobuf_report_ind_msg       SNS_SAM_GYROBUF_REPORT_IND
    = 0x05;

  //! @ID SNS_SAM_GYROBUF_ERROR
  sns_sam_gyrobuf_error_ind_msg        SNS_SAM_GYROBUF_ERROR_IND
    = 0x06;

} = SNS_QMI_SVC_ID_34;

//============================================================================
// File footer
//============================================================================

//============================================================================
// End of Module
//============================================================================

