#ifndef SNS_SAM_MR_H
#define SNS_SAM_MR_H

/*============================================================================
  @file sns_sam_mr.h

  Sensors Algorithm Manager - Message Router header

  This header file contains the interface definitions for SAM MR.

  Copyright (c) 2010-2013 Qualcomm Technologies, Inc.  All Rights Reserved.
  Qualcomm Technologies Proprietary and Confidential.

============================================================================*/

/*---------------------------------------------------------------------------
 * Include Files
 * -------------------------------------------------------------------------*/
#include "sns_common.h"
#include "sns_smr_util.h"

/*---------------------------------------------------------------------------
 * Type Declarations
 * -------------------------------------------------------------------------*/
typedef int sns_sam_mr_conn_hndl;
struct sns_sam_client_req;
struct sns_sam_mr_algo_conn_hndl_s;
typedef struct sns_sam_mr_algo_conn_hndl_s sns_sam_mr_algo_conn_hndl;

/*---------------------------------------------------------------------------
 * Function Declarations
 * -------------------------------------------------------------------------*/

/*=========================================================================
  FUNCTION:  sns_sam_mr_msg_rcv
  =========================================================================*/
/*!
  @brief Receive a message from the pending queue

  @return Message pointer as allocated by sns_smr_msg_alloc.
*/
/*=======================================================================*/
void* sns_sam_mr_msg_rcv( void );

/*=========================================================================
  FUNCTION:  sns_sam_mr_init
  =========================================================================*/
/*!
  @brief Initialize the message routing portion of the SAM system.

  @return SNS_SUCCESS or error code.
*/
/*=======================================================================*/
sns_err_code_e sns_sam_mr_init( void );

/*=========================================================================
  FUNCTION:  sns_sam_mr_send
  =========================================================================*/
/*!
  @brief Send a request or response message through the message router.

  @param[io] msg_ptr: Message to send, as allocated by sns_smr_msg_alloc.
              Will be freed if SNS_SUCCESS.
  @param[i] algo_inst_hndl: Handle for QMI services.  Each algorithm
              instance will have a corresponding handle, and NULL
              should be used for other services (e.g. Time, Reg).

  @return SNS_SUCCESS or error code.
*/
/*=======================================================================*/
sns_err_code_e sns_sam_mr_send( void *msg_ptr,
    sns_sam_mr_algo_conn_hndl *algo_inst_hndl );

/*=========================================================================
  FUNCTION:  sns_sam_mr_send_ind
  =========================================================================*/
/*!
  @brief Send an indication message through the message router.

  @param[io] msg_ptr: Message to send, as allocated by sns_smr_msg_alloc.
  @param[i] mr_clnt_id: Client ID as generated by SAM MR.
  @param[i] send_ind_during_suspend If this indication should be sent when
            processor is suspended.

  @return SNS_SUCCESS or error code.
*/
/*=======================================================================*/
sns_err_code_e sns_sam_mr_send_ind( void *msg_ptr, sns_sam_mr_conn_hndl mr_clnt_id, bool send_ind_during_suspend );

/*=========================================================================
  FUNCTION:  sns_sam_mr_handle_event
  =========================================================================*/
/*!
  @brief Handle additional signal-based events pertaining to message routing.

  @param[io] sigFlags Bit array indicating signal received
*/
/*=======================================================================*/
void sns_sam_mr_handle_event( OS_FLAGS *sigFlags );

/*=========================================================================
  FUNCTION:  sns_sam_mr_confirm_client_req
  =========================================================================*/
/*!
  @brief Check if the msgHdrPtr is in response to the clientReqPtr.

  @return True if they are related.
*/
/*=======================================================================*/
bool sns_sam_mr_confirm_client_req( struct sns_sam_client_req* clientReqPtr,
    const sns_smr_header_s *msgHdrPtr, sns_sam_mr_conn_hndl mr_clnt_id);

/*=========================================================================
  FUNCTION:  sns_sam_mr_get_client_id
  =========================================================================*/
/*!
  @brief Convert a sns_sam_mr_conn_hndl type to an uint8_t.  The resultant
  ID is not guaranteed to be unique, as there can potentially be greater than
  256 clients (but a best effort will be made).

  @return Integer value idendtifying mr_clnt_id.
*/
/*=======================================================================*/
uint8_t sns_sam_mr_get_client_id( sns_sam_mr_conn_hndl mr_clnt_id );

/*=========================================================================
  FUNCTION:  sns_sam_mr_delete_algo_inst
  =========================================================================*/
/*!
  @brief Clean-up and free SAM MR state associated with an algorithm instance.

  @param[i] algo_inst_hndl

  @return SNS_SUCCESS or error code.
*/
/*=======================================================================*/
sns_err_code_e sns_sam_mr_delete_algo_inst( sns_sam_mr_algo_conn_hndl *algo_inst_hndl );

/*=========================================================================
  FUNCTION:  sns_sam_mr_init_algo_inst
  =========================================================================*/
/*!
  @brief Allocate and initialize the SAM MR state associated with an
  algorithm instance.

  @param[o] algo_inst_hndl
  @param[i] svc_num Service ID associated with this algorithm instance.

  @return SNS_SUCCESS or error code.
*/
/*=======================================================================*/
sns_err_code_e sns_sam_mr_init_algo_inst( sns_sam_mr_algo_conn_hndl **algo_inst_hndl,
    uint8_t svc_num );

/*=========================================================================
  FUNCTION:  sns_sam_mr_qcsi_reg
  =========================================================================*/
/*!
  @brief Register algo service to qcsi

  @param[i] algoSvcId: algorithm service ID

  @return SNS_SUCCESS or error code.
*/
/*=======================================================================*/
sns_err_code_e sns_sam_mr_qcsi_reg( uint8_t algoSvcId );

#endif /*#ifndef SNS_SAM_MR_H*/
