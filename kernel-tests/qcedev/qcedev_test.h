/********************************************************************
QCEDEV driver tester.
---------------------------------------------------------------------
 Copyright (c) 2011-2014 Qualcomm Technologies, Inc.
 All Rights Reserved. Qualcomm Technologies Proprietary and Confidential.
----------------------------------------------------------------------
*********************************************************************/

#ifndef QCEDEV_TEST_H
#define QCEDEV_TEST_H

#if defined(QCEDEV_TARGET_MSM8960) || defined(QCEDEV_TARGET_MSM8974)\
	|| defined(QCEDEV_TARGET_MSM8226) || defined(QCEDEV_TARGET_MSM8610)\
	|| defined(QCEDEV_TARGET_APQ8084) || defined(QCEDEV_TARGET_MSM8916)\
	|| defined(QCEDEV_TARGET_MSM8994) || defined(QCEDEV_TARGET_MSM8909)

#define CRYPTO_CMAC_SUPPORT
#define CRYPTO_AES_XTS_SUPPORT
#define CRYPTO_HMAC_SUPPORT
#define CRYPTO_AES_192BIT_NOT_SUPPORTED
#endif

#include <sys/ioctl.h>
#include <sys/mman.h>
#include <fcntl.h>
#include <errno.h>
#include <stdint.h>
#include <stdlib.h>
#include <string.h>
#include <stddef.h>
#include <stdio.h>
#include <getopt.h>
#include <unistd.h>
#include <time.h>
#include <pthread.h>
#include <linux/qcedev.h>
#include <memory.h>

#ifndef ANDROID
#include <stdlib.h>
#endif

/*********************************************************************
**  CIPHER TEST KEYS IV AND TEST VECTORS
*********************************************************************/
static unsigned char  PlainText_90[] = {
	0xBA, 0xC1, 0xBE, 0xE2, 0x2E, 0x40, 0x9F, 0x96,
	0xE9, 0x3D, 0x7E, 0x11, 0x73, 0x93, 0x17, 0x2A,
	0x00, 0x01, 0x02, 0x03, 0x04, 0x05, 0x06, 0x07,
	0x08, 0x09, 0x0a, 0x0b, 0x0c, 0x0d, 0x0e, 0x0f,
	0x10, 0x11, 0x12, 0x13, 0x14, 0x15, 0x16, 0x17,
	0x18, 0x19, 0x1a, 0x1b, 0x1c, 0x1d, 0x1e, 0x1f,
	0x20, 0x21, 0x22, 0x23, 0x24, 0x25, 0x26, 0x27,
	0x28, 0x29, 0x2a, 0x2b, 0x2c, 0x2d, 0x2e, 0x2f,
	0x30, 0x31, 0x32, 0x33, 0x34, 0x35, 0x36, 0x37,
	0x38, 0x39, 0x3a, 0x3b, 0x3c, 0x3d, 0x3e, 0x3f,
	0x40, 0x41, 0x42, 0x43, 0x44, 0x45, 0x46, 0x47,
	0x48, 0x49, 0x4a, 0x4b, 0x4c, 0x4d, 0x4e, 0x4f,
	0x50, 0x51, 0x52, 0x53, 0x54, 0x55, 0x56, 0x57,
	0x58, 0x59, 0x5a, 0x5b, 0x5c, 0x5d, 0x5e, 0x5f,
	0x60, 0x61, 0x62, 0x63, 0x64, 0x65, 0x66, 0x67,
	0x68, 0x69, 0x6a, 0x6b, 0x6c, 0x6d, 0x6e, 0x6f,
	0x70, 0x71, 0x72, 0x73, 0x74, 0x75, 0x76, 0x77,
	0x78, 0x79, 0x7a, 0x7b, 0x7c, 0x7d, 0x7e, 0x7f,
};

static unsigned char  PlainText_10[]  = {
	0xf3, 0x44, 0x81, 0xec, 0x3c, 0xc6, 0x27, 0xba,
	0xcd, 0x5d, 0xc3, 0xfb, 0x08, 0xf2, 0x73, 0xe6
};


static unsigned char  PlainText_60[] = {
	0x00, 0x01, 0x02, 0x03, 0x04, 0x05, 0x06, 0x07,
	0x08, 0x09, 0x0a, 0x0b, 0x0c, 0x0d, 0x0e, 0x0f,
	0x10, 0x11, 0x12, 0x13, 0x14, 0x15, 0x16, 0x17,
	0x18, 0x19, 0x1a, 0x1b, 0x1c, 0x1d, 0x1e, 0x1f,
	0xBA, 0xC1, 0xBE, 0xE2, 0x2E, 0x40, 0x9F, 0x96,
	0xE9, 0x3D, 0x7E, 0x11, 0x73, 0x93, 0x17, 0x2A,
	0x20, 0x21, 0x22, 0x23, 0x24, 0x25, 0x26, 0x27,
	0x28, 0x29, 0x2a, 0x2b, 0x2c, 0x2d, 0x2e, 0x2f,
	0x30, 0x31, 0x32, 0x33, 0x34, 0x35, 0x36, 0x37,
	0x38, 0x39, 0x3a, 0x3b, 0x3c, 0x3d, 0x3e, 0x3f,
	0x40, 0x41, 0x42, 0x43, 0x44, 0x45, 0x46, 0x47,
	0x48, 0x49, 0x4a, 0x4b, 0x4c, 0x4d, 0x4e, 0x4f,
};

static unsigned char key[64]  = {
	0x10, 0xa5, 0x88, 0x69, 0xd7, 0x4b, 0xe5, 0xa3,
	0x74, 0xcf, 0x86, 0x7c, 0xfb, 0x47, 0x38, 0x59,
	0x2B, 0x7E, 0x15, 0x16, 0x28, 0xAE, 0xD2, 0xA6,
	0xAB, 0xF7, 0x15, 0x88, 0x09, 0xCF, 0x4F, 0x3C,
	0x10, 0xa5, 0x88, 0x69, 0xd7, 0x4b, 0xe5, 0xa3,
	0x74, 0xcf, 0x86, 0x7c, 0xfb, 0x47, 0x38, 0x59,
	0x2B, 0x7E, 0x15, 0x16, 0x28, 0xAE, 0xD2, 0xA6,
	0xAB, 0xF7, 0x15, 0x88, 0x09, 0xCF, 0x4F, 0x3C,
};

static unsigned char iv[16] = {
	0x00, 0x01, 0x02, 0x03, 0x04, 0x05, 0x06, 0x07,
	0xe8, 0xf9, 0xa1, 0xbc, 0x1c, 0xcd, 0x4e, 0xf4,
};

unsigned char vbuf_src[0x1000];
unsigned char vbuf_dst[0x1000];

/*********************************************************************
**  CIPHER TEST VECTORS.
*********************************************************************/

struct test_vector {
	/* only used with keyed hash algorithms */
	char *key;
	unsigned char klen;
	char *iv;
	unsigned char ivlen;
	char *input;
	unsigned char ilen;
	char *result;
	unsigned char rlen;
	char *digest;
	unsigned char diglen;
	enum qcedev_cipher_alg_enum c_alg;
	enum qcedev_cipher_mode_enum mode;
	enum qcedev_sha_alg_enum hash_alg;
};
/*********************************************************************
**  AES TEST VECTORS
*********************************************************************/

static struct test_vector cipher_aes_tv[] = {
{ /* TEST VECTOR 1  AES-128 ECB: NIST SP800-38A */
		.c_alg	= QCEDEV_ALG_AES,
		.mode	= QCEDEV_AES_MODE_ECB,
		.key    = "\x2b\x7e\x15\x16\x28\xae\xd2\xa6"
			  "\xab\xf7\x15\x88\x09\xcf\x4f\x3c",
		.klen   = 16,
		.ivlen	= 0,
		.input	= "\x6b\xc1\xbe\xe2\x2e\x40\x9f\x96"
			  "\xe9\x3d\x7e\x11\x73\x93\x17\x2a"
			  "\xae\x2d\x8a\x57\x1e\x03\xac\x9c"
			  "\x9e\xb7\x6f\xac\x45\xaf\x8e\x51"
			  "\x30\xc8\x1c\x46\xa3\x5c\xe4\x11"
			  "\xe5\xfb\xc1\x19\x1a\x0a\x52\xef"
			  "\xf6\x9f\x24\x45\xdf\x4f\x9b\x17"
			  "\xad\x2b\x41\x7b\xe6\x6c\x37\x10",
		.ilen	= 64,
		.result = "\x3a\xd7\x7b\xb4\x0d\x7a\x36\x60"
			  "\xa8\x9e\xca\xf3\x24\x66\xef\x97"
			  "\xf5\xd3\xd5\x85\x03\xb9\x69\x9d"
			  "\xe7\x85\x89\x5a\x96\xfd\xba\xaf"
			  "\x43\xb1\xcd\x7f\x59\x8e\xce\x23"
			  "\x88\x1b\x00\xe3\xed\x03\x06\x88"
			  "\x7b\x0c\x78\x5e\x27\xe8\xad\x3f"
			  "\x82\x23\x20\x71\x04\x72\x5d\xd4",
		.rlen   = 64,
#ifndef CRYPTO_AES_192BIT_NOT_SUPPORTED
	}, { /* TEST VECTOR 2 AES-192 ECB: NIST SP800-38A */
		.c_alg	= QCEDEV_ALG_AES,
		.mode	= QCEDEV_AES_MODE_ECB,
		.key	= "\x8e\x73\xb0\xf7\xda\x0e\x64\x52"
			  "\xc8\x10\xf3\x2b\x80\x90\x79\xe5"
			  "\x62\xf8\xea\xd2\x52\x2c\x6b\x7b",
		.klen	= 24,
		.ivlen	= 0,
		.input	= "\x6b\xc1\xbe\xe2\x2e\x40\x9f\x96"
			  "\xe9\x3d\x7e\x11\x73\x93\x17\x2a"
			  "\xae\x2d\x8a\x57\x1e\x03\xac\x9c"
			  "\x9e\xb7\x6f\xac\x45\xaf\x8e\x51"
			  "\x30\xc8\x1c\x46\xa3\x5c\xe4\x11"
			  "\xe5\xfb\xc1\x19\x1a\x0a\x52\xef"
			  "\xf6\x9f\x24\x45\xdf\x4f\x9b\x17"
			  "\xad\x2b\x41\x7b\xe6\x6c\x37\x10",
		.ilen	= 64,
		.result	= "\xbd\x33\x4f\x1d\x6e\x45\xf2\x5f"
			  "\xf7\x12\xa2\x14\x57\x1f\xa5\xcc"
			  "\x97\x41\x04\x84\x6d\x0a\xd3\xad"
			  "\x77\x34\xec\xb3\xec\xee\x4e\xef"
			  "\xef\x7a\xfd\x22\x70\xe2\xe6\x0a"
			  "\xdc\xe0\xba\x2f\xac\xe6\x44\x4e"
			  "\x9a\x4b\x41\xba\x73\x8d\x6c\x72"
			  "\xfb\x16\x69\x16\x03\xc1\x8e\x0e",
		.rlen	= 64,
#endif
	}, { /* TEST VECTOR 3 AES-256 ECB: NIST SP800-38A */
		.c_alg	= QCEDEV_ALG_AES,
		.mode	= QCEDEV_AES_MODE_ECB,
		.key	= "\x60\x3d\xeb\x10\x15\xca\x71\xbe"
			  "\x2b\x73\xae\xf0\x85\x7d\x77\x81"
			  "\x1f\x35\x2c\x07\x3b\x61\x08\xd7"
			  "\x2d\x98\x10\xa3\x09\x14\xdf\xf4",
		.klen	= 32,
		.ivlen	= 0,
		.input	= "\x6b\xc1\xbe\xe2\x2e\x40\x9f\x96"
			  "\xe9\x3d\x7e\x11\x73\x93\x17\x2a"
			  "\xae\x2d\x8a\x57\x1e\x03\xac\x9c"
			  "\x9e\xb7\x6f\xac\x45\xaf\x8e\x51"
			  "\x30\xc8\x1c\x46\xa3\x5c\xe4\x11"
			  "\xe5\xfb\xc1\x19\x1a\x0a\x52\xef"
			  "\xf6\x9f\x24\x45\xdf\x4f\x9b\x17"
			  "\xad\x2b\x41\x7b\xe6\x6c\x37\x10",
		.ilen	= 64,
		.result	= "\xf3\xee\xd1\xbd\xb5\xd2\xa0\x3c"
			  "\x06\x4b\x5a\x7e\x3d\xb1\x81\xf8"
			  "\x59\x1c\xcb\x10\xd4\x10\xed\x26"
			  "\xdc\x5b\xa7\x4a\x31\x36\x28\x70"
			  "\xb6\xed\x21\xb9\x9c\xa6\xf4\xf9"
			  "\xf1\x53\xe7\xb1\xbe\xaf\xed\x1d"
			  "\x23\x30\x4b\x7a\x39\xf9\xf3\xff"
			  "\x06\x7d\x8d\x8f\x9e\x24\xec\xc7",
		.rlen	= 64,
	}, { /* TEST VECTOR 4 AES-128 CBC: RFC 3602 */
		.c_alg	= QCEDEV_ALG_AES,
		.mode	= QCEDEV_AES_MODE_CBC,
		.key    = "\x06\xa9\x21\x40\x36\xb8\xa1\x5b"
			  "\x51\x2e\x03\xd5\x34\x12\x00\x06",
		.klen   = 16,
		.iv	= "\x3d\xaf\xba\x42\x9d\x9e\xb4\x30"
			  "\xb4\x22\xda\x80\x2c\x9f\xac\x41",
		.ivlen	= 16,
		.input	= "Single block msg",
		.ilen   = 16,
		.result = "\xe3\x53\x77\x9c\x10\x79\xae\xb8"
			  "\x27\x08\x94\x2d\xbe\x77\x18\x1a",
		.rlen   = 16,
	}, { /* TEST VECTOR 5 AES-128 CBC: RFC 3602*/
		.c_alg	= QCEDEV_ALG_AES,
		.mode	= QCEDEV_AES_MODE_CBC,
		.key    = "\xc2\x86\x69\x6d\x88\x7c\x9a\xa0"
			  "\x61\x1b\xbb\x3e\x20\x25\xa4\x5a",
		.klen   = 16,
		.iv     = "\x56\x2e\x17\x99\x6d\x09\x3d\x28"
			  "\xdd\xb3\xba\x69\x5a\x2e\x6f\x58",
		.ivlen	= 16,
		.input  = "\x00\x01\x02\x03\x04\x05\x06\x07"
			  "\x08\x09\x0a\x0b\x0c\x0d\x0e\x0f"
			  "\x10\x11\x12\x13\x14\x15\x16\x17"
			  "\x18\x19\x1a\x1b\x1c\x1d\x1e\x1f",
		.ilen   = 32,
		.result = "\xd2\x96\xcd\x94\xc2\xcc\xcf\x8a"
			  "\x3a\x86\x30\x28\xb5\xe1\xdc\x0a"
			  "\x75\x86\x60\x2d\x25\x3c\xff\xf9"
			  "\x1b\x82\x66\xbe\xa6\xd6\x1a\xb1",
		.rlen   = 32,
	}, { /* TEST VECTOR 6 AES-128 CBC: NIST SP800-38A */
		.c_alg	= QCEDEV_ALG_AES,
		.mode	= QCEDEV_AES_MODE_CBC,
		.key    = "\x2b\x7e\x15\x16\x28\xae\xd2\xa6"
			  "\xab\xf7\x15\x88\x09\xcf\x4f\x3c",
		.klen   = 16,
		.iv     = "\x00\x01\x02\x03\x04\x05\x06\x07"
			  "\x08\x09\x0a\x0b\x0c\x0d\x0e\x0f",
		.ivlen	= 16,
		.input  = "\x6b\xc1\xbe\xe2\x2e\x40\x9f\x96"
			  "\xe9\x3d\x7e\x11\x73\x93\x17\x2a",
		.ilen   = 16,
		.result = "\x76\x49\xab\xac\x81\x19\xb2\x46"
			  "\xce\xe9\x8e\x9b\x12\xe9\x19\x7d",
		.rlen   = 16,
	}, { /* TEST VECTOR 7 AES-128 CBC: NIST SP800-38A */
		.c_alg	= QCEDEV_ALG_AES,
		.mode	= QCEDEV_AES_MODE_CBC,
		.key    = "\x2b\x7e\x15\x16\x28\xae\xd2\xa6"
			  "\xab\xf7\x15\x88\x09\xcf\x4f\x3c",
		.klen   = 16,
		.iv     = "\x00\x01\x02\x03\x04\x05\x06\x07"
			  "\x08\x09\x0a\x0b\x0c\x0d\x0e\x0f",
		.ivlen	= 16,
		.input  = "\x6b\xc1\xbe\xe2\x2e\x40\x9f\x96"
			  "\xe9\x3d\x7e\x11\x73\x93\x17\x2a"
			  "\xae\x2d\x8a\x57\x1e\x03\xac\x9c"
			  "\x9e\xb7\x6f\xac\x45\xaf\x8e\x51",
		.ilen   = 32,
		.result = "\x76\x49\xab\xac\x81\x19\xb2\x46"
			  "\xce\xe9\x8e\x9b\x12\xe9\x19\x7d"
			  "\x50\x86\xcb\x9b\x50\x72\x19\xee"
			  "\x95\xdb\x11\x3a\x91\x76\x78\xb2",
		.rlen   = 32,
#ifndef CRYPTO_AES_192BIT_NOT_SUPPORTED
	}, { /* TEST VECTOR 8 AES-192 CBC: NIST SP800-38A */
		.c_alg	= QCEDEV_ALG_AES,
		.mode	= QCEDEV_AES_MODE_CBC,
		.key	= "\x8e\x73\xb0\xf7\xda\x0e\x64\x52"
			  "\xc8\x10\xf3\x2b\x80\x90\x79\xe5"
			  "\x62\xf8\xea\xd2\x52\x2c\x6b\x7b",
		.klen	= 24,
		.iv	= "\x00\x01\x02\x03\x04\x05\x06\x07"
			  "\x08\x09\x0a\x0b\x0c\x0d\x0e\x0f",
		.ivlen	= 16,
		.input	= "\x6b\xc1\xbe\xe2\x2e\x40\x9f\x96"
			  "\xe9\x3d\x7e\x11\x73\x93\x17\x2a"
			  "\xae\x2d\x8a\x57\x1e\x03\xac\x9c"
			  "\x9e\xb7\x6f\xac\x45\xaf\x8e\x51"
			  "\x30\xc8\x1c\x46\xa3\x5c\xe4\x11"
			  "\xe5\xfb\xc1\x19\x1a\x0a\x52\xef"
			  "\xf6\x9f\x24\x45\xdf\x4f\x9b\x17"
			  "\xad\x2b\x41\x7b\xe6\x6c\x37\x10",
		.ilen	= 64,
		.result	= "\x4f\x02\x1d\xb2\x43\xbc\x63\x3d"
			  "\x71\x78\x18\x3a\x9f\xa0\x71\xe8"
			  "\xb4\xd9\xad\xa9\xad\x7d\xed\xf4"
			  "\xe5\xe7\x38\x76\x3f\x69\x14\x5a"
			  "\x57\x1b\x24\x20\x12\xfb\x7a\xe0"
			  "\x7f\xa9\xba\xac\x3d\xf1\x02\xe0"
			  "\x08\xb0\xe2\x79\x88\x59\x88\x81"
			  "\xd9\x20\xa9\xe6\x4f\x56\x15\xcd",
		.rlen	= 64,
#endif
	}, { /* TEST VECTOR 9 AES-256 CBC: NIST SP800-38A */
		.c_alg	= QCEDEV_ALG_AES,
		.mode	= QCEDEV_AES_MODE_CBC,
		.key	= "\x60\x3d\xeb\x10\x15\xca\x71\xbe"
			  "\x2b\x73\xae\xf0\x85\x7d\x77\x81"
			  "\x1f\x35\x2c\x07\x3b\x61\x08\xd7"
			  "\x2d\x98\x10\xa3\x09\x14\xdf\xf4",
		.klen	= 32,
		.iv	= "\x00\x01\x02\x03\x04\x05\x06\x07"
			  "\x08\x09\x0a\x0b\x0c\x0d\x0e\x0f",
		.ivlen	= 16,
		.input	= "\x6b\xc1\xbe\xe2\x2e\x40\x9f\x96"
			  "\xe9\x3d\x7e\x11\x73\x93\x17\x2a"
			  "\xae\x2d\x8a\x57\x1e\x03\xac\x9c"
			  "\x9e\xb7\x6f\xac\x45\xaf\x8e\x51"
			  "\x30\xc8\x1c\x46\xa3\x5c\xe4\x11"
			  "\xe5\xfb\xc1\x19\x1a\x0a\x52\xef"
			  "\xf6\x9f\x24\x45\xdf\x4f\x9b\x17"
			  "\xad\x2b\x41\x7b\xe6\x6c\x37\x10",
		.ilen	= 64,
		.result	= "\xf5\x8c\x4c\x04\xd6\xe5\xf1\xba"
			  "\x77\x9e\xab\xfb\x5f\x7b\xfb\xd6"
			  "\x9c\xfc\x4e\x96\x7e\xdb\x80\x8d"
			  "\x67\x9f\x77\x7b\xc6\x70\x2c\x7d"
			  "\x39\xf2\x33\x69\xa9\xd9\xba\xcf"
			  "\xa5\x30\xe2\x63\x04\x23\x14\x61"
			  "\xb2\xeb\x05\xe2\xc3\x9b\xe9\xfc"
			  "\xda\x6c\x19\x07\x8c\x6a\x9d\x1b",
		.rlen	= 64,
	}, { /* TEST VECTOR 10 AES-128 CTR: NIST SP800-38A */
		.c_alg	= QCEDEV_ALG_AES,
		.mode	= QCEDEV_AES_MODE_CTR,
		.key	= "\x2b\x7e\x15\x16\x28\xae\xd2\xa6"
			  "\xab\xf7\x15\x88\x09\xcf\x4f\x3c",
		.klen	= 16,
		.iv	= "\xf0\xf1\xf2\xf3\xf4\xf5\xf6\xf7"
			  "\xf8\xf9\xfa\xfb\xfc\xfd\xfe\xff",
		.ivlen	= 16,
		.input	= "\x6b\xc1\xbe\xe2\x2e\x40\x9f\x96"
			  "\xe9\x3d\x7e\x11\x73\x93\x17\x2a"
			  "\xae\x2d\x8a\x57\x1e\x03\xac\x9c"
			  "\x9e\xb7\x6f\xac\x45\xaf\x8e\x51"
			  "\x30\xc8\x1c\x46\xa3\x5c\xe4\x11"
			  "\xe5\xfb\xc1\x19\x1a\x0a\x52\xef"
			  "\xf6\x9f\x24\x45\xdf\x4f\x9b\x17"
			  "\xad\x2b\x41\x7b\xe6\x6c\x37\x10",
		.ilen	= 64,
		.result	= "\x87\x4d\x61\x91\xb6\x20\xe3\x26"
			  "\x1b\xef\x68\x64\x99\x0d\xb6\xce"
			  "\x98\x06\xf6\x6b\x79\x70\xfd\xff"
			  "\x86\x17\x18\x7b\xb9\xff\xfd\xff"
			  "\x5a\xe4\xdf\x3e\xdb\xd5\xd3\x5e"
			  "\x5b\x4f\x09\x02\x0d\xb0\x3e\xab"
			  "\x1e\x03\x1d\xda\x2f\xbe\x03\xd1"
			  "\x79\x21\x70\xa0\xf3\x00\x9c\xee",
		.rlen	= 64,
#ifndef CRYPTO_AES_192BIT_NOT_SUPPORTED
	}, { /* TEST VECTOR 11 AES-192 CTR: NIST SP800-38A */
		.c_alg	= QCEDEV_ALG_AES,
		.mode	= QCEDEV_AES_MODE_CTR,
		.key	= "\x8e\x73\xb0\xf7\xda\x0e\x64\x52"
			  "\xc8\x10\xf3\x2b\x80\x90\x79\xe5"
			  "\x62\xf8\xea\xd2\x52\x2c\x6b\x7b",
		.klen	= 24,
		.iv	= "\xf0\xf1\xf2\xf3\xf4\xf5\xf6\xf7"
			  "\xf8\xf9\xfa\xfb\xfc\xfd\xfe\xff",
		.ivlen	= 16,
		.input	= "\x6b\xc1\xbe\xe2\x2e\x40\x9f\x96"
			  "\xe9\x3d\x7e\x11\x73\x93\x17\x2a"
			  "\xae\x2d\x8a\x57\x1e\x03\xac\x9c"
			  "\x9e\xb7\x6f\xac\x45\xaf\x8e\x51"
			  "\x30\xc8\x1c\x46\xa3\x5c\xe4\x11"
			  "\xe5\xfb\xc1\x19\x1a\x0a\x52\xef"
			  "\xf6\x9f\x24\x45\xdf\x4f\x9b\x17"
			  "\xad\x2b\x41\x7b\xe6\x6c\x37\x10",
		.ilen	= 64,
		.result	= "\x1a\xbc\x93\x24\x17\x52\x1c\xa2"
			  "\x4f\x2b\x04\x59\xfe\x7e\x6e\x0b"
			  "\x09\x03\x39\xec\x0a\xa6\xfa\xef"
			  "\xd5\xcc\xc2\xc6\xf4\xce\x8e\x94"
			  "\x1e\x36\xb2\x6b\xd1\xeb\xc6\x70"
			  "\xd1\xbd\x1d\x66\x56\x20\xab\xf7"
			  "\x4f\x78\xa7\xf6\xd2\x98\x09\x58"
			  "\x5a\x97\xda\xec\x58\xc6\xb0\x50",
		.rlen	= 64,
#endif
	}, { /* TEST VECTOR 12 AES-256 CTR: NIST SP800-38A */
		.c_alg	= QCEDEV_ALG_AES,
		.mode	= QCEDEV_AES_MODE_CTR,
		.key	= "\x60\x3d\xeb\x10\x15\xca\x71\xbe"
			  "\x2b\x73\xae\xf0\x85\x7d\x77\x81"
			  "\x1f\x35\x2c\x07\x3b\x61\x08\xd7"
			  "\x2d\x98\x10\xa3\x09\x14\xdf\xf4",
		.klen	= 32,
		.iv	= "\xf0\xf1\xf2\xf3\xf4\xf5\xf6\xf7"
			  "\xf8\xf9\xfa\xfb\xfc\xfd\xfe\xff",
		.ivlen	= 16,
		.input	= "\x6b\xc1\xbe\xe2\x2e\x40\x9f\x96"
			  "\xe9\x3d\x7e\x11\x73\x93\x17\x2a"
			  "\xae\x2d\x8a\x57\x1e\x03\xac\x9c"
			  "\x9e\xb7\x6f\xac\x45\xaf\x8e\x51"
			  "\x30\xc8\x1c\x46\xa3\x5c\xe4\x11"
			  "\xe5\xfb\xc1\x19\x1a\x0a\x52\xef"
			  "\xf6\x9f\x24\x45\xdf\x4f\x9b\x17"
			  "\xad\x2b\x41\x7b\xe6\x6c\x37\x10",
		.ilen	= 64,
		.result	= "\x60\x1e\xc3\x13\x77\x57\x89\xa5"
			  "\xb7\xa7\xf5\x04\xbb\xf3\xd2\x28"
			  "\xf4\x43\xe3\xca\x4d\x62\xb5\x9a"
			  "\xca\x84\xe9\x90\xca\xca\xf5\xc5"
			  "\x2b\x09\x30\xda\xa2\x3d\xe9\x4c"
			  "\xe8\x70\x17\xba\x2d\x84\x98\x8d"
			  "\xdf\xc9\xc5\x8d\xb6\x7a\xad\xa6"
			  "\x13\xc2\xdd\x08\x45\x79\x41\xa6",
		.rlen	= 64,
	},
};

/*********************************************************************
**  DES TEST VECTORS
*********************************************************************/

static struct test_vector cipher_des_tv[] = {
{ /* TEST VECTOR 13 DES CBC: NIST SP800-38A */
		.c_alg	= QCEDEV_ALG_DES,
		.mode	= QCEDEV_DES_MODE_CBC,
		.key	= "\x01\x23\x45\x67\x89\xab\xcd\xef",
		.klen	= 8,
		.iv	= "\xfe\xdc\xba\x98\x76\x54\x32\x10",
		.ivlen	= 8,
		.input	= "\x37\x36\x35\x34\x33\x32\x31\x20"
			  "\x4e\x6f\x77\x20\x69\x73\x20\x74"
			  "\x68\x65\x20\x74\x69\x6d\x65\x20",
		.ilen	= 24,
		.result	= "\xcc\xd1\x73\xff\xab\x20\x39\xf4"
			  "\xac\xd8\xae\xfd\xdf\xd8\xa1\xeb"
			  "\x46\x8e\x91\x15\x78\x88\xba\x68",
		.rlen	= 24,
	}, { /* TEST VECTOR 14 FIPS Pub 81 */
		.c_alg	= QCEDEV_ALG_DES,
		.mode	= QCEDEV_DES_MODE_CBC,
		.key	= "\x01\x23\x45\x67\x89\xab\xcd\xef",
		.klen	= 8,
		.iv	= "\x12\x34\x56\x78\x90\xab\xcd\xef",
		.ivlen	= 8,
		.input	= "\x4e\x6f\x77\x20\x69\x73\x20\x74",
		.ilen	= 8,
		.result	= "\xe5\xc7\xcd\xde\x87\x2b\xf2\x7c",
		.rlen	= 8,
	}, { /* TEST VECTOR 15 FIPS Pub 81 */
		.c_alg	= QCEDEV_ALG_DES,
		.mode	= QCEDEV_DES_MODE_CBC,
		.key	= "\x01\x23\x45\x67\x89\xab\xcd\xef",
		.klen	= 8,
		.iv	= "\xe5\xc7\xcd\xde\x87\x2b\xf2\x7c",
		.ivlen	= 8,
		.input	= "\x68\x65\x20\x74\x69\x6d\x65\x20",
		.ilen	= 8,
		.result	= "\x43\xe9\x34\x00\x8c\x38\x9c\x0f",
		.rlen	= 8,
	}, { /* TEST VECTOR 16 FIPS Pub 81 */
		.c_alg	= QCEDEV_ALG_DES,
		.mode	= QCEDEV_DES_MODE_CBC,
		.key	= "\x01\x23\x45\x67\x89\xab\xcd\xef",
		.klen	= 8,
		.iv	= "\x43\xe9\x34\x00\x8c\x38\x9c\x0f",
		.ivlen	= 8,
		.input	= "\x66\x6f\x72\x20\x61\x6c\x6c\x20",
		.ilen	= 8,
		.result	= "\x68\x37\x88\x49\x9a\x7c\x05\xf6",
		.rlen	= 8,
	}, { /* TEST VECTOR 17 FIPS Pub 81 */
		.c_alg	= QCEDEV_ALG_DES,
		.mode	= QCEDEV_DES_MODE_CBC,
		.key	= "\x01\x23\x45\x67\x89\xab\xcd\xef",
		.klen	= 8,
		.iv	= "\xfe\xdc\xba\x98\x76\x54\x32\x10",
		.ivlen	= 8,
		.input	= "\x37\x36\x35\x34\x33\x32\x31\x20"
			  "\x4e\x6f\x77\x20\x69\x73\x20\x74"
			  "\x68\x65\x20\x74\x69\x6d\x65\x20",
		.ilen	= 24,
		.result	= "\xcc\xd1\x73\xff\xab\x20\x39\xf4"
			  "\xac\xd8\xae\xfd\xdf\xd8\xa1\xeb"
			  "\x46\x8e\x91\x15\x78\x88\xba\x68",
		.rlen	= 24,
	},
};


/*********************************************************************
**  CMAC TEST VECTORS
*********************************************************************/

static struct test_vector aes_cmac_tv[] = {
	{ /* TEST VECTOR 1 */
		.key	= "\x2b\x7e\x15\x16\x28\xae\xd2\xa6"
			  "\xab\xf7\x15\x88\x09\xcf\x4f\x3c",
		.input	= "\x6b\xc1\xbe\xe2\x2e\x40\x9f\x96"
			  "\xe9\x3d\x7e\x11\x73\x93\x17\x2a",
		.digest = "\x07\x0a\x16\xb4\x6b\x4d\x41\x44"
			  "\xf7\x9b\xdd\x9d\xd0\x4a\x28\x7c",
		.diglen	= 16,
		.ilen	= 16,
		.klen	= 16,
	}, { /* TEST VECTOR 2 */
		.key	= "\x2b\x7e\x15\x16\x28\xae\xd2\xa6"
			  "\xab\xf7\x15\x88\x09\xcf\x4f\x3c",
		.input =  "\x6b\xc1\xbe\xe2\x2e\x40\x9f\x96"
			  "\xe9\x3d\x7e\x11\x73\x93\x17\x2a"
			  "\xae\x2d\x8a\x57\x1e\x03\xac\x9c"
			  "\x9e\xb7\x6f\xac\x45\xaf\x8e\x51"
			  "\x30\xc8\x1c\x46\xa3\x5c\xe4\x11",
		.digest = "\xdf\xa6\x67\x47\xde\x9a\xe6\x30"
			  "\x30\xca\x32\x61\x14\x97\xc8\x27",
		.diglen	= 16,
		.ilen	= 40,
		.klen	= 16,
	}, { /* TEST VECTOR 3 */
		.key	= "\x2b\x7e\x15\x16\x28\xae\xd2\xa6"
			  "\xab\xf7\x15\x88\x09\xcf\x4f\x3c",
		.input = "\x6b\xc1\xbe\xe2\x2e\x40\x9f\x96"
			  "\xe9\x3d\x7e\x11\x73\x93\x17\x2a"
			  "\xae\x2d\x8a\x57\x1e\x03\xac\x9c"
			  "\x9e\xb7\x6f\xac\x45\xaf\x8e\x51"
			  "\x30\xc8\x1c\x46\xa3\x5c\xe4\x11"
			  "\xe5\xfb\xc1\x19\x1a\x0a\x52\xef"
			  "\xf6\x9f\x24\x45\xdf\x4f\x9b\x17"
			  "\xad\x2b\x41\x7b\xe6\x6c\x37\x10",
		.digest = "\x51\xf0\xbe\xbf\x7e\x3b\x9d\x92"
			  "\xfc\x49\x74\x17\x79\x36\x3c\xfe",
		.diglen	= 16,
		.ilen	= 64,
		.klen	= 16,
	}, { /* TEST VECTOR 4 */
		.key	= "\x60\x3d\xeb\x10\x15\xca\x71\xbe"
			  "\x2b\x73\xae\xf0\x85\x7d\x77\x81"
			  "\x1f\x35\x2c\x07\x3b\x61\x08\xd7"
			  "\x2d\x98\x10\xa3\x09\x14\xdf\xf4",
		.input	= "\x6b\xc1\xbe\xe2\x2e\x40\x9f\x96"
			  "\xe9\x3d\x7e\x11\x73\x93\x17\x2a",
		.digest	= "\x28\xa7\x02\x3f\x45\x2e\x8f\x82"
			  "\xbd\x4b\xf2\x8d\x8c\x37\xc3\x5c",
		.diglen	= 16,
		.ilen	= 16,
		.klen	= 32,
	}, { /* TEST VECTOR 5 */
		.key	= "\x60\x3d\xeb\x10\x15\xca\x71\xbe"
			  "\x2b\x73\xae\xf0\x85\x7d\x77\x81"
			  "\x1f\x35\x2c\x07\x3b\x61\x08\xd7"
			  "\x2d\x98\x10\xa3\x09\x14\xdf\xf4",
		.input	= "\x6b\xc1\xbe\xe2\x2e\x40\x9f\x96"
			  "\xe9\x3d\x7e\x11\x73\x93\x17\x2a"
			  "\xae\x2d\x8a\x57\x1e\x03\xac\x9c"
			  "\x9e\xb7\x6f\xac\x45\xaf\x8e\x51"
			  "\x30\xc8\x1c\x46\xa3\x5c\xe4\x11",
		.digest	= "\xaa\xf3\xd8\xf1\xde\x56\x40\xc2"
			  "\x32\xf5\xb1\x69\xb9\xc9\x11\xe6",
		.diglen	= 16,
		.ilen	= 40,
		.klen	= 32,
	}, { /* TEST VECTOR 6 */
		.key	= "\x60\x3d\xeb\x10\x15\xca\x71\xbe"
			  "\x2b\x73\xae\xf0\x85\x7d\x77\x81"
			  "\x1f\x35\x2c\x07\x3b\x61\x08\xd7"
			  "\x2d\x98\x10\xa3\x09\x14\xdf\xf4",
		.input	= "\x6b\xc1\xbe\xe2\x2e\x40\x9f\x96"
			  "\xe9\x3d\x7e\x11\x73\x93\x17\x2a"
			  "\xae\x2d\x8a\x57\x1e\x03\xac\x9c"
			  "\x9e\xb7\x6f\xac\x45\xaf\x8e\x51"
			  "\x30\xc8\x1c\x46\xa3\x5c\xe4\x11"
			  "\xe5\xfb\xc1\x19\x1a\x0a\x52\xef"
			  "\xf6\x9f\x24\x45\xdf\x4f\x9b\x17"
			  "\xad\x2b\x41\x7b\xe6\x6c\x37\x10",
		.digest	= "\xe1\x99\x21\x90\x54\x9f\x6e\xd5"
			  "\x69\x6a\x2c\x05\x6c\x31\x54\x10",
		.diglen	= 16,
		.ilen	= 64,
		.klen	= 32,
	},
};

/*********************************************************************
**  HMAC SHA1 TEST VECTORS
*********************************************************************/

static struct test_vector hmac_sha1_tv[] = {
/* http://csrc.nist.gov/publications/fips/fips198/fips-198a.pdf */
	{
		.key    = "\x0b\x0b\x0b\x0b\x0b\x0b\x0b\x0b\x0b\x0b"
				  "\x0b\x0b\x0b\x0b\x0b\x0b\x0b\x0b\x0b\x0b",
		.klen  = 20,
		.input = "Hi There",
		.ilen  = 8,
		.digest = "\xb6\x17\x31\x86\x55\x05\x72\x64"
			  "\xe2\x8b\xc0\xb6\xfb\x37\x8c\x8e\xf1"
			  "\x46\xbe",
		.diglen = 20,
	}, {
		.key    = "\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa"
			  "\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa",
		.klen  = 20,
		.input = "\xdd\xdd\xdd\xdd\xdd\xdd\xdd\xdd\xdd\xdd\xdd\xdd"
			 "\xdd\xdd\xdd\xdd\xdd\xdd\xdd\xdd\xdd\xdd\xdd\xdd\xdd"
			 "\xdd\xdd\xdd\xdd\xdd\xdd\xdd\xdd\xdd\xdd\xdd\xdd\xdd"
			 "\xdd\xdd\xdd\xdd\xdd\xdd\xdd\xdd\xdd\xdd\xdd\xdd",
		.ilen  = 50,
		.digest = "\x12\x5d\x73\x42\xb9\xac\x11\xcd\x91\xa3"
			  "\x9a\xf4\x8a\xa1\x7b\x4f\x63\xf1\x75\xd3",
		.diglen = 20,
	}, {
		.key    = "\x01\x02\x03\x04\x05\x06\x07\x08"
			  "\x09\x0a\x0b\x0c\x0d\x0e\x0f\x10"
			  "\x11\x12\x13\x14\x15\x16\x17\x18\x19",
		.klen  = 25,
		.input = "\xcd\xcd\xcd\xcd\xcd\xcd\xcd\xcd\xcd\xcd\xcd\xcd"
			 "\xcd\xcd\xcd\xcd\xcd\xcd\xcd\xcd\xcd\xcd\xcd\xcd\xcd"
			 "\xcd\xcd\xcd\xcd\xcd\xcd\xcd\xcd\xcd\xcd\xcd\xcd\xcd"
			 "\xcd\xcd\xcd\xcd\xcd\xcd\xcd\xcd\xcd\xcd\xcd\xcd",
		.ilen  = 50,
		.digest = "\x4c\x90\x07\xf4\x02\x62\x50\xc6\xbc\x84"
			 "\x14\xf9\xbf\x50\xc8\x6c\x2d\x72\x35\xda",
		.diglen = 20,
	}, {
		.key = "\x00\x01\x02\x03\x04\x05\x06\x07\x08\x09\x0a\x0b\x0c"
			"\x0d\x0e\x0f\x10\x11\x12\x13\x14\x15\x16\x17\x18\x19"
			"\x1a\x1b\x1c\x1d\x1e\x1f\x20\x21\x22\x23\x24\x25\x26"
			"\x27\x28\x29\x2a\x2b\x2c\x2d\x2e\x2f\x30\x31\x32\x33"
			"\x34\x35\x36\x37\x38\x39\x3a\x3b\x3c\x3d\x3e\x3f",
		.klen  = 64,
		.input = "Sample #1",
		.ilen  = 9,
		.digest = "\x4f\x4c\xa3\xd5\xd6\x8b\xa7\xcc\x0a\x12\x08\xc9\xc6"
			  "\x1e\x9c\x5d\xa0\x40\x3c\x0a",
		.diglen = 20,
	}, {
		.key = "\x50\x51\x52\x53\x54\x55\x56\x57\x58\x59\x5a\x5b\x5c"
			"\x5d\x5e\x5f\x60\x61\x62\x63\x64\x65\x66\x67\x68\x69"
			"\x6a\x6b\x6c\x6d\x6e\x6f\x70\x71\x72\x73\x74\x75\x76"
			"\x77\x78\x79\x7a\x7b\x7c\x7d\x7e\x7f\x80\x81\x82\x83"
			"\x84\x85\x86\x87\x88\x89\x8a\x8b\x8c\x8d\x8e\x8f\x90"
			"\x91\x92\x93\x94\x95\x96\x97\x98\x99\x9a\x9b\x9c\x9d"
			"\x9e\x9f\xa0\xa1\xa2\xa3\xa4\xa5\xa6\xa7\xa8\xa9\xaa"
			"\xab\xac\xad\xae\xaf\xb0\xb1\xb2\xb3",
		.klen  = 100,
		.input = "Sample #3",
		.ilen  = 9,
		.digest = "\xbc\xf4\x1e\xab\x8b\xb2\xd8\x02\xf3\xd0\x5c\xaf\x7c"
			  "\xb0\x92\xec\xf8\xd1\xa3\xaa",
		.diglen = 20,
	}, {
		.key   = "\x70\x71\x72\x73\x74\x75\x76\x77\x78\x79\x7a\x7b\x7c"
			 "\x7d\x7e\x7f\x80\x81\x82\x83\x84\x85\x86\x87\x88\x89"
			 "\x8a\x8b\x8c\x8d\x8e\x8f\x90\x91\x92\x93\x94\x95\x96"
			 "\x97\x98\x99\x9a\x9b\x9c\x9d\x9e\x9f\xa0",
		.klen  = 49,
		.input = "Sample #4",
		.ilen  = 9,
		.digest = "\x9e\xa8\x86\xef\xe2\x68\xdb\xec\xce\x42\x0c\x75",
		.diglen = 12,
	}
};

/*********************************************************************
**  HMAC SHA256 TEST VECTORS
** http://csrc.nist.gov/groups/ST/toolkit/documents/Examples/HMAC_SHA256.pdf
*********************************************************************/
static struct test_vector hmac_sha256_tv[] = {
	{ /* TEST VECTOR 1 */
		.key	= "\x00\x01\x02\x03\x04\x05\x06\x07\x08\x09"
			  "\x0A\x0B\x0C\x0D\x0E\x0F\x10\x11\x12\x13"
			  "\x14\x15\x16\x17\x18\x19\x1A\x1B\x1C\x1D"
			  "\x1E\x1F\x20\x21\x22\x23\x24\x25\x26\x27"
			  "\x28\x29\x2A\x2B\x2C\x2D\x2E\x2F\x30\x31"
			  "\x32\x33\x34\x35\x36\x37\x38\x39\x3A\x3B"
			  "\x3C\x3D\x3E\x3F",
		.input	= "Sample message for keylen=blocklen",
		.digest = "\x8B\xB9\xA1\xDB\x98\x06\xF2\x0D\xF7\xF7"
			  "\x7B\x82\x13\x8C\x79\x14\xD1\x74\xD5\x9E"
			  "\x13\xDC\x4D\x01\x69\xC9\x05\x7B\x13\x3E"
			  "\x1D\x62",
		.diglen	= 32,
		.ilen	= 34,
		.klen	= 64,
	},  { /*{  TEST VECTOR 2 */
		.key	= "\x00\x01\x02\x03\x04\x05\x06\x07\x08\x09"
			  "\x0A\x0B\x0C\x0D\x0E\x0F\x10\x11\x12\x13"
			  "\x14\x15\x16\x17\x18\x19\x1A\x1B\x1C\x1D"
			  "\x1E\x1F",
		.input	= "Sample message for keylen<blocklen",
		.digest = "\xA2\x8C\xF4\x31\x30\xEE\x69\x6A\x98\xF1"
			  "\x4A\x37\x67\x8B\x56\xBC\xFC\xBD\xD9\xE5"
			  "\xCF\x69\x71\x7F\xEC\xF5\x48\x0F\x0E\xBD"
			  "\xF7\x90",
		.diglen	= 32,
		.ilen	= 34,
		.klen	= 32,
	},  { /* TEST VECTOR 3 */
		.key	= "\x00\x01\x02\x03\x04\x05\x06\x07\x08\x09"
			  "\x0A\x0B\x0C\x0D\x0E\x0F\x10\x11\x12\x13"
			  "\x14\x15\x16\x17\x18\x19\x1A\x1B\x1C\x1D"
			  "\x1E\x1F\x20\x21\x22\x23\x24\x25\x26\x27"
			  "\x28\x29\x2A\x2B\x2C\x2D\x2E\x2F\x30\x31"
			  "\x32\x33\x34\x35\x36\x37\x38\x39\x3A\x3B"
			  "\x3C\x3D\x3E\x3F\x40\x41\x42\x43\x44\x45"
			  "\x46\x47\x48\x49\x4A\x4B\x4C\x4D\x4E\x4F"
			  "\x50\x51\x52\x53\x54\x55\x56\x57\x58\x59"
			  "\x5A\x5B\x5C\x5D\x5E\x5F\x60\x61\x62\x63",
		.input	= "Sample message for keylen=blocklen",
		.digest = "\xBD\xCC\xB6\xC7\x2D\xDE\xAD\xB5\x00\xAE"
			  "\x76\x83\x86\xCB\x38\xCC\x41\xC6\x3D\xBB"
			  "\x08\x78\xDD\xB9\xC7\xA3\x8A\x43\x1B\x78"
			  "\x37\x8D",
		.diglen	= 32,
		.ilen	= 34,
		.klen	= 100,
	},  { /* TEST VECTOR 4 */
		.key	= "\x00\x01\x02\x03\x04\x05\x06\x07\x08\x09"
			  "\x0a\x0b\x0c\x0d\x0e\x0f\x10\x11\x12\x13"
			  "\x14\x15\x16\x17\x18\x19\x1a\x1b\x1c\x1d"
			  "\x1e\x1f\x20\x21\x22\x23\x24\x25\x26\x27"
			  "\x28\x29\x2a\x2b\x2c\x2d\x2e\x2f\x30",
		.input	= "Sample message for keylen<blocklen,"
			  " with truncated tag",
		.digest = "\x27\xA8\xB1\x57\x83\x9E\xFE\xAC\x98\xDF"
			  "\x07\x0B\x33\x1D\x59\x36",
		.diglen	= 16,
		.ilen	= 54,
		.klen	= 49,
	},
};

/*********************************************************************
**  SHA1 TEST VECTORS
*********************************************************************/
static struct test_vector sha1_tv[] = {
	{ /* TEST VECTOR 1 */
		.input	= "abc",
		.ilen	= 3,
		.digest	= "\xa9\x99\x3e\x36\x47\x06\x81\x6a"
			  "\xba\x3e\x25\x71\x78\x50\xc2\x6c"
			  "\x9c\xd0\xd8\x9d",
		.diglen	= 20,
	}, { /* TEST VECTOR 2 */
		.input	= "abcdbcdecdefdefgefghfghighijhijkij"
			  "kljklmklmnlmnomnopnopq",
		.ilen	= 56,
		.digest	= "\x84\x98\x3e\x44\x1c\x3b\xd2\x6e"
			  "\xba\xae\x4a\xa1\xf9\x51\x29\xe5"
			  "\xe5\x46\x70\xf1",
		.diglen	= 20,
	}, { /* TEST VECTOR 3 */
		.input	= "Test vector from febooti.com",
		.digest = "\xa7\x63\x17\x95\xf6\xd5\x9c\xd6"
			  "\xd1\x4e\xbd\x00\x58\xa6\x39\x4a"
			  "\x4b\x93\xd8\x68",
		.ilen	= 28,
		.diglen	= 20,
	}, { /* TEST VECTOR 4 */
		.input	= "This is an example input buffer",
		.digest = "\x18\x21\xf2\xa5\x7c\x5a\x26\x8a"
			  "\x9f\xf2\x7c\x03\x8c\x6e\xb3\xf7"
			  "\x37\x55\x1b\x98",
		.ilen	= 31,
		.diglen	= 20,
	},
};

/*********************************************************************
**  SHA256 TEST VECTORS
*********************************************************************/
static struct test_vector sha256_tv[] = {
	{ /* TEST VECTOR 1 */
		.input	= "abc",
		.ilen	= 3,
		.digest	= "\xba\x78\x16\xbf\x8f\x01\xcf\xea"
			  "\x41\x41\x40\xde\x5d\xae\x22\x23"
			  "\xb0\x03\x61\xa3\x96\x17\x7a\x9c"
			  "\xb4\x10\xff\x61\xf2\x00\x15\xad",
		.diglen	= 32,
	}, { /* TEST VECTOR 2 */
		.input	= "abcdbcdecdefdefgefghfghighijhijkij"
			  "kljklmklmnlmnomnopnopq",
		.ilen	= 56,
		.digest	= "\x24\x8d\x6a\x61\xd2\x06\x38\xb8"
			  "\xe5\xc0\x26\x93\x0c\x3e\x60\x39"
			  "\xa3\x3c\xe4\x59\x64\xff\x21\x67"
			  "\xf6\xec\xed\xd4\x19\xdb\x06\xc1",
		.diglen	= 32,
	}, { /* TEST VECTOR 3 */
		.input	= "Test vector from febooti.com",
		.digest = "\x07\x7b\x18\xfe\x29\x03\x6a\xda"
			  "\x48\x90\xbd\xec\x19\x21\x86\xe1"
			  "\x06\x78\x59\x7a\x67\x88\x02\x90"
			  "\x52\x1d\xf7\x0d\xf4\xba\xc9\xab",
		.ilen	= 28,
		.diglen	= 32,
	},
};
#endif
