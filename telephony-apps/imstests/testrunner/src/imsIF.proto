/* Copyright (c) 2014 Qualcomm Technologies, Inc.  All Rights Reserved.
 * Qualcomm Technologies Proprietary and Confidential.
 */

/* IMS interface to Modem */

package ims;
option java_package = "com.qualcomm.qti.imstestrunner";
option java_outer_classname = "ImsQmiIF";

/*
IMS QMI byte stream will have the following contents
byte[0] Length of MsgTag
byte[1.. Length of MsgTag] MsgTag 11bytes
byte[Length of MsgTag+1 ..Length of Message] Message
*/

message MsgTag {
    required fixed32 token = 1; /*generated dynamically */
    required MsgType type = 2;
    required MsgId id = 3;
    required Error error = 4;
}

enum MsgType {
        UNKNOWN = 0;
        REQUEST = 1;
        RESPONSE = 2;
        UNSOL_RESPONSE = 3;
    }

enum MsgId {
    UNKNOWN_REQ = 0;

    /**
     * MsgType: REQUEST ,MsgId: REQUEST_IMS_REGISTRATION_STATE, Error:E_UNUSED ,
     *          Message: NULL
     *
     * MsgType: RESPONSE, MsgId: REQUEST_IMS_REGISTRATION_STATE, Error:Valid errors
     *          Message: message Registration
     *
     * Description:Request current IMS registration state
     *
     * Valid errors:
     *  E_SUCCESS
     *  E_RADIO_NOT_AVAILABLE
     *  E-GENERIC_FAILURE
     */
    REQUEST_IMS_REGISTRATION_STATE = 1;

    /**
     * MsgType: REQUEST ,MsgId: REQUEST_DIAL, Error:E_UNUSED ,
     *          Message: message Dial
     *
     * MsgType: RESPONSE, MsgId: REQUEST_DIAL, Error:Valid errors
     *          Message: is NULL
     *
     * Description: Initiate voice call
     *
     * This method is never used for supplementary service codes
     *
     * Valid errors:
     *  E_SUCCESS
     *  E_RADIO_NOT_AVAILABLE
     *  GENERIC_FAILURE
     */

    REQUEST_DIAL = 2;

    /**
     * REQUEST_ANSWER
     * MsgType: REQUEST
     *
     * Answer incoming call
     *
     * Will not be called for WAITING calls.
     * REQUEST_SWITCH_WAITING_OR_HOLDING_AND_ACTIVE will be used in this case
     * instead
     *
     * "data" is enum Calltype
     * "response" is NULL
     *
     * Valid errors:
     *  E_SUCCESS
     *  E_RADIO_NOT_AVAILABLE (radio resetting)
     *  E_GENERIC_FAILURE
     */
    REQUEST_ANSWER = 3;

    /**
     * REQUEST_HANGUP
     * MsgType: REQUEST
     *
     * Hang up a specific line (like AT+CHLD=1x)
     *
     * After this HANGUP request returns, connection will NOT
     * be active anymore in next REQUEST_GET_CURRENT_CALLS query.
     *
     * "data" is message Hangup
     *
     * "response" is NULL
     *
     * Valid errors:
     *  E_SUCCESS
     *  E_RADIO_NOT_AVAILABLE (radio resetting)
     *  E_GENERIC_FAILURE
     */
    REQUEST_HANGUP = 4;

    /**
     * REQUEST_LAST_CALL_FAIL_CAUSE
     * MsgType: REQUEST
     *
     * Requests the failure cause code for the most recently terminated call
     *
     * "data" is NULL
     * "response" is a "message CallFailCauseResponse"
     *
     * If the implementation does not have access to the exact cause codes,
     * then it should return one of the values listed in CallFailCause,
     * as the UI layer needs to distinguish these cases for tone generation or
     * error notification.
     *
     * Valid errors:
     *  E_SUCCESS
     *  E_RADIO_NOT_AVAILABLE
     *  E_GENERIC_FAILURE
     */

    REQUEST_LAST_CALL_FAIL_CAUSE = 5;

    /**
     * REQUEST_GET_CURRENT_CALLS
     * MsgType: REQUEST
     *
     * Requests current call list
     *
     * "data" is NULL
     *
     * "response" must be a "message CallList or null"
     *  null means no active calls in CallList
     *
     * Valid errors:
     *
     *  E_SUCCESS
     *  E_RADIO_NOT_AVAILABLE (radio resetting)
     *  E_GENERIC_FAILURE
     *      (request will be made again in a few hundred msec)
     */
    REQUEST_GET_CURRENT_CALLS = 6;

    /**
     * REQUEST_HANGUP_WAITING_OR_BACKGROUND
     *
     * Hang up waiting or held (like AT+CHLD=0)
     *
     * After this HANGUP request returns, the connection is NOT
     * active anymore in next REQUEST_GET_CURRENT_CALLS query.
     *
     * "data" is NULL
     * "response" is NULL
     *
     * Valid errors:
     *  E_SUCCESS
     *  E_RADIO_NOT_AVAILABLE (radio resetting)
     *  E_GENERIC_FAILURE
     */
    REQUEST_HANGUP_WAITING_OR_BACKGROUND = 7;
    REQUEST_HANGUP_FOREGROUND_RESUME_BACKGROUND = 8;

    /**
     * REQUEST_SWITCH_WAITING_OR_HOLDING_AND_ACTIVE
     * MsgType: REQUEST
     *
     * For switching calls. Also used for answering waiting call
     *
     * "data" is enum Calltype
     * "response" is NULL
     *
     * Valid errors:
     *  E_SUCCESS
     *  E_RADIO_NOT_AVAILABLE (radio resetting)
     *  E_GENERIC_FAILURE
     */
    REQUEST_SWITCH_WAITING_OR_HOLDING_AND_ACTIVE = 9;
    REQUEST_CONFERENCE = 10;

    REQUEST_EXIT_EMERGENCY_CALLBACK_MODE =11;
    REQUEST_EXPLICIT_CALL_TRANSFER = 12;

    REQUEST_DTMF = 13;
    REQUEST_DTMF_START = 14;
    REQUEST_DTMF_STOP = 15;
    REQUEST_UDUB = 16;

    REQUEST_MODIFY_CALL_INITIATE = 17;
    REQUEST_MODIFY_CALL_CONFIRM = 18;

    /**
     * REQUEST_QUERY_CALL_CLIP
     * MsgType: REQUEST
     *
     * Queries the status of the CLIP supplementary service
     *
     * (for MMI code "*#30#")
     * "data" is NULL
     * "response" is "message ClipProvisionStatus"
     *
     * Valid errors:
     *  SUCCESS
     *  RADIO_NOT_AVAILABLE (radio resetting)
     *  GENERIC_FAILURE
     */
    REQUEST_QUERY_CLIP = 19;

    /**
     * REQUEST_GET_CLIR
     * MsgType: REQUEST
     *
     * Gets current CLIR status
     *
     * "data" is NULL
     * "response" must be a "message Clir"
     *
     * Valid errors:
     *  SUCCESS
     *  RADIO_NOT_AVAILABLE
     *  GENERIC_FAILURE
     */
    REQUEST_GET_CLIR = 20;

    /**
     * REQUEST_SET_CLIR
     * MsgType: REQUEST
     *
     * Sets the Clir parameter
     *
     * "data" is "message Clir"
     * "response" is NULL
     *
     * Valid errors:
     *  SUCCESS
     *  RADIO_NOT_AVAILABLE
     *  GENERIC_FAILURE
     */
    REQUEST_SET_CLIR = 21;

    /**
     * REQUEST_QUERY_CALL_FORWARD_STATUS
     * MsgType: REQUEST
     *
     * Requests the call forward settings
     *
     * "data" must be a "message CallForwardInfoList"
     *
     * "response" must be a "message CallForwardInfoList or null"
     * "response" points to an array of CallForwardInfo, one for
     * each distinct registered phone number.
     *
     * For example, if data is forwarded to +18005551212 and voice is forwarded
     * to +18005559999, then two separate CallForwardInfo should be returned
     *
     * If, however, both data and voice are forwarded to +18005551212, then
     * a single CallForwardInfo can be returned with the service class
     * set to "data + voice = 3")
     *
     * Valid errors:
     *  SUCCESS
     *  RADIO_NOT_AVAILABLE
     *  GENERIC_FAILURE
     */
    REQUEST_QUERY_CALL_FORWARD_STATUS = 22;

    /**
     * REQUEST_SET_CALL_FORWARD_STATUS
     * MsgType: REQUEST
     *
     * Configure call forward rule
     *
     * "data" must be a "message CallForwardInfoList"
     *
     * "response" is of type "SuppSvcResponse"
     *
     * Valid errors:
     *  SUCCESS
     *  RADIO_NOT_AVAILABLE
     *  GENERIC_FAILURE
     */
    REQUEST_SET_CALL_FORWARD_STATUS = 23;

    /**
     * REQUEST_QUERY_CALL_WAITING
     * MsgType: REQUEST
     *
     * Query current call waiting state
     *
     * "data" must be a "message ServiceClass"
     *
     * "response" is a "message CallWaitingInfo"
     *
     * Valid errors:
     *  SUCCESS
     *  RADIO_NOT_AVAILABLE
     *  GENERIC_FAILURE
     */
    REQUEST_QUERY_CALL_WAITING = 24;

    /**
     * REQUEST_SET_CALL_WAITING
     * MsgType: REQUEST
     *
     * Configure current call waiting state
     *
     * "data" is "message CallWaitingInfo"
     * "response" is of type SuppSvcResponse
     *
     * Valid errors:
     *  SUCCESS
     *  RADIO_NOT_AVAILABLE
     *  GENERIC_FAILURE
     */
    REQUEST_SET_CALL_WAITING = 25;

    /**
     * MsgType: REQUEST ,MsgId: REQUEST_IMS_REG_STATE_CHANGE, Error:E_UNUSED ,
     *          Message: message Registration
     *                   enum REGISTERED - To register IMS
     *                   enum NOT_REGISTERED - To deregister IMS
     *
     * MsgType: RESPONSE, MsgId: REQUEST_IMS_REG_STATE_CHANGE, Error:Valid errors
     *          Message: NULL
     *
     * Description:Request current IMS Registration/Deregistration
     *
     * Valid errors:
     *  E_SUCCESS
     *  E_RADIO_NOT_AVAILABLE
     *  E-GENERIC_FAILURE
     */
    REQUEST_IMS_REG_STATE_CHANGE = 26;

    /**
     * REQUEST_SET_SUPP_SVC_NOTIFICATION
     * Enables/disables supplementary service related notifications
     * from the network.
     *
     * Notifications are reported via UNSOL_SUPP_SVC_NOTIFICATION.
     *
     * "data" is int *
     * ((int *)data)[0] is == 1 for notifications enabled
     * ((int *)data)[0] is == 0 for notifications disabled
     *
     * "response" is NULL
     *
     * Valid errors:
     *  E_SUCCESS
     *  E_RADIO_NOT_AVAILABLE
     *  E_GENERIC_FAILURE
     *
     * See also: UNSOL_SUPP_SVC_NOTIFICATION.
    */
    REQUEST_SET_SUPP_SVC_NOTIFICATION = 27;

    /**
     * REQUEST_ADD_PARTICIPANT
     * MsgType: Request
     * Request to add a participant to the existing conversation
     *
     * "data" is Message Dial
     *
     * "response" is NULL
     *
     * Valid errors:
     *  E_SUCCESS
     *
    */
    REQUEST_ADD_PARTICIPANT = 28;

    /**
     * REQUEST_QUERY_SERVICE_STATUS
     * MsgType: Request
     * Request to get the status of IMS Services
     *
     * "data" is null
     *
     * "response" is message SrvStatusList - all services must be specified in the response
     *
     * Valid errors:
     *  E_SUCCESS
     *
    */
    REQUEST_QUERY_SERVICE_STATUS = 29;

    /**
     * REQUEST_SET_SERVICE_STATUS
     * MsgType: Request
     * Request to set the status of an IMS Service
     *
     * "data" is message Info - this is a delta notification, services not listed in the
     * request must be left untouched
     *
     * "response" is null
     *
     * Valid errors:
     *  E_SUCCESS
     *
    */
    REQUEST_SET_SERVICE_STATUS = 30;

    /**
     * REQUEST_SUPP_SVC_STATUS
     * MsgType: Request
     * Request to activate/deactivate/query the supplementary service of an IMS Service
     * This is currently being used for Call Barring, CLIP, COLP
     *
     * "data" is message SuppSvcRequest
     * "response" is of type "SuppSvcResponse"
     *
     * Valid errors:
     *  SUCCESS
     *  RADIO_NOT_AVAILABLE (radio resetting)
     *  GENERIC_FAILURE
     *
    */
    REQUEST_SUPP_SVC_STATUS = 31;

    /**
    *
    * REQUEST_DEFLECT_CALL
    * MsgType: Request
    * Request to the deflect the call to specific number mentioned by user
    * "data" is message DeflectCall
    * "response" is - null
    *
    * Valid errors:
    * All enum Error type
    *
    */
    REQUEST_DEFLECT_CALL = 32;

    /**
     * REQUEST_GET_COLR
     * MsgType: REQUEST
     *
     * Gets current COLR status
     *
     * "data" is NULL
     * "response" is "message Colr"
     *
     * Valid errors:
     *  SUCCESS
     *  RADIO_NOT_AVAILABLE
     *  GENERIC_FAILURE
     */
    REQUEST_GET_COLR = 33;

    /**
     * REQUEST_SET_COLR
     * MsgType: REQUEST
     *
     * Sets the Colr parameter
     *
     * "data" is "message Colr"
     * "response" is NULL
     *
     * Valid errors:
     *  SUCCESS
     *  RADIO_NOT_AVAILABLE
     *  GENERIC_FAILURE
     */
    REQUEST_SET_COLR = 34;

    /**
     * REQUEST_QUERY_VT_CALL_QUALITY
     * MsgType: REQUEST
     *
     * Query current video call quality setting.
     *
     * "data" is null
     *
     * "response" is a "message VideoCallQuality"
     *
     * Valid errors:
     *  SUCCESS
     *  GENERIC_FAILURE
     */
    REQUEST_QUERY_VT_CALL_QUALITY  = 35;

    /**
     * REQUEST_SET_VT_CALL_QUALITY
     * MsgType: REQUEST
     *
     * Set setting(s)
     *
     * "data" must be a "message VideoCallQuality"
     *
     * "response" is null
     *
     * Valid errors:
     *  SUCCESS
     *  GENERIC_FAILURE
     */
    REQUEST_SET_VT_CALL_QUALITY = 36;

    /**
     * REQUEST_HOLD
     * MsgType: REQUEST
     *
     * Set setting(s)
     *
     * "data" must be a "int callId"
     *
     * "response" is null
     *
     * Valid errors:
     *  SUCCESS
     *  GENERIC_FAILURE
     */
    REQUEST_HOLD = 37;

    /**
     * REQUEST_RESUME
     * MsgType: REQUEST
     *
     * Set setting(s)
     *
     * "data" must be a "int callId"
     *
     * "response" is null
     *
     * Valid errors:
     *  SUCCESS
     *  GENERIC_FAILURE
     */
    REQUEST_RESUME = 38;

    UNSOL_RSP_BASE = 200;

    UNSOL_RESPONSE_CALL_STATE_CHANGED = 201;
    UNSOL_CALL_RING = 202;
    UNSOL_RINGBACK_TONE = 203;
    UNSOL_RESPONSE_IMS_NETWORK_STATE_CHANGED = 204;

    UNSOL_ENTER_EMERGENCY_CALLBACK_MODE = 205;
    UNSOL_EXIT_EMERGENCY_CALLBACK_MODE = 206;

    UNSOL_MODIFY_CALL = 207;
    UNSOL_RESPONSE_HANDOVER = 208;

    /**
     * UNSOL_REFRESH_CONF_INFO
     *
     * Notification for updated conference information
     *
     * "response" is message ConfInfo
     */
    UNSOL_REFRESH_CONF_INFO = 209;

    /**
     * UNSOL_SRV_STATUS_UPDATE
     *
     * Status of services supported on Ims network. Currently supported services are sms, volte,
     * VT but interface is extensible if more services are added in future
     *
     * "response" is message SrvStatusList
     */
    UNSOL_SRV_STATUS_UPDATE = 210;

    /**
     * UNSOL_SUPP_SVC_NOTIFICATION
     *
     * Reports supplementary service related notification from the network.
     *
     * "data" is a const SuppSvcNotification *
     *
     */
    UNSOL_SUPP_SVC_NOTIFICATION = 211;

    /**
     * UNSOL_TTY_NOTIFICATION
     *
     * Reports Text Telephone related notification from the network.
     *
     * "response" is message TtyNotify
     *
     */
    UNSOL_TTY_NOTIFICATION = 212;

    /**
     * UNSOL_RADIO_STATE_CHANGED
     *
     * Notification for radio state change
     *
     * "response" is message RadioStateChanged
     */
    UNSOL_RADIO_STATE_CHANGED = 213;

    /**
     * UNSOL_MWI
     *
     * Notification for message waiting indication
     *
     * "response" is message Mwi
     */
    UNSOL_MWI = 214;
    }

    enum Error{
    E_SUCCESS = 0;
    E_RADIO_NOT_AVAILABLE = 1;     /* If radio did not start or is resetting */
    E_GENERIC_FAILURE = 2;
    E_REQUEST_NOT_SUPPORTED = 6;
    E_CANCELLED = 7;
    E_UNUSED = 16;

    E_INVALID_PARAMETER = 27;               /* Invalid parameter given in a
                                                   REQUEST_MODIFY_CALL_INITIATE */
    E_REJECTED_BY_REMOTE = 28;              /* Remote end rejected a change started by
                                                   REQUEST_MODIFY_CALL_INITIATE */
    E_IMS_DEREGISTERED = 29;
    }


enum CallState{
    CALL_ACTIVE = 0;
    CALL_HOLDING = 1;
    CALL_DIALING = 2;    /* MO call only */
    CALL_ALERTING = 3;   /* MO call only */
    CALL_INCOMING = 4;   /* MT call only */
    CALL_WAITING = 5;     /* MT call only */
    CALL_END = 6;
}

enum RadioState{
    RADIO_STATE_OFF = 0;                   /* Radio explictly powered off (eg CFUN=0) */
    RADIO_STATE_UNAVAILABLE = 1;           /* Radio unavailable (eg, resetting or not booted) */
    RADIO_STATE_ON = 10;                    /* Radio is on */
}

enum CallType{
    CALL_TYPE_VOICE = 0;       /* Voice only call */
    CALL_TYPE_VT_TX = 1;       /* PS Video telephony call: one way TX video,
                                * two way audio */
    CALL_TYPE_VT_RX = 2;       /* Video telephony call: one way RX video,
                                * two way audio */
    CALL_TYPE_VT = 3;          /* Video telephony call: two way video,
                                * two way audio */
    CALL_TYPE_VT_NODIR = 4;    /* Video telephony call: no direction
                                * two way audio
                                * intermediate state in a video call till
                                * video link is setup */
    CALL_TYPE_CS_VS_TX = 5;    /* VS no lipsync augmented with CS */
    CALL_TYPE_CS_VS_RX = 6;    /* VS no lipsync augmented with CS */
    CALL_TYPE_PS_VS_TX = 7;    /* VS no lipsync with optional one way PS audio */
    CALL_TYPE_PS_VS_RX = 8;    /* VS no lipsync with optional one way PS audio */
    CALL_TYPE_UNKNOWN = 9;
    CALL_TYPE_SMS = 10;         /* SMS */
}

enum CallSubstate{
    CALL_SUBSTATE_UNDEFINED = 0; /* Default case */
    CALL_SUBSTATE_CONNECTED_SUSPENDED = 1; /* Indicates that call is connected but suspended */
}


message CallFailCauseResponse{
    optional CallFailCause failcause = 1;
    optional bytes errorinfo = 2;         /* - From UE for hangup scenarios, errorinfo can take
                                           *   any of the following values -
                                           * -- VOICE_REJECT_CAUSE_USER_BUSY (0x01)-User is busy
                                           * -- VOICE_REJECT_CAUSE_USER_REJECT (0x02)-User has
                                           *    rejected the call
                                           * -- VOICE_REJECT_CAUSE_LOW_BATTERY (0x03)-Call is
                                           *    rejected due to low battery
                                           * - From peer/network for disconnected call in
                                           *   GET_LAST_FAIL_CAUSE, errorinfo can take
                                           *   any of the standard SIP error codes
                                           *   .i.e.400, 404, 408, 415, 480
                                           * - Apart from above values, it can take any of the OEM
                                           *   defined values, which is transparent to
                                           *   telephony layer.
                                           */
}
enum CallFailCause {
    CALL_FAIL_UNOBTAINABLE_NUMBER = 1;
    CALL_FAIL_NORMAL = 16;
    CALL_FAIL_BUSY = 17;
    CALL_FAIL_CONGESTION = 34;
    CALL_FAIL_INCOMPATIBILITY_DESTINATION = 88;
    CALL_FAIL_CALL_BARRED = 240;


    CALL_FAIL_NETWORK_UNAVAILABLE = 1010; /* PS network is unavailable
                                       * Remote party is temporarily camped on
                                       * non PS network.
                                       * Originating / remote party lost PS
                                       * coverage during the call
                                       * UI prompts user to retry call on CS*/

    CALL_FAIL_FEATURE_UNAVAILABLE = 1011; /* User has not subscribed for this
                                       * service. UI prompts user to retry call
                                       * on CS*/

    CALL_FAIL_SIP_Error = 1012; /* Sip timeout or dialog not present Error during
                                      * call upgrade/downgrade
                                      * SIP Error code 481/408
                                      * sent by IMS stack. UI does not take
                                      * any action on this Error code.*/
    CALL_FAIL_MISC = 1013;/* Error code to represent Miscellaneous call failure cases*/

    CALL_FAIL_ANSWERED_ELSEWHERE = 1014; /* MT call has ended due to a release
                                       * from the network because the call was
                                       * answered elsewhere */

    CALL_FAIL_ERROR_UNSPECIFIED = 0xffff;
}


enum CallDomain{
    CALL_DOMAIN_UNKNOWN = 0;   /* Unknown domain. Sent by RIL when modem
                                    * has not yet selected a
                                    * domain for a call */
    CALL_DOMAIN_CS = 1;        /* Circuit switched domain */
    CALL_DOMAIN_PS = 2;        /* Packet switched domain */
    CALL_DOMAIN_AUTOMATIC = 3; /* Automatic domain. Sent by Android to
                                    * indicate that the domain
                                    * for a new call should be selected by modem */
    CALL_DOMAIN_NOT_SET = 4;
}

/* Will be deprecated when RIL Changes are ready to use CallType instead */
enum SrvType {
    SMS = 1;
    VOIP = 2;
    VT = 3;
}

enum StatusType {
    STATUS_DISABLED = 0;
    STATUS_PARTIALLY_ENABLED = 1;
    STATUS_ENABLED = 2;
    STATUS_NOT_SUPPORTED = 3; /* Example no modem support for IMS */
}

enum RadioTechType {
    RADIO_TECH_ANY = -1;      /* Network type can be any, used when a specific service setting
                                 * is applicable for all access technologies, example: disable
                                 * VOLTE on all access technology - When multiple network types
                                 * are listed then ANY takes priority */
    RADIO_TECH_UNKNOWN = 0;   /* Network type is unknown */
    RADIO_TECH_GPRS = 1;      /* Network type is GPRS */
    RADIO_TECH_EDGE = 2;      /* Network type is EDGE */
    RADIO_TECH_UMTS = 3;      /* Network type is UMTS */
    RADIO_TECH_IS95A = 4;     /* Network type is IS95A */
    RADIO_TECH_IS95B = 5;     /* Network type is IS95B */
    RADIO_TECH_1xRTT = 6;     /* Network type is 1xRTT*/
    RADIO_TECH_EVDO_0 = 7;    /* Network type is EVDO revision 0*/
    RADIO_TECH_EVDO_A = 8;    /* Network type is EVDO revision A*/
    RADIO_TECH_HSDPA = 9;     /* Network type is HSDPA */
    RADIO_TECH_HSUPA = 10;     /* Network type is HSUPA */
    RADIO_TECH_HSPA = 11;     /* Network type is HSPA */
    RADIO_TECH_EVDO_B = 12;   /* Network type is EVDO revision B*/
    RADIO_TECH_EHRPD = 13;    /* Network type is eHRPD */
    RADIO_TECH_LTE = 14;      /* Network type is LTE */
    RADIO_TECH_HSPAP = 15;    /* Network type is HSPA+ */
    RADIO_TECH_GSM = 16;      /* Network type is GSM */
    RADIO_TECH_TD_SCDMA = 17; /* Network type is TD_SCDMA */
    RADIO_TECH_WIFI = 18;     /* Network type is WIFI */
    RADIO_TECH_IWLAN = 19;     /* Network type is IWLAN */
}

message StatusForAccessTech{
    optional RadioTechType networkMode = 1;
    optional StatusType status = 2; /* Status takes precedence over registered i.e if due to a
                                     * error scenario status is disabled but registered says IMS
                                     * registered then the feature is treated disabled */
    optional fixed32 restrictionCause = 3;
    optional Registration registered = 4; /* Registered is applicable only to Query request and
                                           * and not Set. Field is valid only for status values of
                                           * Enabled or Partially Enabled - n/a for other
                                           * values of status */
}

message Info {
    optional bool isValid = 1;    /* If false then ignore rest of the members */
    optional SrvType type = 2;  /* Type of Service the update is for - this will be
                                 * deprecated when RIL makes their change to use
                                 * CallType instead of SrvType */
    optional CallType callType = 3;  /* Type of Call the update is for */
    optional StatusType status = 4; /* Status of the Service being updated - to be deprecated */
    optional bytes userdata = 5; /* Any additional data for future use */
    optional fixed32 restrictCause = 6; /* Restriction cause for capability - to be deprecated */
    repeated StatusForAccessTech accTechStatus = 7; /* Status of Service per access tech */
}

message SrvStatusList {
    repeated Info SrvStatusInfo = 2;
}

message CallDetails {
    optional CallType   callType = 1;   /* Initial call type to use */
    optional CallDomain callDomain = 2; /* Call domain to place the call on.
                                 * Modem is expected to respect
                                 * the selected call domain.
                                 * When domain is AUTOMATIC, modem will
                                 * select the best available domain */
    optional fixed32 extrasLength = 3 [default = 0];           /* The number of elements in the extra field */
    repeated string extras = 4 ;        /* A list of additional call attributes,
                                 * each char * being a key-value pair.
                                 * The format should be
                                 * <namespace>:<param-name>=<value>
                                   e.g. vt:picture-size=320x240 */
    optional SrvStatusList localAbility = 5;   /* Local capability for this call - used only as
                                                * part of GET_CURRENT_CALLS */
    optional SrvStatusList peerAbility = 6;    /* Peer capability for this call - used only as
                                                * part of GET_CURRENT_CALLS */
    optional CallSubstate  callSubstate = 7;   /* Substate of the call */
}

message CallModify {

    optional fixed32 callIndex = 2;
    optional CallDetails callDetails = 3;
    optional Error error = 4;   /* This field is used for
                                 * unsolicited messages only. QMI RIL sets
                                 * it to E_CANCEL to notify that the
                                 * previous CallModify request timed out.
                                 * e.g. vt:picture-size=320x240 */
}

message CallList {
    message Call {
        optional CallState  state = 1;
        optional fixed32    index = 2;              /* Connection Index for use with, eg, AT+CHLD */
        optional fixed32    toa = 3;                /* type of address, eg 145 = intl */
        optional bool       isMpty = 4;             /* nonzero if is mpty call */
        optional bool       isMT = 5;               /* nonzero if call is mobile terminated */
        optional fixed32    als = 6;                /* ALS line indicator if available
                                                     (0 = line 1) */
        optional bool       isVoice = 7;            /* nonzero if this is is a voice call */
        optional bool       isVoicePrivacy = 8;     /* nonzero if CDMA voice privacy mode is active */
        optional string     number = 9;             /* Remote party number */
        optional fixed32    numberPresentation = 10;/* 0=Allowed, 1=Restricted, 2=Not Specified/Unknown 3=Payphone */
        optional string     name =11;               /* Remote party name */
        optional fixed32    namePresentation = 12;  /* 0=Allowed, 1=Restricted, 2=Not Specified/Unknown 3=Payphone */
        optional CallDetails  callDetails = 13;     /* current call detail */
        optional CallFailCauseResponse failCause = 14;
    }
    repeated Call callAttributes = 2 ;
}

enum IpPresentation{
    IP_PRESENTATION_NUM_ALLOWED = 0x0;    /* Presentation of IP Allowed */
    IP_PRESENTATION_NUM_RESTRICTED = 0x1; /* Presentation of IP Restricted */
    IP_PRESENTATION_NUM_DEFAULT = 0x2;    /* Presentation default. Network value
                                           * will be considered in this case.
                                           */
}

message Colr {
    optional IpPresentation presentation = 1;
}

message Dial {
    optional string address = 1;
    optional fixed32 clir = 2;
            /* (same as 'n' paremeter in TS 27.007 7.7 "+CLIR"
             * clir == 0 on "use subscription default value"
             * clir == 1 on "CLIR invocation" (restrict CLI presentation)
             * clir == 2 on "CLIR suppression" (allow CLI presentation)
             */
    optional CallDetails  callDetails = 3; /* current call detail */
    optional IpPresentation presentation = 4; /* IP Presentation detail */
    optional bool isConferenceUri = 5; /* set to true only if initiating conference uri,
                                        * field not set for other dial requests */
}

message Hangup {
    optional fixed32 conn_index  = 1; /* Valid if multiparty is false else -1  */
    optional bool multi_party    = 2; /* Is Hangup for a multiparty call */
    optional string  conn_uri    = 3; /* Valid if multiparty is true, else null */
    optional fixed32 conf_id     = 4; /* Conference ID if more than 1 conference call */
    optional CallFailCauseResponse failCauseResponse = 5; /* Fail cause response */
}

message DeflectCall {
    optional fixed32 conn_index  = 1; /* Connection id to be deflected*/
    optional string  number      = 2; /* connection would be deflected to this number */
}

message Clir {
    optional fixed32 param_m = 1;
    optional fixed32 param_n = 2;
}

message Answer {
    optional CallType call_type = 1;
    optional IpPresentation presentation = 4; /* IP Presentation detail */
}

message SwitchWaitingOrHoldingAndActive {
    optional CallType call_type = 1;
}

message Mute {
    optional bool mute_flag = 1;
}


message Dtmf {
    optional string dtmf = 1;
}

//Reuse the registration message for IMS Registration/Deregistration
message Registration {
    enum RegState{
        REGISTERED = 1;
        NOT_REGISTERED = 2;
    }
    optional RegState state = 1;
}

message RingBackTone {
    enum ToneFlag {
        STOP = 0;
        START = 1;
    }
    optional ToneFlag flag = 1;
}

message IFConnected{
    enum Version {
        VERSION_0 = 0;
    }
    optional Version if_version = 1;
}

message LastFailCause{
    optional CallFailCause cause = 1;
}

enum Handover_Msg_Type{
    START = 0;            /* Handover triggered */
    COMPLETE_SUCCESS = 1; /* Handover completed successfully */
    COMPLETE_FAIL = 2;    /* Handover failed */
    CANCEL = 3;           /* Handover cancelled */
}

enum Extra_Type{
    LTE_TO_IWLAN_HO_FAIL = 1; /* Handover from LTE to IWLAN failed */
}

message Extra{
    optional Extra_Type type = 1; /* Type of Extra */
    optional bytes extraInfo = 2; /* Additional Information associated with this extra type */
}

message Handover{
    optional Handover_Msg_Type type = 1;
    optional RadioTechType srcTech = 2; /* Source Radio Tech */
    optional RadioTechType targetTech = 3; /* Target Radio Tech */
    optional Extra hoExtra = 4; /* Extra information about this handover */
}

enum Tty_Mode_Type{
    TTY_MODE_OFF = 0;
    TTY_MODE_FULL = 1;
    TTY_MODE_HCO = 2;
    TTY_MODE_VCO = 3;
}

message TtyNotify{
    optional Tty_Mode_Type mode = 1; /* Tty Mode */
    optional bytes userData = 2; /* Additional user data related to this notification for future */
}

message RadioStateChanged{
    optional RadioState state = 1;
}

enum ClipStatus {
    NOT_PROVISIONED = 0;
    PROVISIONED = 1;
    STATUS_UNKNOWN = 2;
}

message ClipProvisionStatus{
    optional ClipStatus clip_status = 1;
}

message ServiceClass{
    optional fixed32 service_Class = 1;  /*  TS 27.007 service class to query
                                          *  1 = voice
                                          *  2 = data
                                          *  4 = fax
                                          *  8 = sms
                                          *  16 = data sync
                                          *  32 = data async
                                          *  64 = packet
                                          *  128 = PAD
                                          */
}

enum ServiceClassStatus{
    DISABLED = 0;
    ENABLED = 1;
}

message CbNumList {
    optional ServiceClassStatus status = 1;
    optional string number = 2;
}

message CbNumListType {
    optional ServiceClass serviceClass = 1; /* only voice class i.e 1 is supported */
    repeated CbNumList cb_num_list = 2; /* every element in CbNumList corresponds to
                                         * each serviceClass
                                         */
}

message CallWaitingInfo{
    optional ServiceClassStatus service_status = 1;
    optional ServiceClass       service_class  = 2; /*  TS 27.007 service class to query */
}

message CallForwardInfoList{
    message CallForwardInfo{
        optional fixed32 status = 1;/*
                                     * For RIL_REQUEST_QUERY_CALL_FORWARD_STATUS
                                     * status 1 = active, 0 = not active
                                     *
                                     * For RIL_REQUEST_SET_CALL_FORWARD:
                                     * status is:
                                     * 0 = disable
                                     * 1 = enable
                                     * 2 = interrogate
                                     * 3 = registeration
                                     * 4 = erasure
                                     */
        optional fixed32 reason = 2;      /* from TS 27.007 7.11 "reason" */
        optional fixed32 service_class = 3;/* From 27.007 +CCFC/+CLCK "class"
                                             See table for Android mapping from
                                             MMI service code
                                             0 means user doesn't input class */
        optional fixed32 toa = 4;         /* "type" from TS 27.007 7.11 */
        optional string  number = 5;      /* "number" from TS 27.007 7.11. May be NULL */
        optional fixed32 time_seconds = 6; /* for CF no reply only */
    }
    repeated CallForwardInfo info = 2;
}

message ConfInfo{
    optional bytes conf_info_uri = 1;
    optional ConfCallState confCallState = 2; /* Call state ConfCallState*/
}

enum ConfCallState {
    RINGING = 0;
    FOREGROUND = 1;
    BACKGROUND = 2;
}

message SuppSvcNotification{
    optional NotificationType notificationType = 1;
                                           /*
                                            * 0 = MO intermediate result code
                                            * 1 = MT unsolicited result code
                                            */
    optional fixed32 code = 2;
    optional fixed32 index = 3;            /* CUG index - not used currently */
    optional fixed32 type = 4;             /* "type" (MT only).- not used currently */
    optional string  number = 5;           /* "number"
                                              (MT only, may be NULL). - not used currently*/
    optional fixed32 connId = 6;            /* connection id */
}

enum NotificationType {
    MO = 0;
    MT = 1;
}

message SuppSvcStatus{
    optional ServiceClassStatus status = 1;
}

enum SuppSvcOperationType {
    ACTIVATE = 1;
    DEACTIVATE = 2;
    QUERY = 3;
    REGISTER = 4;
    ERASURE = 5;
}

enum SuppSvcFacilityType {
    FACILITY_CLIP = 1;    /* Calling Line Identification Presentation */
    FACILITY_COLP = 2;    /* Connected Line Identification Presentation */
    FACILITY_BAOC = 3;    /* Bar All Outgoing Calls */
    FACILITY_BAOIC = 4;   /* Bar All Outgoing International Calls */
    FACILITY_BAOICxH = 5; /* Bar all Outgoing International Calls except those
                           * directed to home PLMN country
                           */
    FACILITY_BAIC = 6;    /* Bar All Incoming Calls */
    FACILITY_BAICr = 7;   /* Bar All Incoming Calls when Roaming outside
                           * the home PLMN country
                           */
    FACILITY_BA_ALL = 8;  /* Bar All incoming & outgoing Calls */
    FACILITY_BA_MO = 9;   /* Bar All Outgoing Calls */
    FACILITY_BA_MT = 10;  /* Bar All Incming Calls */
    FACILITY_BS_MT = 11;  /* Bar Incoming Calls from specific DN */
    FACILITY_BAICa = 12;  /* Bar All Incoming Calls from Anonymous numbers*/
}

message SuppSvcRequest {
    optional fixed32 operationType = 1;  /* values are of type enum SuppSvcOperationType */
    optional fixed32 facilityType = 2;   /* values are of type enum SuppSvcFacilityType */
    optional CbNumListType cbNumListType = 3;
}

message SuppSvcResponse {
    optional ServiceClassStatus status = 1;
    optional fixed32 facilityType = 2; /* values are of type enum SuppSvcFacilityType */
    optional string failureCause = 3; /* error returned by network for set operation */
    repeated CbNumListType cbNumListType = 4; /* used by FACILITY_BS_MT for query operation */
}

 // List of quality values
enum Quality {
    LOW = 0; // Low Quality
    HIGH = 1; // High Quality
}

// Message contains call settings.
message VideoCallQuality {
    optional Quality quality = 1; // Video call quality
}

enum MwiMessageType {
    MWI_MSG_NONE = -1;
    MWI_MSG_VOICE = 0;
    MWI_MSG_VIDEO = 1;
    MWI_MSG_FAX   = 2;
    MWI_MSG_PAGER = 3;
    MWI_MSG_MULTIMEDIA = 4;
    MWI_MSG_TEXT = 5;
}

enum MwiPriority {
    MWI_MSG_PRIORITY_UNKNOWN = -1;
    MWI_MSG_PRIORITY_LOW     = 0;
    MWI_MSG_PRIORITY_NORMAL  = 1;
    MWI_MSG_PRIORITY_URGENT  = 2;
}

message MwiMessageSummary {
    optional MwiMessageType messageType = 1;
    optional fixed32 newMessage   = 2; /* Count for New Messages */
    optional fixed32 oldMessage  = 3;  /* Count for Old Messages */
    optional fixed32 newUrgent   = 4;  /* Count for New Urgent Messages */
    optional fixed32 oldUrgent   = 5;  /* Count for Old Urgent Messages */
}

message MwiMessageDetails {
    optional string toAddress = 1;
    optional string fromAddress = 2;
    optional string subject     = 3;
    optional string date        = 4;
    optional MwiPriority priority = 5;
    optional string messageId   = 6;
    optional MwiMessageType messageType = 7;
}

message Mwi {
    repeated MwiMessageSummary mwiMsgSummary = 1;
    optional string ueAddress = 2;
    repeated MwiMessageDetails mwiMsgDetail = 3;
}

message Hold {
    optional fixed32 callId = 1;
}

message Resume {
    optional fixed32 callId = 1;
}


