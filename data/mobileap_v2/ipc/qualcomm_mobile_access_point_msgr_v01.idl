/*****************************************************************************
  @FILE     qualcomm_mobile_access_point_msgr_v01.idl

  @BRIEF    Qualcomm Mobile Access Point Messenger Service (QCMAP_MSGR)

  @DESCRIPTION

  This specification documents major version 1 of the Qualcomm Messaging
  Interface (QMI) for the Qualcomm Mobile Access Point Messenger Service (QCMAP_MSGR).

  QCMAP_MSGR provides a command set to interface to a wireless mobile station
  to access mobile access point services. QCMAP_MSGR is a QMI
  service within the QMI framework defined in 80-VB816-1.

  QCMAP_MSGR is a QMI native service, conforming to the generalized
  behavior defined for QMI services in QMI Architecture 80-VB816-1.

  QCMAP_MSGR service supports multiple clients per QMI control channel.

  @COPYRIGHT Copyright (c) 2012-2014 Qualcomm Technologies, Inc.
  All rights reserved.
  Confidential and Proprietary - Qualcomm Technologies, Inc.
*****************************************************************************/
include "common_v01.idl";

revision 29;

const QCMAP_MSGR_MAX_SNAT_ENTRIES      = 50;    // Max number of Static NAT entries
const QCMAP_MSGR_MAX_FIREWALL_ENTRIES  = 50;    // Max Number of Firewall entries
const QCMAP_MSGR_IPV6_ADDR_LEN         = 16;    // IPv6 address len
const QCMAP_MSGR_MAX_DLNA_DIR_LEN      = 500;   // Max string length of the DLNA media directory
const QCMAP_MSGR_MAC_ADDR_LEN          = 6;     // MAC addr len
const QCMAP_MSGR_DEVICE_NAME_MAX       = 100;   // Max len of the device name
const QCMAP_MSGR_MAX_DHCP_RESERVATION_ENTRIES=20; // Max number of DHCP reservation records
const QCMAP_MSGR_MAC_ADDR_NUM_CHARS    = 18;    // Max characters in MAC string
const QCMAP_MSGR_PCSCF_FQDN_MAX_LENGTH = 100;   //Max characters in PCSCF FQDN
const QCMAP_MSGR_MAX_SIP_SERVER_ENTRIES = 25;   //Max number of SIP servers
const QCMAP_MSGR_MAX_CONNECTED_DEVICES = 40;    // Max number of devices connected to SoftAP Device

// Identifies the IP family used for mobile AP.
enum {
  QCMAP_MSGR_IP_FAMILY_V4    = 0x04,
  /**< IPv4 version */
  QCMAP_MSGR_IP_FAMILY_V6    = 0x06,
  /**< IPv6 version */
  QCMAP_MSGR_IP_FAMILY_V4V6  = 0x0A
  /**< Dual mode version */
} qcmap_msgr_ip_family_enum;

// Enumeration for the call type for WWAN bring up/down.
enum {
  QCMAP_MSGR_WWAN_CALL_TYPE_V4 = 0x01,
  /**< IPv4 call */
  QCMAP_MSGR_WWAN_CALL_TYPE_V6
  /**< IPv6 call */
}qcmap_msgr_wwan_call_type;

// Identifies the WWAN status.
enum {
  QCMAP_MSGR_WWAN_STATUS_CONNECTING = 0x01,
  /**< IPv4 WWAN is in connecting state */
  QCMAP_MSGR_WWAN_STATUS_CONNECTING_FAIL,
  /**< IPv4 connection to WWAN failed */
  QCMAP_MSGR_WWAN_STATUS_CONNECTED,
  /**< IPv4 WWAN is in connected state */
  QCMAP_MSGR_WWAN_STATUS_DISCONNECTING,
  /**< IPv4 WWAN is disconnecting */
  QCMAP_MSGR_WWAN_STATUS_DISCONNECTING_FAIL,
  /**< IPv4 WWAN failed to disconnect */
  QCMAP_MSGR_WWAN_STATUS_DISCONNECTED,
  /**< IPv4 WWAN is disconnected */
  QCMAP_MSGR_WWAN_STATUS_IPV6_CONNECTING,
  /**< IPv6 WWAN is in connecting state */
  QCMAP_MSGR_WWAN_STATUS_IPV6_CONNECTING_FAIL,
  /**< IPv6 connection to WWAN failed */
  QCMAP_MSGR_WWAN_STATUS_IPV6_CONNECTED,
  /**< IPv6 WWAN is in connected state */
  QCMAP_MSGR_WWAN_STATUS_IPV6_DISCONNECTING,
  /**< IPv6 WWAN is disconnecting */
  QCMAP_MSGR_WWAN_STATUS_IPV6_DISCONNECTING_FAIL,
  /**< IPv6 WWAN failed to disconnect */
  QCMAP_MSGR_WWAN_STATUS_IPV6_DISCONNECTED
  /**< IPv6 WWAN is disconnected */
} qcmap_msgr_wwan_status_enum;

// Identifies the MobileAP status.
enum {
  QCMAP_MSGR_MOBILE_AP_STATUS_CONNECTED = 0x01,
  /**< Mobile AP is connected */
  QCMAP_MSGR_MOBILE_AP_STATUS_DISCONNECTED
  /**< Mobile AP is disconnected */
} qcmap_msgr_mobile_ap_status_enum;

// Identifies the Station Mode status.
enum {
  QCMAP_MSGR_STATION_MODE_CONNECTED = 0x01,
  /**< Station mode is connected */
  QCMAP_MSGR_STATION_MODE_DISCONNECTED,
  /**< Station mode is disconnected */
  QCMAP_MSGR_STATION_MODE_ASSOCIATION_FAIL,
  /**< Station is not able to associated with AP */
  QCMAP_MSGR_STATION_MODE_DHCP_IP_ASSIGNMENT_FAIL
  /**< Station is not able to get IP address via DHCP */
} qcmap_msgr_station_mode_status_enum;

// Identifies the Cradle status.
enum {
  QCMAP_MSGR_CRADLE_DISCONNECTED = 0x01,
  /**< Cradle is disconnected */
  QCMAP_MSGR_CRADLE_CONNECTED
  /**< Cradle is connected */
} qcmap_msgr_cradle_status_enum;

// Identifies the NAT types supported.
enum {
  QCMAP_MSGR_NAT_SYMMETRIC_NAT,
  /**< NAT type is symmetric */
  QCMAP_MSGR_NAT_PORT_RESTRICTED_CONE_NAT,
  /**< NAT type is Port-Restricted Cone NAT */
  QCMAP_MSGR_NAT_FULL_CONE_NAT,
  /**< NAT type is Full Cone NAT */
  QCMAP_MSGR_NAT_ADDRESS_RESTRICTED_NAT
  /**< NAT type is Address-Restricted NAT */
} qcmap_msgr_nat_enum;

// Identifies the NAT timeout types.
enum {
  QCMAP_MSGR_NAT_TIMEOUT_GENERIC = 0x01,
  /**<  Generic NAT timeout */
  QCMAP_MSGR_NAT_TIMEOUT_ICMP,
  /**<  NAT timeout for ICMP */
  QCMAP_MSGR_NAT_TIMEOUT_TCP_ESTABLISHED,
  /**<  NAT timeout for the TCP established */
  QCMAP_MSGR_NAT_TIMEOUT_UDP,
  /**<  NAT timeout for UDP */
  QCMAP_MSGR_NAT_TIMEOUT_UDP_STREAM
  /**<  NAT timeout for UDP stream */
} qcmap_msgr_nat_timeout_enum;

// Identifies the WLAN mode.
enum {
  QCMAP_MSGR_WLAN_MODE_AP = 0x01,
  /**< WLAN is in AP mode */
  QCMAP_MSGR_WLAN_MODE_AP_AP,
  /**< WLAN is in AP/AP Mode */
  QCMAP_MSGR_WLAN_MODE_AP_STA
  /**< WLAN is in AP/STA Mode */
} qcmap_msgr_wlan_mode_enum;

// Identifies the Guest AP Access Profile
enum {
  QCMAP_MSGR_PROFILE_FULL_ACCESS,
  /**< AP Can Access complete LAN Including Internet */
  QCMAP_MSGR_PROFILE_INTERNET_ONLY
  /**< AP Can Access Only Internet */
} qcmap_msgr_access_profile;

// Identifies Bootup values of QCMAP components
enum {
  QCMAP_MSGR_DISABLE_ON_BOOT,
  /**< Disable QCMAP Component on bootup */
  QCMAP_MSGR_ENABLE_ON_BOOT
  /**< Enable QCMAP Component on bootup */
} qcmap_msgr_bootup_flag;

// Indicates the QTI link values.
enum {
  QCMAP_MSGR_USB_LINK_RNDIS = 0x01,
  /**< USB tethered link is RNDIS */
  QCMAP_MSGR_USB_LINK_ECM = 0x02,
  /**< USB tethered link is ECM */
  QCMAP_MSGR_USB_LINK_PPP
  /**< USB tethered link is PPP */
} qcmap_msgr_usb_link_enum;

// Indicates the reason why the WWAN call ended.
enum {
  QCMAP_MSGR_WWAN_CALL_END_TYPE_INVALID = 0xFF,
  /**< Unknown */
  QCMAP_MSGR_WWAN_CALL_END_TYPE_MOBILE_IP = 0x01,
  /**< Mobile IP */
  QCMAP_MSGR_WWAN_CALL_END_TYPE_INTERNAL = 0x02,
  /**< Internal */
  QCMAP_MSGR_WWAN_CALL_END_TYPE_CALL_MANAGER_DEFINED = 0x03,
  /**< Call manager defined */
  QCMAP_MSGR_WWAN_CALL_END_TYPE_3GPP_SPEC_DEFINED = 0x06,
  /**< 3GPP specification defined */
  QCMAP_MSGR_WWAN_CALL_END_TYPE_PPP = 0x07,
  /**< PPP */
  QCMAP_MSGR_WWAN_CALL_END_TYPE_EHRPD = 0x08,
  /**< EHRPD */
  QCMAP_MSGR_WWAN_CALL_END_TYPE_IPV6 = 0x09
  /**< IPv6 */
} qcmap_msgr_wwan_call_end_type_enum;

//Indicates the device type client is associated with.
enum {
  QCMAP_MSGR_DEVICE_TYPE_PRIMARY_AP = 0x01,
  /**< Device type is Primary AP */
  QCMAP_MSGR_DEVICE_TYPE_GUEST_AP = 0x02,
  /**< Device type is Guest AP */
  QCMAP_MSGR_DEVICE_TYPE_USB = 0x03
  /**< Device type is USB */
} qcmap_msgr_device_type_enum;

// Indicates the technology preference values.
mask {
  QCMAP_MSGR_MASK_TECH_PREF_3GPP  = 0x01,
  /**< 3GPP */
  QCMAP_MSGR_MASK_TECH_PREF_3GPP2 = 0x02
  /**< 3GPP2 */
} qcmap_msgr_tech_pref_mask;

// Indicates the address type.
mask {
  QCMAP_MSGR_MASK_V4_ADDR          = 0x00000001,
  /**< IPv4 address */
  QCMAP_MSGR_MASK_V6_ADDR          = 0x00000002,
  /**< IPv6 address */
  QCMAP_MSGR_MASK_V4_DNS_ADDR      = 0x00000004,
  /**< IPv4 DNS address  */
  QCMAP_MSGR_MASK_V6_DNS_ADDR      = 0x00000008
  /**< IPv6 DNS address */
} qcmap_msgr_addr_type_mask;

// Indicates the ALG type.
mask {
  QCMAP_MSGR_MASK_RTSP_ALG          = 0x01,
  /**< RTSP ALG  */
  QCMAP_MSGR_MASK_SIP_ALG           = 0x02
  /**< SIP ALG  */

  /**< All other bits are reserved and will be ignored by the service
   ADD more MASK depending on new ALG modules added
  */
} qcmap_msgr_alg_type_mask;

// Indicates the station mode connection type.
enum {
  QCMAP_MSGR_STA_CONNECTION_DYNAMIC = 0x01,
  /**< Dynamic */
  QCMAP_MSGR_STA_CONNECTION_STATIC
  /**< Static */
} qcmap_msgr_sta_connection_enum;

// Identifies the UPNP mode.
enum {
  QCMAP_MSGR_UPNP_MODE_UP = 0x01,
  /**< UPNP is in AP mode */
  QCMAP_MSGR_UPNP_MODE_DOWN
  /**< UPNP is in AP/AP Mode */
} qcmap_msgr_upnp_mode_enum;

// Identifies the DLNA mode.
enum {
  QCMAP_MSGR_DLNA_MODE_UP = 0x01,
  /**< DLNA is in AP mode */
  QCMAP_MSGR_DLNA_MODE_DOWN
  /**< DLNA is in AP/AP Mode */
} qcmap_msgr_dlna_mode_enum;

// Identifies the MDNS mode.
enum {
  QCMAP_MSGR_MDNS_MODE_UP = 0x01,
  /**< MDNS is in AP mode */
  QCMAP_MSGR_MDNS_MODE_DOWN
  /**< MDNS is in AP/AP Mode */
} qcmap_msgr_mdns_mode_enum;

// Indicates the AP type for which Hostapd settings need to be activated.
enum {
  QCMAP_MSGR_PRIMARY_AP = 0x01,
  /**< Primary AP. */
  QCMAP_MSGR_GUEST_AP = 0x02,
  /**< Guest AP. */
  QCMAP_MSGR_PRIMARY_AND_GUEST_AP = 0x03
  /**< Both the AP's. */
} qcmap_msgr_activate_hostapd_ap_enum;

// Indicates the hostapd action that needs to be activated.
enum {
  QCMAP_MSGR_HOSTAPD_START = 0x01,
  /**< Start hostapd. */
  QCMAP_MSGR_HOSTAPD_STOP = 0x02,
  /**< Stop hostapd. */
  QCMAP_MSGR_HOSTAPD_RESTART = 0x03
  /**< Restart hostapd. */
} qcmap_msgr_activate_hostapd_action_enum;

// Indicates the PCSCF information type
enum {
  QCMAP_MSGR_PCSCF_IP_ADDRESS   = 0x01,
  /**< PCSCF IP Address */
  QCMAP_MSGR_PCSCF_FQDN         = 0x02
  /**< PCSCF Fully Qualified Domain Name*/
} qcmap_msgr_pcscf_info_type;

// Indicates the ODU mode
enum {
  QCMAP_MSGR_ODU_BRIDGE_MODE	 = 0x01,
  /**< ODU bridge mode */
  QCMAP_MSGR_ODU_ROUTER_MODE
  /**< ODU router mode, default mode */
} qcmap_msgr_odu_mode;

// Indicates the Cradle mode
enum {
  QCMAP_MSGR_CRADLE_DISABLED = 0x00,
  /**< Cradle mode disabled */
  QCMAP_MSGR_CRADLE_LAN_BRIDGE,
  /**< Cradle mode LAN bridge */
  QCMAP_MSGR_CRADLE_LAN_ROUTER,
  /**< Cradle mode LAN router */
  QCMAP_MSGR_CRADLE_WAN_BRIDGE,
  /**< Cradle mode WAN bridge */
  QCMAP_MSGR_CRADLE_WAN_ROUTER
  /**< Cradle mode WAN router */
} qcmap_msgr_cradle_mode;

/** Data structure used to add a static NAT entry. */
struct
{
  uint32  private_ip_addr;
  /**< Private IP address. */

  uint16  private_port;
  /**< Private port. */

  uint16  global_port;
  /**< Global port. */

  uint8 protocol;
  /**< Protocol. */
} qcmap_msgr_snat_entry_config;

/** Data structure for the network policy used to enable mobile AP. */
struct
{
  qcmap_msgr_tech_pref_mask tech_pref;
  /**< Bitmap indicating the technology preference. A single connection
       is attempted using the following specified technology preferences.
       Values: \n
       @MASK ()

       \vspace{3pt}
       All other bits are reserved and ignored even if they are set
       in the request. If a single value of the technology preference
       bitmask is set, the device attempts to use that technology. If two
       or more bits in the technology preference bitmask are set, the
       device determines the technology to be used from those specified.
  */

  qcmap_msgr_ip_family_enum ip_family;
  /**< Identifies the IP version to be used. Values: \n
      @ENUM ()
  */
  uint8 v4_profile_id_3gpp2;
  /**< CDMA profile ID for IPv4. */

  uint8 v4_profile_id_3gpp;
  /**< UMTS profile ID for IPv4. */

  uint8 v6_profile_id_3gpp2;
  /**< CDMA profile ID for IPv6. */

  uint8 v6_profile_id_3gpp;
  /**< UMTS profile ID for IPv6. */

} qcmap_msgr_net_policy_info;


/** Data structure for WWAN statistics. */
struct
{
  uint64     bytes_rx;
  /**< Bytes received on WWAN. */
  uint64     bytes_tx;
  /**< Bytes transmitted on WWAN. */
  uint32     pkts_rx;
  /**< Packets received on WWAN. */
  uint32     pkts_tx;
  /**< Packets transmitted on WWAN. */
  uint32     pkts_dropped_rx;
  /**< Packets dropped on Rx WWAN. */
  uint32     pkts_dropped_tx;
  /**< Packets dropped on Tx WWAN. */
}qcmap_msgr_wwan_statistics_type;


/** Data structure for IPv4 address and subnet mask. */
struct {
  uint32 addr;
  /**< IPv4 address as specified in the IPv4 protocol
       specification (RFC 791 \hyperref[S2]{[S2]}).
  */
  uint32 subnet_mask;
  /**< IPv4 subnet mask as specified in the IPv4
       protocol specification (RFC 791 \hyperref[S2]{[S2]}).
  */
} qcmap_ip4_addr_subnet_mask;

/** Data structure for the IPv6 address and prefix. */
struct  {
  uint8 addr[QCMAP_MSGR_IPV6_ADDR_LEN];
  /**< IPv6 address as specified in the IPv6
       protocol specification (RFC 2460 \hyperref[S5]{[S5]}).
  */
  uint8 prefix_len;
  /**< IPv6 prefix length as specified in the IPv6
       protocol specification (RFC 3513 \hyperref[S6]{[S6]}).
  */
} qcmap_ip6_addr_prefix_len;

/** Data structure for TCP, UDP, and TCP_UDP port and range. */
struct  {
  uint16 port;
  /**< TCP/UDP port as specified in the
       TCP and UDP protocols (RFC 793 \hyperref[S4]{[S4]},
       RFC 768 \hyperref[S1]{[S1]}).
  */
  uint16 range;
  /**< TCP/UDP port range as specified in the
       TCP and UDP protocols (RFC 793 \hyperref[S4]{[S4]},
       RFC 768 \hyperref[S1]{[S1]}).
  */
} qcmap_tcp_udp_port_range;

/** Data structure for IPv4 type of service. */
struct  {
  uint8 value;
  /**< TOS value as specified in the IPv4 protocol
       (RFC 791 \hyperref[S2]{[S2]}). */
  uint8 mask;
  /**< IPv4 TOS mask */
} qcmap_ip4_tos;

/** Data structure for IPv6 traffic class. */
struct  {
  uint8 value;
  /**< IPv6 traffic class value as specified in the IPv6 protocol
       (RFC 2460 \hyperref[S5]{[S5]}). */
  uint8 mask;
  /**< IPv6 traffic class mask */
} qcmap_ip6_traffic_class;

/** Data structure for DHCP configuration. */
struct
{
  uint32 dhcp_start_ip;
  /**< DHCP start IP address. */

  uint32 dhcp_end_ip;
  /**< DHCP end IP address. */

  uint32  lease_time;
  /**< DHCP lease time, in seconds.*/

} qcmap_msgr_dhcp_config;

/** Data structure for adding AP configuration. */
struct
{
  uint32 gw_ip;
   /**< IP address of the gateway. */

  uint32 netmask;
  /**< Subnet mask. */

  boolean  enable_dhcp;
  /**< Whether to enable DHCP; boolean value. */

  qcmap_msgr_dhcp_config dhcp_config;
  /**< DHCP configuration. Used only when DHCP is enabled. */
} qcmap_msgr_lan_config;

/** Data structure for WLAN configuration. */
struct
{
  uint32 gw_ip;
   /**< IP address of the WLAN gateway. */

  uint32 netmask;
  /**< Subnet mask for WLAN. */

  qcmap_msgr_dhcp_config dhcp_config;
  /**< WLAN DHCP configuration. */

} qcmap_msgr_wlan_config;

/** Data structure for USB configuration. */
struct
{
  uint32 gw_ip;
   /**< USB gateway IP address. */

  uint32 netmask;
  /**< Subnet mask for USB TE. */

  uint32 usb_ip;
  /**< USB TE IP address. */

  uint32  lease_time;
  /**< DHCP lease time, in seconds.*/

} qcmap_msgr_usb_config;

/** Data structure for WLAN and USB TE configuration present on Access Point*/
struct
{
  qcmap_msgr_wlan_config wlan_config;
  /**< WLAN configuration */

  qcmap_msgr_usb_config usb_config;
  /**< USB TE configuration */

} qcmap_msgr_ap_mode_wlan_usb_ip_config;

/** Data structure for static IP configuration in station mode. */
struct
{
  uint32 ip_addr;
  /**< IP address to be assigned. */

  uint32 gw_ip;
   /**< IP address of the gateway. */

  uint32 netmask;
  /**< Subnet mask. */

  uint32 dns_addr;
  /**< DNS address. */
}qcmap_msgr_sta_static_ip_config;

/** Data structure for adding station mode configuration. */
struct
{
  qcmap_msgr_sta_connection_enum conn_type;
  /**< Connection type. */

  qcmap_msgr_sta_static_ip_config static_ip_config;
  /**< Static IP configuration. Used only when the connection type is static. */

  boolean ap_sta_bridge_mode;
  /**< Used to Set Bridge/Router Mode for AP-STA Configuration */
} qcmap_msgr_station_mode_config;

/** Data structure the reason the WWAN call ends */
struct
{
   qcmap_msgr_wwan_call_end_type_enum wwan_call_end_reason_type;
   /**< WWAN call end type. */

   int32 wwan_call_end_reason_code;
   /**< WWAN call end reason code. */
} qcmap_msgr_wwan_call_end_reason;

/** Data structure for bitrates */
struct
{
   uint64 tx_rate;
   /**< current tx rate. */

   uint64 rx_rate;
   /**< current rx rate. */

   uint64 max_tx_rate;
   /**< max tx rate. */

   uint64 max_rx_rate;
   /**< max rx rate. */
} qcmap_msgr_data_bitrate;

/** Data structure for DHCP reservation. */
struct
{

  uint8 client_mac_addr[QCMAP_MSGR_MAC_ADDR_LEN];
  /**< MAC address of the device. */

  uint32 client_reserved_ip;
   /**< Reserved IP for the AP client. */

  char client_device_name[QCMAP_MSGR_DEVICE_NAME_MAX];
  /**< Device name. */

  boolean  enable_reservation;
  /**< To enable/disable DHCP reservation; boolean value. */

} qcmap_msgr_dhcp_reservation;

struct
{
  qcmap_msgr_pcscf_info_type pcscf_info_type;
  /**< Identifies the type of PCSCF information contained*/

  uint32 pcscf_ip_addr;
  /**< Identifies the PCSCF IP address */

  char pcscf_fqdn[QCMAP_MSGR_PCSCF_FQDN_MAX_LENGTH];
  /**< Identifies the default PCSCF FQDN */
} qcmap_msgr_sip_server_info;

struct
{
  uint8 client_mac_addr[QCMAP_MSGR_MAC_ADDR_LEN];
  /**< MAC address of the device. */

  qcmap_msgr_device_type_enum device_type;
  /**< Device type primary AP/guest AP/USB client. */

  char host_name[QCMAP_MSGR_DEVICE_NAME_MAX];
  /**< Host name of dynamically IP allocated WLAN/USB clients. */

  uint32 lease_expiry_time;
  /**< Lease expiry time in minutes for dynamically IP allocated WLAN/USB clients. */

  uint32 ipv4_addr;
  /**< IPv4 address of the client. */

  uint8 ll_ipv6_addr[QCMAP_MSGR_IPV6_ADDR_LEN];
  /**< Link Local IPv6 address of the client. */

  uint8 ipv6_addr[QCMAP_MSGR_IPV6_ADDR_LEN];
  /**< IPv6 address of the client. */
}qcmap_msgr_connected_device_info;

struct
{
  qcmap_msgr_pcscf_info_type pcscf_info_type;
  /**< Identifies the type of PCSCF information contained */

  uint8 pcscf_ipv6_addr[QCMAP_MSGR_IPV6_ADDR_LEN];
  /**< Identifies the PCSCF IP6 address */

  char pcscf_fqdn[QCMAP_MSGR_PCSCF_FQDN_MAX_LENGTH];
  /**< Identifies the PCSCF FQDN */
} qcmap_msgr_ipv6_sip_server_info;

//============================================================================
/** @COMMAND QMI_QCMAP_MSGR_MOBILE_AP_ENABLE
    @BRIEF Enables the mobile AP functionality via a single mobile AP instance
    on the ARM\reg Cortex\tmns-A5 processor.

    @CMD_VERSION 1.0
    @USAGE Production
    @SECURITY_LEVEL  High risk
    @REQUIRED_ACTION Default
*/
//============================================================================

//! @MSG     QMI_QCMAP_MSGR_MOBILE_AP_ENABLE_REQ
//! @TYPE    Request
//! @SENDER  Control point
//----------------------------------------------------------------------------
message {
} qcmap_msgr_mobile_ap_enable_req_msg;

//! @MSG     QMI_QCMAP_MSGR_MOBILE_AP_ENABLE_RESP
//! @TYPE    Response
//! @SENDER  Service
//----------------------------------------------------------------------------
message {
  //! Result Code
  //! @VERSION_INTRODUCED 1.0
  //! @VERSION 1.0
  mandatory qmi_response_type resp;

  //! Mobile AP Handle
  //! @VERSION_INTRODUCED 1.0
  //! @VERSION 1.0
  optional uint32 mobile_ap_handle;
  /**< Handle identifying the mobile AP call instance.
       The mobile AP handle must be retained by the control point and
       specified in all mobile AP-specific QCMAP_MSGR messages. For example,
       QMI_QCMAP_MSGR_ MOBILE_AP_ DISABLE, QMI_ QCMAP_MSGR_BRING_UP_WWAN, etc.
       The mobile_ap_handle can be a handle from a previous successful
       mobile AP call activation. */
/* techpubs: spaces after _s for formatting.  */

} qcmap_msgr_mobile_ap_enable_resp_msg;

/** @ERROR
    -QMI_ERR_NONE              No error in the request
    -QMI_ERR_INTERNAL          Unexpected error occurred during processing
    -QMI_ERR_MALFORMED_MSG     Message was not formulated correctly by the
                               control point or the message was corrupted
                               during transmission
    -QMI_ERR_MISSING_ARG       One or more required TLVs were missing in the request
    -QMI_ERR_NOT_SUPPORTED     Operation is not supported
*/

/** @DESCRIPTION
    This command enables the mobile AP functionality on the Cortex-A5 processor. The control
    point passes the network policy that is used to bring up the WWAN when
    QMI_QCMAP_MSGR_BRING_UP_WWAN is called. After
    QMI_QCMAP_MSGR_MOBILE_AP_ENABLE is successfully processed, any subsequent
    RmNet call using the same network policy is brought up in the mobile AP
    mode. If the IP family is QCMAP_MSGR_IP_FAMILY_V4, the control point must fill in
    the optional IP Address TLV.

    The control point is expected to store the mobile AP handle that is
    returned and to pass it in all mobile AP-specific messages.

    The mobile AP instance enabled by this command remains enabled until
    the control point or client issues a QMI_QCMAP_MSGR_MOBILE_AP_DISABLE_REQ
    request or until the control point disassociates from the service.
*/

//============================================================================
/** @COMMAND QMI_QCMAP_MSGR_MOBILE_AP_DISABLE
    @BRIEF Disables the mobile AP functionality for a mobile AP instance on
           the Cortex-A5 processor.
    @CMD_VERSION 1.0
    @USAGE Production
    @SECURITY_LEVEL  High risk
    @REQUIRED_ACTION Default
*/
//============================================================================

//! @MSG     QMI_QCMAP_MSGR_MOBILE_AP_DISABLE_REQ
//! @TYPE    Request
//! @SENDER  Control point
//----------------------------------------------------------------------------

message {
  //! Mobile AP Handle
  //! @VERSION_INTRODUCED 1.0
  //! @VERSION 1.0
  mandatory uint32 mobile_ap_handle;
  /**< Handle identifying the mobile AP call instance.
       The value must be the handle previously returned by
       QMI_QCMAP_ MSGR_MOBILE_AP_ENABLE_REQ.
  */
/* techpubs: space after _ for formatting. */
} qcmap_msgr_mobile_ap_disable_req_msg;

//! @MSG     QMI_QCMAP_MSGR_MOBILE_AP_DISABLE_RESP
//! @TYPE    Response
//! @SENDER  Service
//----------------------------------------------------------------------------
message {
  //! Result Code
  //! @VERSION_INTRODUCED 1.0
  //! @VERSION 1.0
  mandatory qmi_response_type resp;
} qcmap_msgr_mobile_ap_disable_resp_msg;

/** @ERROR
    -QMI_ERR_NONE              No error in the request
    -QMI_ERR_INTERNAL          Unexpected error occurred during processing
    -QMI_ERR_MALFORMED_MSG     Message was not formulated correctly by the
                               control point or the message was corrupted
                               during transmission
    -QMI_ERR_MISSING_ARG       One or more required TLVs were missing in the request
    -QMI_ERR_INVALID_HANDLE    Mobile AP handle provided in the request
                               is not valid, i.e., it is not assigned to the
                               control point
    -QMI_ERR_NO_EFFECT         Mobile AP instance is already disabled
*/

/** @DESCRIPTION
    This command disables the mobile AP functionality on the Cortex-A5 processor for a single
    mobile AP instance. After the request is successfully processed, the
    ongoing RmNet and WWAN calls (if any) are torn down and subsequent RmNet
    calls are brought up in the non-mobile AP mode. If the WWAN call is active,
    the mobile AP is not disabled and a QMI_ERR_NO_EFFECT error is returned.

    The mobile AP instance associated with the control point can be disabled
    using either this command or when the control point disconnects from the
    QMI_QCMAP_MSGR service. Qualcomm recommends that the client disable the
    mobile AP instances specifically using this command and then proceed by
    disconnecting from the service.

    All NAT-specific functionalities associated with this mobile AP instance
    are disabled when the command is used or when the control point
    disassociates from the QMI_QCMAP_MSGR service. The control point must reactivate
    or set functionalities such as the DMZ, VPN passthrough, static NAT, and
    the firewall after enabling the mobile AP again.
*/

//============================================================================
/** @COMMAND QMI_QCMAP_MSGR_ENABLE_IPV4
    @BRIEF Enables IPv4 and brings up an IPv4 WWAN call if autoconnect is enabled.
    @CMD_VERSION 1.11
    @USAGE Production
    @SECURITY_LEVEL  High risk
    @REQUIRED_ACTION Default
*/
//============================================================================

//! @MSG     QMI_QCMAP_MSGR_ENABLE_IPV4_REQ
//! @TYPE    Request
//! @SENDER  Control point
//----------------------------------------------------------------------------


message {
  //! Mobile AP Handle
  //! @VERSION_INTRODUCED 1.11
  //! @VERSION 1.11
  mandatory uint32 mobile_ap_handle;
  /**< Handle identifying the mobile AP call instance.
       The value must be the handle previously returned by
       QMI_QCMAP_ MSGR_MOBILE_AP_ENABLE_REQ.
  */
  /* techpubs note: space added for table formatting */

} qcmap_msgr_enable_ipv4_req_msg;

//! @MSG     QMI_QCMAP_MSGR_ENABLE_IPV4_RESP
//! @TYPE    Response
//! @SENDER  Service
//----------------------------------------------------------------------------
message {
  //! Result Code
  //! @VERSION_INTRODUCED 1.11
  //! @VERSION 1.11
  mandatory qmi_response_type resp;
} qcmap_msgr_enable_ipv4_resp_msg;

/** @ERROR
    -QMI_ERR_NONE              No error in the request
    -QMI_ERR_INTERNAL          Unexpected error occurred during processing
    -QMI_ERR_MALFORMED_MSG     Message was not formulated correctly by the
                               control point or the message was corrupted
                               during transmission
    -QMI_ERR_MISSING_ARG       One or more required TLVs were missing in the request
    -QMI_ERR_INVALID_HANDLE    Mobile AP handle provided in the request
                               is not valid, i.e., it is not assigned to the
                               control point
    -QMI_ERR_NO_EFFECT         IPv4 is already enabled or a previous request is
                               still in process
*/

/** @DESCRIPTION
    This command enables IPv4 functionality. The IPv4 call is established using
    the stored network policy if autoconnect is enabled.

    The IPv4 WWAN status can be queried using QMI_QCMAP_MSGR_GET_WWAN_STATUS or
    sent as an indication for registered clients.  See QMI_QCMAP_MSGR_WWAN_STATUS_IND_REG
    (Section \ref{idl:WWANStatusIndReg}) for information on registration.

    If the control point issues multiple requests in short intervals,
    a QMI_ERR_NO_EFFECT error is returned indicating that the previous request
    is still in process.
*/

//============================================================================
/** @COMMAND QMI_QCMAP_MSGR_DISABLE_IPV4
    @BRIEF Disables IPv4 and brings down an IPv4 WWAN call if connected.
    @CMD_VERSION 1.11
    @USAGE Production
    @SECURITY_LEVEL  High risk
    @REQUIRED_ACTION Default
*/
//============================================================================

//! @MSG     QMI_QCMAP_MSGR_DISABLE_IPV4_REQ
//! @TYPE    Request
//! @SENDER  Control point
//----------------------------------------------------------------------------


message {
  //! Mobile AP Handle
  //! @VERSION_INTRODUCED 1.11
  //! @VERSION 1.11
  mandatory uint32 mobile_ap_handle;
  /**< Handle identifying the mobile AP call instance.
       The value must be the handle previously returned by
       QMI_QCMAP_ MSGR_MOBILE_AP_ENABLE_REQ.
  */
  /* techpubs note: space added for table formatting */

} qcmap_msgr_disable_ipv4_req_msg;

//! @MSG     QMI_QCMAP_MSGR_DISABLE_IPV4_RESP
//! @TYPE    Response
//! @SENDER  Service
//----------------------------------------------------------------------------
message {
  //! Result Code
  //! @VERSION_INTRODUCED 1.11
  //! @VERSION 1.11
  mandatory qmi_response_type resp;
} qcmap_msgr_disable_ipv4_resp_msg;

/** @ERROR
    -QMI_ERR_NONE              No error in the request
    -QMI_ERR_INTERNAL          Unexpected error occurred during processing
    -QMI_ERR_MALFORMED_MSG     Message was not formulated correctly by the
                               control point or the message was corrupted
                               during transmission
    -QMI_ERR_MISSING_ARG       One or more required TLVs were missing in the request
    -QMI_ERR_INVALID_HANDLE    Mobile AP handle provided in the request
                               is not valid, i.e., it is not assigned to the
                               control point
    -QMI_ERR_NO_EFFECT         IPv4 is already disabled or a previous request is
                               still in process
*/

/** @DESCRIPTION
    This command disables IPv4 functionality. The IPv4 call is brought down
    if it is already connected.

    The WWAN status can be queried using QMI_QCMAP_MSGR_GET_WWAN_STATUS or
    sent as an indication for registered clients.  See QMI_QCMAP_MSGR_WWAN_STATUS_IND_REG
    (Section \ref{idl:WWANStatusIndReg}) for information on registration.

    If the control point issues multiple requests in short intervals,
    a QMI_ERR_NO_EFFECT error is returned indicating that the previous request
    is still in process.
*/

//============================================================================
/** @COMMAND QMI_QCMAP_MSGR_GET_IPV4_STATE
    @BRIEF Queries the IPv4 state.
    @CMD_VERSION 1.11
    @USAGE Production
    @SECURITY_LEVEL  Medium risk
    @REQUIRED_ACTION Default
*/
//============================================================================

//! @MSG     QMI_QCMAP_MSGR_GET_IPV4_STATE_REQ
//! @TYPE    Request
//! @SENDER  Control point
//----------------------------------------------------------------------------
message {

} qcmap_msgr_get_ipv4_state_req_msg ;

//! @MSG     QMI_QCMAP_MSGR_GET_IPV4_STATE_RESP
//! @TYPE    Response
//! @SENDER  Service
//----------------------------------------------------------------------------
message {
  //! Result Code
  //! @VERSION_INTRODUCED 1.11
  //! @VERSION 1.11
  mandatory qmi_response_type resp;

  //! IPv6 State Value
  //! @VERSION_INTRODUCED 1.11
  //! @VERSION 1.11
  optional boolean ipv4_state;
  /**< Indicates whether IPv4 is enabled; boolean value.
  */
} qcmap_msgr_get_ipv4_state_resp_msg;

/** @ERROR
    -QMI_ERR_NONE              No error in the request
    -QMI_ERR_INTERNAL          Unexpected error occurred during processing
    -QMI_ERR_MALFORMED_MSG     Message was not formulated correctly by the
                               control point or the message was corrupted
                               during transmission
    -QMI_ERR_MISSING_ARG       One or more required TLVs were missing in the request
    -QMI_ERR_NOT_SUPPORTED     Operation is not supported
*/

/** @DESCRIPTION
    This command queries whether IPv4 is enabled.
    If the response is true; IPv4 is enabled.
    If the response is false; IPv4 is disabled.
*/


//============================================================================
/** @COMMAND QMI_QCMAP_MSGR_ENABLE_IPV6
    @BRIEF Enables IPv6 and brings up an IPv6 WWAN call if autoconnect is enabled.
    @CMD_VERSION 1.2
    @USAGE Production
    @SECURITY_LEVEL  High risk
    @REQUIRED_ACTION Default
*/
//============================================================================

//! @MSG     QMI_QCMAP_MSGR_ENABLE_IPV6_REQ
//! @TYPE    Request
//! @SENDER  Control point
//----------------------------------------------------------------------------


message {
  //! Mobile AP Handle
  //! @VERSION_INTRODUCED 1.2
  //! @VERSION 1.2
  mandatory uint32 mobile_ap_handle;
  /**< Handle identifying the mobile AP call instance.
       The value must be the handle previously returned by
       QMI_QCMAP_ MSGR_MOBILE_AP_ENABLE_REQ.
  */
  /* techpubs note: space added for table formatting */

} qcmap_msgr_enable_ipv6_req_msg;

//! @MSG     QMI_QCMAP_MSGR_ENABLE_IPV6_RESP
//! @TYPE    Response
//! @SENDER  Service
//----------------------------------------------------------------------------
message {
  //! Result Code
  //! @VERSION_INTRODUCED 1.2
  //! @VERSION 1.2
  mandatory qmi_response_type resp;
} qcmap_msgr_enable_ipv6_resp_msg;

/** @ERROR
    -QMI_ERR_NONE              No error in the request
    -QMI_ERR_INTERNAL          Unexpected error occurred during processing
    -QMI_ERR_MALFORMED_MSG     Message was not formulated correctly by the
                               control point or the message was corrupted
                               during transmission
    -QMI_ERR_MISSING_ARG       One or more required TLVs were missing in the request
    -QMI_ERR_INVALID_HANDLE    Mobile AP handle provided in the request
                               is not valid, i.e., it is not assigned to the
                               control point
    -QMI_ERR_NO_EFFECT         IPv6 is already enabled or a previous request is
                               still in process
*/

/** @DESCRIPTION
    This command enables IPv6 functionality. The IPv6 call is established using
    the stored network policy if autoconnect is enabled.

    The IPv6 WWAN status can be queried using QMI_QCMAP_MSGR_GET_WWAN_STATUS or
    sent as an indication for registered clients.  See QMI_QCMAP_MSGR_WWAN_STATUS_IND_REG
    (Section \ref{idl:WWANStatusIndReg}) for information on registration.

    If the control point issues multiple requests in short intervals,
    a QMI_ERR_NO_EFFECT error is returned indicating that the previous request
    is still in process.
*/

//============================================================================
/** @COMMAND QMI_QCMAP_MSGR_DISABLE_IPV6
    @BRIEF Disables IPv6 and brings down an IPv6 WWAN call if connected.
    @CMD_VERSION 1.2
    @USAGE Production
    @SECURITY_LEVEL  High risk
    @REQUIRED_ACTION Default
*/
//============================================================================

//! @MSG     QMI_QCMAP_MSGR_DISABLE_IPV6_REQ
//! @TYPE    Request
//! @SENDER  Control point
//----------------------------------------------------------------------------


message {
  //! Mobile AP Handle
  //! @VERSION_INTRODUCED 1.2
  //! @VERSION 1.2
  mandatory uint32 mobile_ap_handle;
  /**< Handle identifying the mobile AP call instance.
       The value must be the handle previously returned by
       QMI_QCMAP_ MSGR_MOBILE_AP_ENABLE_REQ.
  */
  /* techpubs note: space added for table formatting */

} qcmap_msgr_disable_ipv6_req_msg;

//! @MSG     QMI_QCMAP_MSGR_DISABLE_IPV6_RESP
//! @TYPE    Response
//! @SENDER  Service
//----------------------------------------------------------------------------
message {
  //! Result Code
  //! @VERSION_INTRODUCED 1.2
  //! @VERSION 1.2
  mandatory qmi_response_type resp;
} qcmap_msgr_disable_ipv6_resp_msg;

/** @ERROR
    -QMI_ERR_NONE              No error in the request
    -QMI_ERR_INTERNAL          Unexpected error occurred during processing
    -QMI_ERR_MALFORMED_MSG     Message was not formulated correctly by the
                               control point or the message was corrupted
                               during transmission
    -QMI_ERR_MISSING_ARG       One or more required TLVs were missing in the request
    -QMI_ERR_INVALID_HANDLE    Mobile AP handle provided in the request
                               is not valid, i.e., it is not assigned to the
                               control point
    -QMI_ERR_NO_EFFECT         IPv6 is already disabled or a previous request is
                               still in process
*/

/** @DESCRIPTION
    This command disables IPv6 functionality. The IPv6 call is brought down
    if it is already connected.

    The WWAN status can be queried using QMI_QCMAP_MSGR_GET_WWAN_STATUS or
    sent as an indication for registered clients.  See QMI_QCMAP_MSGR_WWAN_STATUS_IND_REG
    (Section \ref{idl:WWANStatusIndReg}) for information on registration.

    If the control point issues multiple requests in short intervals,
    a QMI_ERR_NO_EFFECT error is returned indicating that the previous request
    is still in process.
*/

//============================================================================
/** @COMMAND QMI_QCMAP_MSGR_GET_IPV6_STATE
    @BRIEF Queries the IPv6 state.
    @CMD_VERSION 1.4
    @USAGE Production
    @SECURITY_LEVEL  Medium risk
    @REQUIRED_ACTION Default
*/
//============================================================================

//! @MSG     QMI_QCMAP_MSGR_GET_IPV6_STATE_REQ
//! @TYPE    Request
//! @SENDER  Control point
//----------------------------------------------------------------------------
message {

} qcmap_msgr_get_ipv6_state_req_msg ;

//! @MSG     QMI_QCMAP_MSGR_GET_IPV6_STATE_RESP
//! @TYPE    Response
//! @SENDER  Service
//----------------------------------------------------------------------------
message {
  //! Result Code
  //! @VERSION_INTRODUCED 1.4
  //! @VERSION 1.4
  mandatory qmi_response_type resp;

  //! IPv6 State Value
  //! @VERSION_INTRODUCED 1.4
  //! @VERSION 1.4
  optional boolean ipv6_state;
  /**< Indicates whether IPv6 is enabled; boolean value.
  */
} qcmap_msgr_get_ipv6_state_resp_msg;

/** @ERROR
    -QMI_ERR_NONE              No error in the request
    -QMI_ERR_INTERNAL          Unexpected error occurred during processing
    -QMI_ERR_MALFORMED_MSG     Message was not formulated correctly by the
                               control point or the message was corrupted
                               during transmission
    -QMI_ERR_MISSING_ARG       One or more required TLVs were missing in the request
    -QMI_ERR_NOT_SUPPORTED     Operation is not supported
*/

/** @DESCRIPTION
    This command queries whether IPv6 is enabled.
    If the response is true; IPv6 is enabled.
    If the response is false; IPv6 is disabled.


*/

//============================================================================
/** @COMMAND QMI_QCMAP_MSGR_BRING_UP_WWAN
    @BRIEF Invokes bringing up the WWAN from the mobile AP.
    @CMD_VERSION 1.0
    @USAGE Production
    @SECURITY_LEVEL  High risk
    @REQUIRED_ACTION Default
*/
//============================================================================

//! @MSG     QMI_QCMAP_MSGR_BRING_UP_WWAN_REQ
//! @TYPE    Request
//! @SENDER  Control point
//----------------------------------------------------------------------------


message {
  //! Mobile AP Handle
  //! @VERSION_INTRODUCED 1.0
  //! @VERSION 1.0
  mandatory uint32 mobile_ap_handle;
  /**< Handle identifying the mobile AP call instance.
       The value must be the handle previously returned by
       QMI_QCMAP_ MSGR_MOBILE_AP_ENABLE_REQ.
  */
  /* techpubs note: space added for table formatting */

  //! WWAN Call Type
  //! @VERSION_INTRODUCED 1.2
  //! @VERSION 1.2
  optional qcmap_msgr_wwan_call_type call_type;
  /**< Type of WWAN call to be brought up. Values: \n
       @ENUM ()
  */
} qcmap_msgr_bring_up_wwan_req_msg;

//! @MSG     QMI_QCMAP_MSGR_BRING_UP_WWAN_RESP
//! @TYPE    Response
//! @SENDER  Service
//----------------------------------------------------------------------------
message {
  //! Result Code
  //! @VERSION_INTRODUCED 1.0
  //! @VERSION 1.0
  mandatory qmi_response_type resp;

  //! WWAN Connection Status
  //! @VERSION_INTRODUCED 1.0
  //! @VERSION 1.0
  optional qcmap_msgr_wwan_status_enum conn_status;
  /**< WWAN connection status. Values: \n
       @ENUM ()
   */
} qcmap_msgr_bring_up_wwan_resp_msg;

/** @ERROR
    -QMI_ERR_NONE              No error in the request
    -QMI_ERR_INTERNAL          Unexpected error occurred during processing
    -QMI_ERR_MALFORMED_MSG     Message was not formulated correctly by the
                               control point or the message was corrupted
                               during transmission
    -QMI_ERR_MISSING_ARG       One or more required TLVs were missing in the request
    -QMI_ERR_INVALID_HANDLE    Mobile AP handle provided in the request
                               is not valid, i.e., it is not assigned to the
                               control point
    -QMI_ERR_NO_EFFECT         WWAN is already up or a previous request is
                               still in process (WWAN is connecting)
*/

/** @DESCRIPTION
    This command brings up the WWAN connection. The call is established using
    the stored network policy.

    If the response returned is SUCCESS, the corresponding
    QMI_QCMAP_MSGR_BRING_UP_WWAN_IND indication determines that the request
    has been completely processed by the connection manager daemon.

    The WWAN status can be queried using QMI_QCMAP_MSGR_GET_WWAN_STATUS or
    sent as an indication for registered clients.
    See QMI_QCMAP_MSGR_WWAN_STATUS_IND_REG (Section \ref{idl:WWANStatusIndReg}) for
    information on registration.

    If the control point issues multiple requests in short intervals,
    a QMI_ERR_NO_EFFECT error is returned indicating that the previous request
    is still in process.
*/

//============================================================================
/** @COMMAND QMI_QCMAP_MSGR_BRING_UP_WWAN_IND
    @BRIEF Indicates the completion of processing a
           QMI_QCMAP_MSGR_BRING_UP_WWAN_REQ request.
    @CMD_VERSION 1.0
*/

//============================================================================

//! @MSG     QMI_QCMAP_MSGR_BRING_UP_WWAN_IND
//! @TYPE    Indication
//! @SENDER  Service
//! @SCOPE   Unicast
//----------------------------------------------------------------------------

message {
  //! Mobile AP Handle
  //! @VERSION_INTRODUCED 1.0
  //! @VERSION 1.0
  mandatory uint32 mobile_ap_handle;
  /**< Handle identifying the mobile AP call instance.
       The value must be the handle previously returned by
       QMI_QCMAP_ MSGR_MOBILE_AP_ENABLE_REQ.
   */
  /* techpubs note: space added for table formatting */

  //! WWAN Connection Status
  //! @VERSION_INTRODUCED 1.0
  //! @VERSION 1.0
  mandatory qcmap_msgr_wwan_status_enum conn_status;
  /**< WWAN connection status. Values: \n
       @ENUM ()
   */

  //! WWAN Call End Reason
  //! @VERSION_INTRODUCED 1.3
  //! @VERSION 1.18
  optional qcmap_msgr_wwan_call_end_reason wwan_call_end_reason;
  /**< \n For values, refer to \hyperref[Q3]{[Q3]}.
   */
} qcmap_msgr_bring_up_wwan_ind_msg;

/** @DESCRIPTION
    This indication communicates the completion of processing a
    QMI_QCMAP_MSGR_BRING_UP_WWAN_REQ request. If the client registered for
    the QMI_QCMAP_MSGR_WWAN_STATUS_IND indication,
    it receives the corresponding event indication that reports the WWAN
    status. Alternatively, the control point can issue a
    QMI_QCMAP_MSGR_GET_WWAN_STATUS_REQ request to query the current WWAN status.
    The call end type and reason codes are the passed-over values
    from WDS; the description of the values can be found in \hyperref[Q3]{[Q3]}.
*/

//============================================================================
/** @COMMAND QMI_QCMAP_MSGR_TEAR_DOWN_WWAN
    @BRIEF Tears down the WWAN.
    @CMD_VERSION 1.0
    @USAGE Production
    @SECURITY_LEVEL  Low risk
    @REQUIRED_ACTION Default
*/
//============================================================================

//! @MSG     QMI_QCMAP_MSGR_TEAR_DOWN_WWAN_REQ
//! @TYPE    Request
//! @SENDER  Control point
//----------------------------------------------------------------------------
message {
  //! Mobile AP Handle
  //! @VERSION_INTRODUCED 1.0
  //! @VERSION 1.0
  mandatory uint32 mobile_ap_handle;
  /**< Handle identifying the mobile AP call instance.
       The value must be the handle previously returned by
       QMI_QCMAP_ MSGR_MOBILE_AP_ENABLE_REQ.
  */
  /* techpubs note: space added for table formatting */

  //! WWAN Call Type
  //! @VERSION_INTRODUCED 1.2
  //! @VERSION 1.2
  optional qcmap_msgr_wwan_call_type call_type;
  /**< Type of WWAN call to be brought down. Values: \n
       @ENUM ()
  */
} qcmap_msgr_tear_down_wwan_req_msg;

//! @MSG     QMI_QCMAP_MSGR_TEAR_DOWN_WWAN_RESP
//! @TYPE    Response
//! @SENDER  Service
//----------------------------------------------------------------------------
message {
  //! Result Code
  //! @VERSION_INTRODUCED 1.0
  //! @VERSION 1.0
  mandatory qmi_response_type resp;

  //! WWAN Connection Status
  //! @VERSION_INTRODUCED 1.0
  //! @VERSION 1.0
  optional qcmap_msgr_wwan_status_enum conn_status;
  /**< WWAN connection status. Values: \n
       @ENUM ()
   */
} qcmap_msgr_tear_down_wwan_resp_msg;

/** @ERROR
    -QMI_ERR_NONE              No error in the request
    -QMI_ERR_INTERNAL          Unexpected error occurred during processing
    -QMI_ERR_MALFORMED_MSG     Message was not formulated correctly by the
                               control point or the message was corrupted
                               during transmission
    -QMI_ERR_MISSING_ARG       One or more required TLVs were missing in the request
    -QMI_ERR_INVALID_HANDLE    Mobile AP handle provided in the request
                               is not valid, i.e., it is not assigned to the
                               control point
    -QMI_ERR_NO_EFFECT         WWAN is already down or a previous request is
                               still in process (WWAN is disconnecting)
*/

/** @DESCRIPTION
    This command tears down the mobile AP WWAN interface that was brought up
    via QMI_QCMAP_MSGR_BRING_UP_WWAN.

    If the response returned is SUCCESS, the corresponding
    QMI_QCMAP_MSGR_TEAR_DOWN_WWAN_IND indication determines that the request
    has been completely processed by the connection manager daemon.

    The WWAN status can be queried using QMI_QCMAP_MSGR_GET_WWAN_STATUS or
    sent as an indication for registered clients. See
    QMI_QCMAP_MSGR_WWAN_STATUS_IND_REG (Section \ref{idl:WWANStatusIndReg}) for information on
    registration.

    If the control point issues multiple requests in short intervals,
    a QMI_ERR_NO_EFFECT error is returned, indicating that the previous request
    is still in process.
*/

//============================================================================
/** @COMMAND QMI_QCMAP_MSGR_TEAR_DOWN_WWAN_IND
    @BRIEF Indicates the completion of processing a
           QMI_QCMAP_MSGR_TEAR_DOWN_WWAN_REQ request.
    @CMD_VERSION 1.0
*/

//============================================================================

//! @MSG     QMI_QCMAP_MSGR_TEAR_DOWN_WWAN_IND
//! @TYPE    Indication
//! @SENDER  Service
//! @SCOPE   Unicast
//----------------------------------------------------------------------------

message {
  //! Mobile AP Handle
  //! @VERSION_INTRODUCED 1.0
  //! @VERSION 1.0
  mandatory uint32 mobile_ap_handle;
  /**< Handle identifying the mobile AP call instance.
       The value must be the handle previously returned by
       QMI_QCMAP_ MSGR_MOBILE_AP_ENABLE_REQ.
   */
  /* techpubs note: space added for table formatting */

  //! WWAN Connection Status
  //! @VERSION_INTRODUCED 1.0
  //! @VERSION 1.0
  mandatory qcmap_msgr_wwan_status_enum conn_status;
  /**< WWAN connection status. Values: \n
       @ENUM ()
   */

  //! WWAN Call End Reason
  //! @VERSION_INTRODUCED 1.3
  //! @VERSION 1.18
  optional qcmap_msgr_wwan_call_end_reason wwan_call_end_reason;
  /**< \n For possible values, refer to \hyperref[Q3]{[Q3]}.
   */
} qcmap_msgr_tear_down_wwan_ind_msg;

/** @DESCRIPTION
    This indication communicates the completion of processing a
    QMI_QCMAP_MSGR_TEAR_DOWN_WWAN_REQ request.
    If the client registered for the QMI_QCMAP_MSGR_WWAN_STATUS_IND indication,
    it receives the corresponding event indication that reports the WWAN
    status. Alternatively, the control point can issue
    QMI_QCMAP_MSGR_GET_WWAN_STATUS_REQ to query the current WWAN status.
    The call end type and reason codes are the passed-over values
    from WDS; description of the values can be found in \hyperref[Q3]{[Q3]}.
*/

//============================================================================
/** @COMMAND QMI_QCMAP_MSGR_WWAN_STATUS_IND_REG
    @BRIEF Registers or deregisters the control point to receive
           QMI_QCMAP_MSGR_ WWAN_STATUS_IND. \label{idl:WWANStatusIndReg}
    @CMD_VERSION 1.0
    @USAGE Production
    @SECURITY_LEVEL  Low risk
    @REQUIRED_ACTION Default
*/
/* techpubs note: space added after underscore for table formatting. */
//============================================================================

//! @MSG     QMI_QCMAP_MSGR_WWAN_STATUS_IND_REG_REQ
//! @TYPE    Request
//! @SENDER  Control point
//----------------------------------------------------------------------------

message {
  //! Register Indication
  //! @VERSION_INTRODUCED 1.0
  //! @VERSION 1.0
  mandatory boolean register_indication;
  /**< Specifies the registration. Values: \n
       - 0 -- Do not register or deregister the control point if already registered \n
       - 1 -- Register for the indication; ignore if already registered
  */

} qcmap_msgr_wwan_status_ind_register_req_msg;


//! @MSG     QMI_QCMAP_MSGR_WWAN_STATUS_IND_REG_RESP
//! @TYPE    Response
//! @SENDER  Service
//----------------------------------------------------------------------------

message {
  //! Result Code
  //! @VERSION_INTRODUCED 1.0
  //! @VERSION 1.0
  mandatory qmi_response_type resp;

} qcmap_msgr_wwan_status_ind_register_resp_msg;

/** @ERROR
    -QMI_ERR_NONE              No error in the request
    -QMI_ERR_INTERNAL          Unexpected error occurred during processing
    -QMI_ERR_MALFORMED_MSG     Message was not formulated correctly by the
                               control point or the message was corrupted
                               during transmission
    -QMI_ERR_INVALID_HANDLE    Mobile AP handle provided in the request
                               is not valid, i.e., it is not assigned to the
                               control point
    -QMI_ERR_NO_MEMORY         Device could not allocate memory to formulate a
                               response
    -QMI_ERR_MISSING_ARG       One or more required TLVs were missing in the request
*/

/** @DESCRIPTION
    This command registers or deregisters the control point to receive the
    QMI_QCMAP_MSGR_WWAN_STATUS_IND indication.
*/
/* Techpubs note: spaces added after underscores for formatting. */

//============================================================================
/** @COMMAND QMI_QCMAP_MSGR_WWAN_STATUS_IND
    @BRIEF Indicates a change in the current mobile AP WWAN connection status.
    @CMD_VERSION 1.0
    @USAGE Production
    @SECURITY_LEVEL  Medium risk
    @REQUIRED_ACTION Default
*/
//============================================================================

//! @MSG     QMI_QCMAP_MSGR_WWAN_STATUS_IND
//! @TYPE    Indication
//! @SENDER  Service
//! @SCOPE   Unicast
//----------------------------------------------------------------------------

message {
  //! Mobile AP Handle
  //! @VERSION_INTRODUCED 1.0
  //! @VERSION 1.0
  mandatory uint32 mobile_ap_handle;
  /**< Handle identifying the mobile AP call instance.
       The value must be the handle previously returned by
        QMI_QCMAP_ MSGR_MOBILE_AP_ENABLE_REQ.
   */
   /* techpubs note: space added for table formatting */

  //! Packet Service Status
  //! @VERSION_INTRODUCED 1.0
  //! @VERSION 1.0
  mandatory qcmap_msgr_wwan_status_enum wwan_status;
  /**< Indicates the WWAN status. Values: \n
       @ENUM ()
  */

  //! WWAN Call End Reason
  //! @VERSION_INTRODUCED 1.3
  //! @VERSION 1.18
  optional qcmap_msgr_wwan_call_end_reason wwan_call_end_reason;
  /**< \n For possible values, refer to \hyperref[Q3]{[Q3]}.
   */
} qcmap_msgr_wwan_status_ind_msg;

/** @DESCRIPTION
    This indication communicates changes in the WWAN state.
    The call end type and reason codes are the passed over values
    from WDS, the description of the values can be found in Appendix B of \hyperref[Q3]{[Q3]}.
*/

//============================================================================
/** @COMMAND QMI_QCMAP_MSGR_MOBILE_AP_STATUS_IND_REG
    @BRIEF Registers or deregisters the control point to receive
           QMI_QCMAP_MSGR_MOBILE_AP_STATUS_IND.
    @CMD_VERSION 1.0
    @USAGE Production
    @SECURITY_LEVEL  Low risk
    @REQUIRED_ACTION Default
*/

//============================================================================

//! @MSG     QMI_QCMAP_MSGR_MOBILE_AP_STATUS_IND_REG_REQ
//! @TYPE    Request
//! @SENDER  Control point
//----------------------------------------------------------------------------

message {
  //! Register Indication
  //! @VERSION_INTRODUCED 1.0
  //! @VERSION 1.0
  mandatory boolean register_indication;
  /**< Specifies the registration. Values: \n
       - 0 -- Do not register or deregister the control point if already registered \n
       - 1 -- Register for the indication; ignore if already registered
  */

} qcmap_msgr_mobile_ap_status_ind_register_req_msg;


//! @MSG     QMI_QCMAP_MSGR_MOBILE_AP_STATUS_IND_REG_RESP
//! @TYPE    Response
//! @SENDER  Service
//----------------------------------------------------------------------------

message {
  //! Result Code
  //! @VERSION_INTRODUCED 1.0
  //! @VERSION 1.0
  mandatory qmi_response_type resp;

} qcmap_msgr_mobile_ap_status_ind_register_resp_msg;

/** @ERROR
    -QMI_ERR_NONE              No error in the request
    -QMI_ERR_INTERNAL          Unexpected error occurred during processing
    -QMI_ERR_MALFORMED_MSG     Message was not formulated correctly by the
                               control point or the message was corrupted
                               during transmission
    -QMI_ERR_INVALID_HANDLE    Mobile AP handle provided in the request
                               is not valid, i.e., it is not assigned to the
                               control point
    -QMI_ERR_NO_MEMORY         Device could not allocate memory to formulate a
                               response
    -QMI_ERR_MISSING_ARG       One or more required TLVs were missing in the request
*/

/** @DESCRIPTION
    This command registers or deregisters the control point to receive the
    QMI_QCMAP_MSGR_MOBILE_AP_STATUS_IND indication.
*/

//============================================================================
/** @COMMAND QMI_QCMAP_MSGR_MOBILE_AP_STATUS_IND
    @BRIEF Indicates a change in the current mobile AP status.
    @CMD_VERSION 1.0
    @USAGE Production
    @SECURITY_LEVEL  Low risk
    @REQUIRED_ACTION Default
*/
//============================================================================

//! @MSG     QMI_QCMAP_MSGR_MOBILE_AP_STATUS_IND
//! @TYPE    Indication
//! @SENDER  Service
//! @SCOPE   Unicast
//----------------------------------------------------------------------------

message {
  //! Mobile AP Handle
  //! @VERSION_INTRODUCED 1.0
  //! @VERSION 1.0
  mandatory uint32 mobile_ap_handle;
  /**< Handle identifying the mobile AP call instance.
       The value must be the handle previously returned by
       QMI_QCMAP_ MSGR_MOBILE_AP_ENABLE_REQ.
   */
  /* techpubs note: space added for table formatting */

  //! Mobile AP Status
  //! @VERSION_INTRODUCED 1.0
  //! @VERSION 1.0
  mandatory qcmap_msgr_mobile_ap_status_enum mobile_ap_status;
  /**< Indicates the mobile AP status. Values: \n
       @ENUM ()
  */
} qcmap_msgr_mobile_ap_status_ind_msg;

/** @DESCRIPTION
    This indication communicates changes in the mobile AP state.
*/

//============================================================================
/** @COMMAND QMI_QCMAP_MSGR_STATION_MODE_STATUS_IND_REG
    @BRIEF Registers or deregisters the control point to receive
           QMI_QCMAP_MSGR_STATION_MODE_STATUS_IND.
    @CMD_VERSION 1.7
    @USAGE Production
    @SECURITY_LEVEL  Low risk
    @REQUIRED_ACTION Default
*/

//============================================================================

//! @MSG     QMI_QCMAP_MSGR_STATION_MODE_STATUS_IND_REG_REQ
//! @TYPE    Request
//! @SENDER  Control point
//----------------------------------------------------------------------------

message {
  //! Register Indication
  //! @VERSION_INTRODUCED 1.7
  //! @VERSION 1.7
  mandatory boolean register_indication;
  /**< Specifies the registration. Values: \n
       - 0 -- Do not register or deregister the control point if already registered \n
       - 1 -- Register for the indication; ignore if already registered
  */

} qcmap_msgr_station_mode_status_ind_register_req_msg;

//! @MSG     QMI_QCMAP_MSGR_STATION_MODE_STATUS_IND_REG_RESP
//! @TYPE    Response
//! @SENDER  Service
//----------------------------------------------------------------------------

message {
  //! Result Code
  //! @VERSION_INTRODUCED 1.7
  //! @VERSION 1.7
  mandatory qmi_response_type resp;

} qcmap_msgr_station_mode_status_ind_register_resp_msg;

/** @ERROR
    -QMI_ERR_NONE              No error in the request
    -QMI_ERR_INTERNAL          Unexpected error occurred during processing
    -QMI_ERR_MALFORMED_MSG     Message was not formulated correctly by the
                               control point or the message was corrupted
                               during transmission
    -QMI_ERR_NO_MEMORY         Device could not allocate memory to formulate a
                               response
    -QMI_ERR_MISSING_ARG       One or more required TLVs were missing in the request
*/

/** @DESCRIPTION
    This command registers or deregisters the control point to receive the
    QMI_QCMAP_MSGR_STATION_MODE_STATUS_IND indication.
*/

//============================================================================
/** @COMMAND QMI_QCMAP_MSGR_STATION_MODE_STATUS_IND
    @BRIEF Indicates a change in the current station mode status.
    @CMD_VERSION 1.7
    @USAGE Production
    @SECURITY_LEVEL  Low risk
    @REQUIRED_ACTION Default
*/
//============================================================================

//! @MSG     QMI_QCMAP_MSGR_STATION_MODE_STATUS_IND
//! @TYPE    Indication
//! @SENDER  Service
//! @SCOPE   Unicast
//----------------------------------------------------------------------------

message {
  //! Mobile AP Handle
  //! @VERSION_INTRODUCED 1.7
  //! @VERSION 1.7
  mandatory uint32 mobile_ap_handle;
  /**< Handle identifying the mobile AP call instance.
       The value must be the handle previously returned by
       QMI_QCMAP_ MSGR_MOBILE_AP_ENABLE_REQ.
   */
  /* techpubs note: space added for table formatting */

  //! Station Mode Status
  //! @VERSION_INTRODUCED 1.7
  //! @VERSION 1.7
  mandatory qcmap_msgr_station_mode_status_enum station_mode_status;
  /**< Indicates the mobile AP status. Values: \n
       @ENUM ()
  */
} qcmap_msgr_station_mode_status_ind_msg;

/** @DESCRIPTION
    This indication communicates changes in the station mode.
*/

//============================================================================
/** @COMMAND QMI_QCMAP_MSGR_ENABLE_WLAN
    @BRIEF Enables the WLAN.
    @CMD_VERSION 1.0
    @USAGE Production
    @SECURITY_LEVEL  High risk
    @REQUIRED_ACTION Default
*/
//============================================================================

//! @MSG     QMI_QCMAP_MSGR_ENABLE_WLAN_REQ
//! @TYPE    Request
//! @SENDER  Control point
//----------------------------------------------------------------------------
message {
  //! Mobile AP Handle
  //! @VERSION_INTRODUCED 1.10
  //! @VERSION 1.10
  mandatory uint32 mobile_ap_handle;
  /**< Handle identifying the mobile AP call instance.
       The value must be the handle previously returned by
       QMI_QCMAP_MSGR_MOBILE_AP_ENABLE_REQ.
  */

  //! Privileged Client.
  //! @VERSION_INTRODUCED 1.26
  //! @VERSION 1.26
  optional boolean privileged_client;
  /**< This flag indicates that the client who is trying to
       EnableWLAN is a privileged client which can access
       without enabling MobileAP.
  */
} qcmap_msgr_enable_wlan_req_msg;

//! @MSG     QMI_QCMAP_MSGR_ENABLE_WLAN_RESP
//! @TYPE    Response
//! @SENDER  Service
//----------------------------------------------------------------------------
message {
  //! Result Code
  //! @VERSION_INTRODUCED 1.0
  //! @VERSION 1.0
  mandatory qmi_response_type resp;
} qcmap_msgr_enable_wlan_resp_msg;

/** @ERROR
    -QMI_ERR_NONE              No error in the request
    -QMI_ERR_INTERNAL          Unexpected error occurred during processing
    -QMI_ERR_MALFORMED_MSG     Message was not formulated correctly by the
                               control point or the message was corrupted
                               during transmission
    -QMI_ERR_MISSING_ARG       One or more required TLVs were missing in the request
    -QMI_ERR_NOT_SUPPORTED     Operation is not supported
    -QMI_ERR_NO_EFFECT         WLAN is already enabled
*/

/** @DESCRIPTION
    This command enables the WLAN functionality controlled by the service.
*/

//============================================================================
/** @COMMAND QMI_QCMAP_MSGR_DISABLE_WLAN
    @BRIEF Disables the WLAN.
    @CMD_VERSION 1.0
    @USAGE Production
    @SECURITY_LEVEL  High risk
    @REQUIRED_ACTION Default
*/
//============================================================================

//! @MSG     QMI_QCMAP_MSGR_DISABLE_WLAN_REQ
//! @TYPE    Request
//! @SENDER  Control point
//----------------------------------------------------------------------------
message {
  //! Mobile AP Handle
  //! @VERSION_INTRODUCED 1.10
  //! @VERSION 1.10
  mandatory uint32 mobile_ap_handle;
  /**< Handle identifying the mobile AP call instance.
       The value must be the handle previously returned by
       QMI_QCMAP_MSGR_MOBILE_AP_ENABLE_REQ.
  */

  //! Privileged Client.
  //! @VERSION_INTRODUCED 1.26
  //! @VERSION 1.26
  optional boolean privileged_client;
  /**< This flag indicates that the client who is trying to
       DisableWLAN is a privileged client which can access
       without enabling MobileAP.
  */
} qcmap_msgr_disable_wlan_req_msg;

//! @MSG     QMI_QCMAP_MSGR_DISABLE_WLAN_RESP
//! @TYPE    Response
//! @SENDER  Service
//------------------------------------------------------------------------
message {
  //! Result Code
  //! @VERSION_INTRODUCED 1.0
  //! @VERSION 1.0
  mandatory qmi_response_type resp;
} qcmap_msgr_disable_wlan_resp_msg;

/** @ERROR
    -QMI_ERR_NONE              No error in the request
    -QMI_ERR_INTERNAL          Unexpected error occurred during processing
    -QMI_ERR_MALFORMED_MSG     Message was not formulated correctly by the
                               control point or the message was corrupted
                               during transmission
    -QMI_ERR_MISSING_ARG       One or more required TLVs were missing in the request
    -QMI_ERR_NOT_SUPPORTED     Operation is not supported
    -QMI_ERR_NO_EFFECT         Mobile AP instance is already enabled
*/

/** @DESCRIPTION
    This command disables the WLAN functionality.
*/

//============================================================================
/** @COMMAND QMI_QCMAP_MSGR_ADD_STATIC_NAT_ENTRY
    @BRIEF Adds a static NAT entry.
    @CMD_VERSION 1.0
    @USAGE Production
    @SECURITY_LEVEL  High risk
    @REQUIRED_ACTION Default
*/
//============================================================================

//! @MSG     QMI_QCMAP_MSGR_ADD_STATIC_NAT_ENTRY_REQ
//! @TYPE    Request
//! @SENDER  Control point
//----------------------------------------------------------------------------

message {
  //! Mobile AP Handle
  //! @VERSION_INTRODUCED 1.0
  //! @VERSION 1.0
  mandatory uint32 mobile_ap_handle;
  /**< Handle identifying the mobile AP call instance.
       The value must be the handle previously returned by
       QMI_QCMAP_ MSGR_MOBILE_AP_ENABLE_REQ.
  */
  /* techpubs note: space added for table formatting */

  //! SNAT Entry Configuration
  //! @VERSION_INTRODUCED 1.0
  //! @VERSION 1.0
  mandatory qcmap_msgr_snat_entry_config snat_entry_config;

} qcmap_msgr_add_static_nat_entry_req_msg;

//! @MSG     QMI_QCMAP_MSGR_ADD_STATIC_NAT_ENTRY_RESP
//! @TYPE    Response
//! @SENDER  Service
//----------------------------------------------------------------------------
message {
  //! Result Code
  //! @VERSION_INTRODUCED 1.0
  //! @VERSION 1.0
  mandatory qmi_response_type resp;

} qcmap_msgr_add_static_nat_entry_resp_msg;

/** @ERROR
    -QMI_ERR_NONE              No error in the request
    -QMI_ERR_INTERNAL          Unexpected error occurred during processing
    -QMI_ERR_MALFORMED_MSG     Message was not formulated correctly by the
                               control point or the message was corrupted
                               during transmission
    -QMI_ERR_MISSING_ARG       One or more required TLVs were missing in the request
    -QMI_ERR_INVALID_HANDLE    Mobile AP handle provided in the request
                               is not valid, i.e., it is not assigned to the
                               control point
    -QMI_ERR_INVALID_ARG       Argument is not correct
    -QMI_ERR_NOT_SUPPORTED     Operation is not supported
    -QMI_ERR_MAX_LIMIT_REACHED Maximum limit was reached for the static NAT
                               entry
    -QMI_ERR_DUPLICATE_ENTRY   Entry already exists
*/

/** @DESCRIPTION
    This command adds a static NAT entry.
*/

//============================================================================
/** @COMMAND QMI_QCMAP_MSGR_DELETE_STATIC_NAT_ENTRY
    @BRIEF Deletes a static NAT entry.
    @CMD_VERSION 1.0
    @USAGE Production
    @SECURITY_LEVEL  High risk
    @REQUIRED_ACTION Default
*/
//============================================================================

//! @MSG     QMI_QCMAP_MSGR_DELETE_STATIC_NAT_ENTRY_REQ
//! @TYPE    Request
//! @SENDER  Control point
//----------------------------------------------------------------------------
message {
  //! Mobile AP Handle
  //! @VERSION_INTRODUCED 1.0
  //! @VERSION 1.0
  mandatory uint32 mobile_ap_handle;
  /**< Handle identifying the mobile AP call instance.
       The value must be the handle previously returned by
       QMI_QCMAP_ MSGR_MOBILE_AP_ENABLE_REQ.
  */
  /* techpubs note: space added for table formatting */

  //! SNAT Entry Configuration
  //! @VERSION_INTRODUCED 1.0
  //! @VERSION 1.0
  mandatory qcmap_msgr_snat_entry_config snat_entry_config;

} qcmap_msgr_delete_static_nat_entry_req_msg;

//! @MSG     QMI_QCMAP_MSGR_DELETE_STATIC_NAT_ENTRY_RESP
//! @TYPE    Response
//! @SENDER  Service
//----------------------------------------------------------------------------
message {
  //! Result Code
  //! @VERSION_INTRODUCED 1.0
  //! @VERSION 1.0
  mandatory qmi_response_type resp;

} qcmap_msgr_delete_static_nat_entry_resp_msg;

/** @ERROR
    -QMI_ERR_NONE              No error in the request
    -QMI_ERR_INTERNAL          Unexpected error occurred during processing
    -QMI_ERR_MALFORMED_MSG     Message was not formulated correctly by the
                               control point or the message was corrupted
                               during transmission
    -QMI_ERR_MISSING_ARG       One or more required TLVs were missing in the request
    -QMI_ERR_INVALID_HANDLE    Mobile AP handle provided in the request
                               is not valid, i.e., it is not assigned to the
                               control point
    -QMI_ERR_INVALID_ARG       Argument is not correct
    -QMI_ERR_NOT_SUPPORTED     Operation is not supported
    -QMI_ERR_NO_ENTRY          Entry was not found
*/

/** @DESCRIPTION
    This command deletes a static NAT entry.
*/

//============================================================================
/** @COMMAND QMI_QCMAP_MSGR_GET_STATIC_NAT_ENTRIES
    @BRIEF Queries all static NAT entries.
    @CMD_VERSION 1.0
    @USAGE Production
    @SECURITY_LEVEL  Medium risk
    @REQUIRED_ACTION Default
*/
//============================================================================

//! @MSG     QMI_QCMAP_MSGR_GET_STATIC_NAT_ENTRIES_REQ
//! @TYPE    Request
//! @SENDER  Control point
//----------------------------------------------------------------------------
message {
  //! Mobile AP Handle
  //! @VERSION_INTRODUCED 1.0
  //! @VERSION 1.0
  mandatory uint32 mobile_ap_handle;
  /**< Handle identifying the mobile AP call instance.
       The value must be the handle previously returned by
       QMI_QCMAP_ MSGR_MOBILE_AP_ENABLE_REQ.
  */
  /* techpubs note: space added for table formatting */

} qcmap_msgr_get_static_nat_entries_req_msg;

//! @MSG     QMI_QCMAP_MSGR_GET_STATIC_NAT_ENTRIES_RESP
//! @TYPE    Response
//! @SENDER  Service
//----------------------------------------------------------------------------
message {
  //! Result Code
  //! @VERSION_INTRODUCED 1.0
  //! @VERSION 1.0
  mandatory qmi_response_type resp;

  //! SNAT Configuration
  //! @VERSION_INTRODUCED 1.0
  //! @VERSION 1.0
  optional qcmap_msgr_snat_entry_config snat_config<QCMAP_MSGR_MAX_SNAT_ENTRIES>;

} qcmap_msgr_get_static_nat_entries_resp_msg;

/** @ERROR
    -QMI_ERR_NONE              No error in the request
    -QMI_ERR_INTERNAL          Unexpected error occurred during processing
    -QMI_ERR_MALFORMED_MSG     Message was not formulated correctly by the
                               control point or the message was corrupted
                               during transmission
    -QMI_ERR_MISSING_ARG       One or more required TLVs were missing in the request
    -QMI_ERR_INVALID_HANDLE    Mobile AP handle provided in the request
                               is not valid, i.e., it is not assigned to the
                               control point
    -QMI_ERR_INVALID_ARG       Argument is not correct
    -QMI_ERR_NOT_SUPPORTED     Operation is not supported
*/

/** @DESCRIPTION
    This command queries all static NAT entries. The response message
    contains the number of entries followed by the value of these entries
    sequentially.
*/

//============================================================================
/** @COMMAND QMI_QCMAP_MSGR_SET_DMZ
    @BRIEF Sets the DMZ (perimeter network) IP address for the mobile AP.
    @CMD_VERSION 1.0
    @USAGE Production
    @SECURITY_LEVEL  High risk
    @REQUIRED_ACTION Default
*/
//============================================================================

//! @MSG     QMI_QCMAP_MSGR_SET_DMZ_REQ
//! @TYPE    Request
//! @SENDER  Control point
//----------------------------------------------------------------------------
message {
  //! Mobile AP Handle
  //! @VERSION_INTRODUCED 1.0
  //! @VERSION 1.0
  mandatory uint32 mobile_ap_handle;
  /**< Handle identifying the mobile AP call instance.
       The value must be the handle previously returned by
       QMI_QCMAP_ MSGR_MOBILE_AP_ENABLE_REQ.
  */
  /* techpubs note: space added for table formatting */


  //! DMZ IP Address
  //! @VERSION_INTRODUCED 1.0
  //! @VERSION 1.0
  mandatory uint32 dmz_ip_addr;
  /**< DMZ IP address. */

} qcmap_msgr_set_dmz_req_msg;

//! @MSG     QMI_QCMAP_MSGR_SET_DMZ_RESP
//! @TYPE    Response
//! @SENDER  Service
//----------------------------------------------------------------------------
message {
  //! Result Code
  //! @VERSION_INTRODUCED 1.0
  //! @VERSION 1.0
  mandatory qmi_response_type resp;

} qcmap_msgr_set_dmz_resp_msg;

/** @ERROR
    -QMI_ERR_NONE              No error in the request
    -QMI_ERR_INTERNAL          Unexpected error occurred during processing
    -QMI_ERR_MALFORMED_MSG     Message was not formulated correctly by the
                               control point or the message was corrupted
                               during transmission
    -QMI_ERR_MISSING_ARG       One or more required TLVs were missing in the request
    -QMI_ERR_INVALID_HANDLE    Mobile AP handle provided in the request
                               is not valid, i.e., it is not assigned to the
                               control point
    -QMI_ERR_INVALID_ARG       Argument is not correct
    -QMI_ERR_NOT_SUPPORTED     Operation is not supported
*/

/** @DESCRIPTION
    This command sets the DMZ IP address for the mobile AP.
*/

//============================================================================
/** @COMMAND QMI_QCMAP_MSGR_GET_DMZ
    @BRIEF Queries the DMZ IP address on the mobile AP.
    @CMD_VERSION 1.0
    @USAGE Production
    @SECURITY_LEVEL  Medium risk
    @REQUIRED_ACTION Default
*/
//============================================================================

//! @MSG     QMI_QCMAP_MSGR_GET_DMZ_REQ
//! @TYPE    Request
//! @SENDER  Control point
//----------------------------------------------------------------------------
message {
  //! Mobile AP Handle
  //! @VERSION_INTRODUCED 1.0
  //! @VERSION 1.0
  mandatory uint32 mobile_ap_handle;
  /**< Handle identifying the mobile AP call instance.
       The value must be the handle previously returned by
       QMI_QCMAP_ MSGR_MOBILE_AP_ENABLE_REQ.
  */
  /* techpubs note: space added for table formatting */

} qcmap_msgr_get_dmz_req_msg;

//! @MSG     QMI_QCMAP_MSGR_GET_DMZ_RESP
//! @TYPE    Response
//! @SENDER  Service
//----------------------------------------------------------------------------
message {
  //! Result Code
  //! @VERSION_INTRODUCED 1.0
  //! @VERSION 1.0
  mandatory qmi_response_type resp;

  //! DMZ IP Address
  //! @VERSION_INTRODUCED 1.0
  //! @VERSION 1.0
  optional uint32 dmz_ip_addr;
  /**< DMZ IP address. */

} qcmap_msgr_get_dmz_resp_msg;

/** @ERROR
    -QMI_ERR_NONE              No error in the request
    -QMI_ERR_INTERNAL          Unexpected error occurred during processing
    -QMI_ERR_MALFORMED_MSG     Message was not formulated correctly by the
                               control point or the message was corrupted
                               during transmission
    -QMI_ERR_MISSING_ARG       One or more required TLVs were missing in the request
    -QMI_ERR_INVALID_HANDLE    Mobile AP handle provided in the request
                               is not valid, i.e., it is not assigned to the
                               control point
    -QMI_ERR_INVALID_ARG       Argument is not correct
    -QMI_ERR_NOT_SUPPORTED     Operation is not supported
*/

/** @DESCRIPTION
    This command queries the DMZ entry that was previously set with the
    QMI_QCMAP_MSGR_SET_DMZ command.

    If no DMZ is set by the client, an IP address of 0.0.0.0 is returned.
*/


//============================================================================
/** @COMMAND QMI_QCMAP_MSGR_DELETE_DMZ
    @BRIEF Deletes the DMZ entry or DMZ IP address.
    @CMD_VERSION 1.0
    @USAGE Production
    @SECURITY_LEVEL  High risk
    @REQUIRED_ACTION Default
*/
//============================================================================

//! @MSG     QMI_QCMAP_MSGR_DELETE_DMZ_REQ
//! @TYPE    Request
//! @SENDER  Control point
//----------------------------------------------------------------------------
message {
  //! Mobile AP Handle
  //! @VERSION_INTRODUCED 1.0
  //! @VERSION 1.0
  mandatory uint32 mobile_ap_handle;
  /**< Handle identifying the mobile AP call instance.
       The value must be the handle previously returned by
       QMI_QCMAP_ MSGR_MOBILE_AP_ENABLE_REQ.
  */
  /* techpubs note: space added for table formatting */

} qcmap_msgr_delete_dmz_req_msg;

//! @MSG     QMI_QCMAP_MSGR_DELETE_DMZ_RESP
//! @TYPE    Response
//! @SENDER  Service
//----------------------------------------------------------------------------
message {
  //! Result Code
  //! @VERSION_INTRODUCED 1.0
  //! @VERSION 1.0
  mandatory qmi_response_type resp;

} qcmap_msgr_delete_dmz_resp_msg;

/** @ERROR
    -QMI_ERR_NONE              No error in the request
    -QMI_ERR_INTERNAL          Unexpected error occurred during processing
    -QMI_ERR_MALFORMED_MSG     Message was not formulated correctly by the
                               control point or the message was corrupted
                               during transmission
    -QMI_ERR_MISSING_ARG       One or more required TLVs were missing in the request
    -QMI_ERR_INVALID_HANDLE    Mobile AP handle provided in the request
                               is not valid, i.e., it is not assigned to the
                               control point
    -QMI_ERR_INVALID_ARG       Argument is not correct
    -QMI_ERR_NOT_SUPPORTED     Operation is not supported
*/

/** @DESCRIPTION
    This command deletes the DMZ entry that was previously set with the
    QMI_QCMAP_MSGR_SET_DMZ command.
*/

//============================================================================
/** @COMMAND QMI_QCMAP_MSGR_GET_WWAN_STATS
    @BRIEF Gets WWAN statistics.
    @CMD_VERSION 1.0
    @USAGE Production
    @SECURITY_LEVEL  High risk
    @REQUIRED_ACTION Default
*/
//============================================================================

//! @MSG     QMI_QCMAP_MSGR_GET_WWAN_STATS_REQ
//! @TYPE    Request
//! @SENDER  Control point
//----------------------------------------------------------------------------

message {
  //! Mobile AP Handle
  //! @VERSION_INTRODUCED 1.0
  //! @VERSION 1.0
  mandatory uint32 mobile_ap_handle;
  /**< Handle identifying the mobile AP call instance.
       The value must be the handle previously returned by
       QMI_QCMAP_ MSGR_MOBILE_AP_ENABLE_REQ.
  */
  /* techpubs note: space added for table formatting */

  //! IP Family
  //! @VERSION_INTRODUCED 1.0
  //! @VERSION 1.0
  mandatory qcmap_msgr_ip_family_enum ip_family;
  /**< Identifies the IP version to be used. Values: \n
       @ENUM ()
  */

} qcmap_msgr_get_wwan_stats_req_msg;

//! @MSG     QMI_QCMAP_MSGR_GET_WWAN_STATS_RESP
//! @TYPE    Response
//! @SENDER  Service
//----------------------------------------------------------------------------
message {
  //! Result Code
  //! @VERSION_INTRODUCED 1.0
  //! @VERSION 1.0
  mandatory qmi_response_type resp;

  //! WWAN Statistics
  //! @VERSION_INTRODUCED 1.0
  //! @VERSION 1.0
  optional qcmap_msgr_wwan_statistics_type wwan_stats;

} qcmap_msgr_get_wwan_stats_resp_msg;

/** @ERROR
    -QMI_ERR_NONE              No error in the request
    -QMI_ERR_INTERNAL          Unexpected error occurred during processing
    -QMI_ERR_MALFORMED_MSG     Message was not formulated correctly by the
                               control point or the message was corrupted
                               during transmission
    -QMI_ERR_MISSING_ARG       One or more required TLVs were missing in the request
    -QMI_ERR_INVALID_HANDLE    Mobile AP handle provided in the request
                               is not valid, i.e., it is not assigned to the
                               control point
    -QMI_ERR_INVALID_ARG       Argument is not correct
    -QMI_ERR_NOT_SUPPORTED     Operation is not supported
    -QMI_ERR_MAX_LIMIT_REACHED Maximum limit was reached for the static NAT
                               entry
    -QMI_ERR_DUPLICATE_ENTRY   Entry already exists
*/

/** @DESCRIPTION
    This command gets WWAN statistics for a specific IP family.
*/

//============================================================================
/** @COMMAND QMI_QCMAP_MSGR_RESET_WWAN_STATS
    @BRIEF Resets WWAN statistics.
    @CMD_VERSION 1.0
    @USAGE Production
    @SECURITY_LEVEL  High risk
    @REQUIRED_ACTION Default
*/
//============================================================================

//! @MSG     QMI_QCMAP_MSGR_RESET_WWAN_STATS_REQ
//! @TYPE    Request
//! @SENDER  Control point
//----------------------------------------------------------------------------

message {
  //! Mobile AP Handle
  //! @VERSION_INTRODUCED 1.0
  //! @VERSION 1.0
  mandatory uint32 mobile_ap_handle;
  /**< Handle identifying the mobile AP call instance.
       The value must be the handle previously returned by
       QMI_QCMAP_ MSGR_MOBILE_AP_ENABLE_REQ.
  */
  /* techpubs note: space added for table formatting */

  //! WWAN Entry With IP Version Configured
  //! @VERSION_INTRODUCED 1.0
  //! @VERSION 1.0
  mandatory qcmap_msgr_ip_family_enum ip_family;
  /**< Identifies the IP version to be used. Values: \n
       @ENUM ()
  */

} qcmap_msgr_reset_wwan_stats_req_msg;

//! @MSG     QMI_QCMAP_MSGR_RESET_WWAN_STATS_RESP
//! @TYPE    Response
//! @SENDER  Service
//----------------------------------------------------------------------------
message {
  //! Result Code
  //! @VERSION_INTRODUCED 1.0
  //! @VERSION 1.0
  mandatory qmi_response_type resp;

} qcmap_msgr_reset_wwan_stats_resp_msg;

/** @ERROR
    -QMI_ERR_NONE              No error in the request
    -QMI_ERR_INTERNAL          Unexpected error occurred during processing
    -QMI_ERR_MALFORMED_MSG     Message was not formulated correctly by the
                               control point or the message was corrupted
                               during transmission
    -QMI_ERR_MISSING_ARG       One or more required TLVs were missing in the request
    -QMI_ERR_INVALID_HANDLE    Mobile AP handle provided in the request
                               is not valid, i.e., it is not assigned to the
                               control point
    -QMI_ERR_INVALID_ARG       Argument is not correct
    -QMI_ERR_NOT_SUPPORTED     Operation is not supported
    -QMI_ERR_MAX_LIMIT_REACHED Maximum limit was reached for the static NAT
                               entry
    -QMI_ERR_DUPLICATE_ENTRY   Entry already exists
*/

/** @DESCRIPTION
    This command resets WWAN statistics for a specific IP family.
*/

//============================================================================
/** @COMMAND QMI_QCMAP_MSGR_SET_IPSEC_VPN_PASS_THROUGH
    @BRIEF Configures the Internet Protocol security (IPSec)
           Virtual Private Network (VPN) passthrough setting.
    @CMD_VERSION 1.0
    @USAGE Production
    @SECURITY_LEVEL  High risk
    @REQUIRED_ACTION Default
*/
//============================================================================

//! @MSG     QMI_QCMAP_MSGR_SET_IPSEC_VPN_PASS_THROUGH_REQ
//! @TYPE    Request
//! @SENDER  Control point
//----------------------------------------------------------------------------

message {
  //! Mobile AP Handle
  //! @VERSION_INTRODUCED 1.0
  //! @VERSION 1.0
  mandatory uint32 mobile_ap_handle;
  /**< Handle identifying the mobile AP call instance.
       The value must be the handle previously returned by
       QMI_QCMAP_ MSGR_MOBILE_AP_ENABLE_REQ.
  */
  /* techpubs note: space added for table formatting */

  //! VPN Passthrough Value
  //! @VERSION_INTRODUCED 1.0
  //! @VERSION 1.0
  mandatory boolean vpn_pass_through_value;
  /**< Indicates whether an IPSec VPN passthrough is allowed; boolean value.
  */
} qcmap_msgr_set_ipsec_vpn_pass_through_req_msg;

//! @MSG     QMI_QCMAP_MSGR_SET_IPSEC_VPN_PASS_THROUGH_RESP
//! @TYPE    Response
//! @SENDER  Service
//----------------------------------------------------------------------------
message {
  //! Result Code
  //! @VERSION_INTRODUCED 1.0
  //! @VERSION 1.0
  mandatory qmi_response_type resp;

} qcmap_msgr_set_ipsec_vpn_pass_through_resp_msg;

/** @ERROR
    -QMI_ERR_NONE              No error in the request
    -QMI_ERR_INTERNAL          Unexpected error occurred during processing
    -QMI_ERR_MALFORMED_MSG     Message was not formulated correctly by the
                               control point or the message was corrupted
                               during transmission
    -QMI_ERR_MISSING_ARG       One or more required TLVs were missing in the request
    -QMI_ERR_INVALID_HANDLE    Mobile AP handle provided in the request
                               is not valid, i.e., it is not assigned to the
                               control point
    -QMI_ERR_INVALID_ARG       Argument is not correct
    -QMI_ERR_NOT_SUPPORTED     Operation is not supported
*/

/** @DESCRIPTION
    This command sets the IPSec VPN passthrough on the device. The command
    handler overwrites any previously configured value with the current value.
*/

//============================================================================
/** @COMMAND QMI_QCMAP_MSGR_GET_IPSEC_VPN_PASS_THROUGH
    @BRIEF Queries the IPSec VPN passthrough setting.
    @CMD_VERSION 1.0
    @USAGE Production
    @SECURITY_LEVEL  Medium risk
    @REQUIRED_ACTION Default
*/
//============================================================================

//! @MSG     QMI_QCMAP_MSGR_GET_IPSEC_VPN_PASS_THROUGH_REQ
//! @TYPE    Request
//! @SENDER  Control point
//----------------------------------------------------------------------------
message {
  //! Mobile AP Handle
  //! @VERSION_INTRODUCED 1.0
  //! @VERSION 1.0
  mandatory uint32 mobile_ap_handle;
  /**< Handle identifying the mobile AP call instance.
       The value must be the handle previously returned by
       QMI_QCMAP_ MSGR_MOBILE_AP_ENABLE_REQ.
  */
  /* techpubs note: space added for table formatting */

} qcmap_msgr_get_ipsec_vpn_pass_through_req_msg;

//! @MSG     QMI_QCMAP_MSGR_GET_IPSEC_VPN_PASS_THROUGH_RESP
//! @TYPE    Response
//! @SENDER  Service
//----------------------------------------------------------------------------
message {
  //! Result Code
  //! @VERSION_INTRODUCED 1.0
  //! @VERSION 1.0
  mandatory qmi_response_type resp;

  //! VPN Passthrough Value
  //! @VERSION_INTRODUCED 1.0
  //! @VERSION 1.0
  optional boolean vpn_pass_through_value;
  /**< Indicates whether an IPSec VPN passthrough is allowed; boolean value.
  */
} qcmap_msgr_get_ipsec_vpn_pass_through_resp_msg;

/** @ERROR
    -QMI_ERR_NONE              No error in the request
    -QMI_ERR_INTERNAL          Unexpected error occurred during processing
    -QMI_ERR_MALFORMED_MSG     Message was not formulated correctly by the
                               control point or the message was corrupted
                               during transmission
    -QMI_ERR_MISSING_ARG       One or more required TLVs were missing in the request
    -QMI_ERR_INVALID_HANDLE    Mobile AP handle provided in the request
                               is not valid, i.e., it is not assigned to the
                               control point
    -QMI_ERR_NOT_SUPPORTED     Operation is not supported
*/

/** @DESCRIPTION
    This command queries the IPSec VPN passthrough value on the device.
*/

//============================================================================
/** @COMMAND QMI_QCMAP_MSGR_SET_PPTP_VPN_PASS_THROUGH
    @BRIEF Configures the Point-to-Point Tunneling Protocol (PPTP) VPN
           passthrough setting.
    @CMD_VERSION 1.0
    @USAGE Production
    @SECURITY_LEVEL  High risk
    @REQUIRED_ACTION Default
*/
//============================================================================

//! @MSG     QMI_QCMAP_MSGR_SET_PPTP_VPN_PASS_THROUGH_REQ
//! @TYPE    Request
//! @SENDER  Control point
//----------------------------------------------------------------------------

message {
  //! Mobile AP Handle
  //! @VERSION_INTRODUCED 1.0
  //! @VERSION 1.0
  mandatory uint32 mobile_ap_handle;
  /**< Handle identifying the mobile AP call instance.
       The value must be the handle previously returned by
       QMI_QCMAP_ MSGR_MOBILE_AP_ENABLE_REQ.
  */
  /* techpubs note: space added for table formatting */

  //! VPN Passthrough Value
  //! @VERSION_INTRODUCED 1.0
  //! @VERSION 1.0
  mandatory boolean vpn_pass_through_value;
  /**< Indicates whether a PPTP VPN passthrough is allowed; boolean value.
  */

} qcmap_msgr_set_pptp_vpn_pass_through_req_msg;

//! @MSG     QMI_QCMAP_MSGR_SET_PPTP_VPN_PASS_THROUGH_RESP
//! @TYPE    Response
//! @SENDER  Service
//----------------------------------------------------------------------------
message {
  //! Result Code
  //! @VERSION_INTRODUCED 1.0
  //! @VERSION 1.0
  mandatory qmi_response_type resp;

} qcmap_msgr_set_pptp_vpn_pass_through_resp_msg;

/** @ERROR
    -QMI_ERR_NONE              No error in the request
    -QMI_ERR_INTERNAL          Unexpected error occurred during processing
    -QMI_ERR_MALFORMED_MSG     Message was not formulated correctly by the
                               control point or the message was corrupted
                               during transmission
    -QMI_ERR_MISSING_ARG       One or more required TLVs were missing in the request
    -QMI_ERR_INVALID_HANDLE    Mobile AP handle provided in the request
                               is not valid, i.e., it is not assigned to the
                               control point
    -QMI_ERR_INVALID_ARG       Argument is not correct
    -QMI_ERR_NOT_SUPPORTED     Operation is not supported
*/

/** @DESCRIPTION
    This command sets the PPTP VPN passthrough on the device. The command
    handler overwrites any previously configured value with the current value.
*/

//============================================================================
/** @COMMAND QMI_QCMAP_MSGR_GET_PPTP_VPN_PASS_THROUGH
    @BRIEF Queries the PPTP VPN passthrough setting.
    @CMD_VERSION 1.0
    @USAGE Production
    @SECURITY_LEVEL  Medium risk
    @REQUIRED_ACTION Default
*/
//============================================================================

//! @MSG     QMI_QCMAP_MSGR_GET_PPTP_VPN_PASS_THROUGH_REQ
//! @TYPE    Request
//! @SENDER  Control point
//----------------------------------------------------------------------------
message {
  //! Mobile AP Handle
  //! @VERSION_INTRODUCED 1.0
  //! @VERSION 1.0
  mandatory uint32 mobile_ap_handle;
  /**< Handle identifying the mobile AP call instance.
       The value must be the handle previously returned by
       QMI_QCMAP_ MSGR_MOBILE_AP_ENABLE_REQ.
  */
  /* techpubs note: space added for table formatting */

} qcmap_msgr_get_pptp_vpn_pass_through_req_msg;

//! @MSG     QMI_QCMAP_MSGR_GET_PPTP_VPN_PASS_THROUGH_RESP
//! @TYPE    Response
//! @SENDER  Service
//----------------------------------------------------------------------------
message {
  //! Result Code
  //! @VERSION_INTRODUCED 1.0
  //! @VERSION 1.0
  mandatory qmi_response_type resp;

  //! VPN Passthrough Value
  //! @VERSION_INTRODUCED 1.0
  //! @VERSION 1.0
  optional boolean vpn_pass_through_value;
  /**< Indicates whether a PPTP VPN passthrough is allowed; boolean value.
  */
} qcmap_msgr_get_pptp_vpn_pass_through_resp_msg;

/** @ERROR
    -QMI_ERR_NONE              No error in the request
    -QMI_ERR_INTERNAL          Unexpected error occurred during processing
    -QMI_ERR_MALFORMED_MSG     Message was not formulated correctly by the
                               control point or the message was corrupted
                               during transmission
    -QMI_ERR_MISSING_ARG       One or more required TLVs were missing in the request
    -QMI_ERR_INVALID_HANDLE    Mobile AP handle provided in the request
                               is not valid, i.e., it is not assigned to the
                               control point
    -QMI_ERR_NOT_SUPPORTED     Operation is not supported
*/

/** @DESCRIPTION
    This command queries the PPTP VPN passthrough value on the device.
*/

//============================================================================
/** @COMMAND QMI_QCMAP_MSGR_SET_L2TP_VPN_PASS_THROUGH
    @BRIEF Configures the Layer 2 Tunneling Protocol (L2TP) VPN passthrough
           setting.
    @CMD_VERSION 1.0
    @USAGE Production
    @SECURITY_LEVEL  High risk
    @REQUIRED_ACTION Default
*/
//============================================================================

//! @MSG     QMI_QCMAP_MSGR_SET_L2TP_VPN_PASS_THROUGH_REQ
//! @TYPE    Request
//! @SENDER  Control point
//----------------------------------------------------------------------------

message {
  //! Mobile AP Handle
  //! @VERSION_INTRODUCED 1.0
  //! @VERSION 1.0
  mandatory uint32 mobile_ap_handle;
  /**< Handle identifying the mobile AP call instance.
       The value must be the handle previously returned by
       QMI_QCMAP_ MSGR_MOBILE_AP_ENABLE_REQ.
  */
  /* techpubs note: space added for table formatting */

  //! VPN Passthrough Value
  //! @VERSION_INTRODUCED 1.0
  //! @VERSION 1.0
  mandatory boolean vpn_pass_through_value;
  /**< Indicates whether an L2TP VPN passthrough is allowed; boolean value.
  */

} qcmap_msgr_set_l2tp_vpn_pass_through_req_msg;

//! @MSG     QMI_QCMAP_MSGR_SET_L2TP_VPN_PASS_THROUGH_RESP
//! @TYPE    Response
//! @SENDER  Service
//----------------------------------------------------------------------------
message {
  //! Result Code
  //! @VERSION_INTRODUCED 1.0
  //! @VERSION 1.0
  mandatory qmi_response_type resp;

} qcmap_msgr_set_l2tp_vpn_pass_through_resp_msg;

/** @ERROR
    -QMI_ERR_NONE              No error in the request
    -QMI_ERR_INTERNAL          Unexpected error occurred during processing
    -QMI_ERR_MALFORMED_MSG     Message was not formulated correctly by the
                               control point or the message was corrupted
                               during transmission
    -QMI_ERR_MISSING_ARG       One or more required TLVs were missing in the request
    -QMI_ERR_INVALID_HANDLE    Mobile AP handle provided in the request
                               is not valid, i.e., it is not assigned to the
                               control point
    -QMI_ERR_INVALID_ARG       Argument is not correct
    -QMI_ERR_NOT_SUPPORTED     Operation is not supported
*/

/** @DESCRIPTION
    This command sets the L2TP VPN passthrough on the device. The command
    handler overwrites any previously configured value with the current value.
*/

//============================================================================
/** @COMMAND QMI_QCMAP_MSGR_GET_L2TP_VPN_PASS_THROUGH
    @BRIEF Queries the L2TP VPN passthrough setting.
    @CMD_VERSION 1.0
    @USAGE Production
    @SECURITY_LEVEL  Medium risk
    @REQUIRED_ACTION Default
*/
//============================================================================

//! @MSG     QMI_QCMAP_MSGR_GET_L2TP_VPN_PASS_THROUGH_REQ
//! @TYPE    Request
//! @SENDER  Control point
//----------------------------------------------------------------------------
message {
  //! Mobile AP Handle
  //! @VERSION_INTRODUCED 1.0
  //! @VERSION 1.0
  mandatory uint32 mobile_ap_handle;
  /**< Handle identifying the mobile AP call instance.
       The value must be the handle previously returned by
       QMI_QCMAP_ MSGR_MOBILE_AP_ENABLE_REQ.
  */
  /* techpubs note: space added for table formatting */

} qcmap_msgr_get_l2tp_vpn_pass_through_req_msg;

//! @MSG     QMI_QCMAP_MSGR_GET_L2TP_VPN_PASS_THROUGH_RESP
//! @TYPE    Response
//! @SENDER  Service
//----------------------------------------------------------------------------
message {
  //! Result Code
  //! @VERSION_INTRODUCED 1.0
  //! @VERSION 1.0
  mandatory qmi_response_type resp;

  //! VPN Passthrough Value
  //! @VERSION_INTRODUCED 1.0
  //! @VERSION 1.0
  optional boolean vpn_pass_through_value;
  /**< Indicates whether an L2TP VPN passthrough is allowed; boolean value.
  */
} qcmap_msgr_get_l2tp_vpn_pass_through_resp_msg;

/** @ERROR
    -QMI_ERR_NONE              No error in the request
    -QMI_ERR_INTERNAL          Unexpected error occurred during processing
    -QMI_ERR_MALFORMED_MSG     Message was not formulated correctly by the
                               control point or the message was corrupted
                               during transmission
    -QMI_ERR_MISSING_ARG       One or more required TLVs were missing in the request
    -QMI_ERR_INVALID_HANDLE    Mobile AP handle provided in the request
                               is not valid, i.e., it is not assigned to the
                               control point
    -QMI_ERR_NOT_SUPPORTED     Operation is not supported
*/

/** @DESCRIPTION
    This command queries the L2TP VPN passthrough value on the device.
*/

//============================================================================
/** @COMMAND QMI_QCMAP_MSGR_SET_NAT_TYPE
    @BRIEF Configures the NAT type setting.
    @CMD_VERSION 1.0
    @USAGE Production
    @SECURITY_LEVEL  High risk
    @REQUIRED_ACTION Default
*/
//============================================================================

//! @MSG     QMI_QCMAP_MSGR_SET_NAT_TYPE_REQ
//! @TYPE    Request
//! @SENDER  Control point
//----------------------------------------------------------------------------

message {
  //! Mobile AP Handle
  //! @VERSION_INTRODUCED 1.0
  //! @VERSION 1.0
  mandatory uint32 mobile_ap_handle;
  /**< Handle identifying the mobile AP call instance.
       The value must be the handle previously returned by
       QMI_QCMAP_MOBILE_AP_ ENABLE_REQ.
   */

  //! NAT Type Value
  //! @VERSION_INTRODUCED 1.0
  //! @VERSION 1.0
  mandatory qcmap_msgr_nat_enum nat_type;
  /**< Indicates the type of NAT. Values: \n
       @ENUM ()
  */

} qcmap_msgr_set_nat_type_req_msg;

//! @MSG     QMI_QCMAP_MSGR_SET_NAT_TYPE_RESP
//! @TYPE    Response
//! @SENDER  Service
//----------------------------------------------------------------------------
message {
  //! Result Code
  //! @VERSION_INTRODUCED 1.0
  //! @VERSION 1.0
  mandatory qmi_response_type resp;

} qcmap_msgr_set_nat_type_resp_msg;

/** @ERROR
    -QMI_ERR_NONE              No error in the request
    -QMI_ERR_INTERNAL          Unexpected error occurred during processing
    -QMI_ERR_MALFORMED_MSG     Message was not formulated correctly by the
                               control point or the message was corrupted
                               during transmission
    -QMI_ERR_MISSING_ARG       One or more required TLVs were missing in the request
    -QMI_ERR_INVALID_HANDLE    Mobile AP handle provided in the request
                               is not valid, i.e., it is not assigned to the
                               control point
    -QMI_ERR_INVALID_ARG       Argument is not correct
    -QMI_ERR_NOT_SUPPORTED     Operation is not supported
*/

/** @DESCRIPTION
    This command sets the NAT type on the device. The command
    handler overwrites any previously configured value with the current value.
*/

//============================================================================
/** @COMMAND QMI_QCMAP_MSGR_GET_NAT_TYPE
    @BRIEF Gets the NAT type setting.
    @CMD_VERSION 1.0
    @USAGE Production
    @SECURITY_LEVEL  Medium risk
    @REQUIRED_ACTION Default
*/
//============================================================================

//! @MSG     QMI_QCMAP_MSGR_GET_NAT_TYPE_REQ
//! @TYPE    Request
//! @SENDER  Control point
//----------------------------------------------------------------------------

message {
//! Mobile AP Handle
  //! @VERSION_INTRODUCED 1.0
  //! @VERSION 1.0
  mandatory uint32 mobile_ap_handle;
  /**< Handle identifying the mobile AP call instance.
    The value must be the handle previously returned by
    QMI_QCMAP_MOBILE_AP_ ENABLE_REQ.
   */

} qcmap_msgr_get_nat_type_req_msg;

//! @MSG     QMI_QCMAP_MSGR_GET_NAT_TYPE_RESP
//! @TYPE    Response
//! @SENDER  Service
//----------------------------------------------------------------------------
message {
  //! Result Code
  //! @VERSION_INTRODUCED 1.0
  //! @VERSION 1.0
  mandatory qmi_response_type resp;

  //! NAT Type Value
  //! @VERSION_INTRODUCED 1.0
  //! @VERSION 1.0
  optional qcmap_msgr_nat_enum nat_type;
  /**< Indicates the type of NAT. Values: \n
       @ENUM ()
  */

} qcmap_msgr_get_nat_type_resp_msg;

/** @ERROR
    -QMI_ERR_NONE              No error in the request
    -QMI_ERR_INTERNAL          Unexpected error occurred during processing
    -QMI_ERR_MALFORMED_MSG     Message was not formulated correctly by the
                               control point or the message was corrupted
                               during transmission
    -QMI_ERR_MISSING_ARG       One or more required TLVs were missing in the request
    -QMI_ERR_INVALID_HANDLE    Mobile AP handle provided in the request
                               is not valid, i.e., it is not assigned to the
                               control point
    -QMI_ERR_INVALID_ARG       Argument is not correct
    -QMI_ERR_NOT_SUPPORTED     Operation is not supported
*/

/** @DESCRIPTION
    This command gets the NAT type on the device.
*/

//============================================================================
/** @COMMAND QMI_QCMAP_MSGR_SET_AUTO_CONNECT
    @BRIEF Sets the autoconnect flag.
    @CMD_VERSION 1.0
    @USAGE Production
    @SECURITY_LEVEL  High risk
    @REQUIRED_ACTION Default
*/
//============================================================================

//! @MSG     QMI_QCMAP_MSGR_SET_AUTO_CONNECT_REQ
//! @TYPE    Request
//! @SENDER  Control point
//----------------------------------------------------------------------------
message {
  //! Mobile AP Handle
  //! @VERSION_INTRODUCED 1.0
  //! @VERSION 1.0
  mandatory uint32 mobile_ap_handle;
  /**< Handle identifying the mobile AP call instance.
       The value must be the handle previously returned by
       QMI_QCMAP_ MSGR_MOBILE_AP_ENABLE_REQ.
  */
  /* techpubs note: space added for table formatting */

  //! Autoconnect Mode Flag
  //! @VERSION_INTRODUCED 1.0
  //! @VERSION 1.0
  mandatory boolean enable;
  /**< Enable/disable autoconnect. Values:\n
      - TRUE -- Enable\n
      - FALSE -- Disable
   */

} qcmap_msgr_set_auto_connect_req_msg;

//! @MSG     QMI_QCMAP_MSGR_SET_AUTO_CONNECT_RESP
//! @TYPE    Response
//! @SENDER  Service
//----------------------------------------------------------------------------
message {
  //! Result Code
  //! @VERSION_INTRODUCED 1.0
  //! @VERSION 1.0
  mandatory qmi_response_type resp;

} qcmap_msgr_set_auto_connect_resp_msg;

/** @ERROR
    -QMI_ERR_NONE              No error in the request
    -QMI_ERR_INTERNAL          Unexpected error occurred during processing
    -QMI_ERR_MALFORMED_MSG     Message was not formulated correctly by the
                               control point or the message was corrupted
                               during transmission
    -QMI_ERR_MISSING_ARG       One or more required TLVs were missing in the request
    -QMI_ERR_INVALID_HANDLE    Mobile AP handle provided in the request
                               is not valid, i.e., it is not assigned to the
                               control point
    -QMI_ERR_INVALID_ARG       Argument is not correct
    -QMI_ERR_NOT_SUPPORTED     Operation is not supported
*/

/** @DESCRIPTION
    This command sets the autoconnect mode.
*/

//============================================================================
/** @COMMAND QMI_QCMAP_MSGR_GET_AUTO_CONNECT
    @BRIEF Gets the autoconnect flag.
    @CMD_VERSION 1.0
    @USAGE Production
    @SECURITY_LEVEL  Medium risk
    @REQUIRED_ACTION Default
*/
//============================================================================

//! @MSG     QMI_QCMAP_MSGR_GET_AUTO_CONNECT_REQ
//! @TYPE    Request
//! @SENDER  Control point
//----------------------------------------------------------------------------
message {
  //! Mobile AP Handle
  //! @VERSION_INTRODUCED 1.0
  //! @VERSION 1.0
  mandatory uint32 mobile_ap_handle;
  /**< Handle identifying the mobile AP call instance.
       The value must be the handle previously returned by
       QMI_QCMAP_ MSGR_MOBILE_AP_ENABLE_REQ.
  */
  /* techpubs note: space added for table formatting */

} qcmap_msgr_get_auto_connect_req_msg;

//! @MSG     QMI_QCMAP_MSGR_GET_AUTO_CONNECT_RESP
//! @TYPE    Response
//! @SENDER  Service
//----------------------------------------------------------------------------
message {
  //! Result Code
  //! @VERSION_INTRODUCED 1.0
  //! @VERSION 1.0
  mandatory qmi_response_type resp;

  //! Autoconnect Mode
  //! @VERSION_INTRODUCED 1.0
  //! @VERSION 1.0
  optional boolean auto_conn_flag;
  /**< Autoconnect status. Values: \n
       - TRUE -- Enabled \n
       - FALSE -- Disabled
   */

} qcmap_msgr_get_auto_connect_resp_msg;

/** @ERROR
    -QMI_ERR_NONE              No error in the request
    -QMI_ERR_INTERNAL          Unexpected error occurred during processing
    -QMI_ERR_MALFORMED_MSG     Message was not formulated correctly by the
                               control point or the message was corrupted
                               during transmission
    -QMI_ERR_MISSING_ARG       One or more required TLVs were missing in the request
    -QMI_ERR_INVALID_HANDLE    Mobile AP handle provided in the request
                               is not valid, i.e., it is not assigned to the
                               control point
    -QMI_ERR_INVALID_ARG       Argument is not correct
    -QMI_ERR_NOT_SUPPORTED     Operation is not supported
*/

/** @DESCRIPTION
    This command gets the autoconnect status.
*/

//============================================================================
/** @COMMAND QMI_QCMAP_MSGR_SET_ROAMING_PREF
    @BRIEF Configures whether QCMAP_MSGR initiates WWAN data calls while roaming.
    @CMD_VERSION 1.2
    @USAGE Production
    @SECURITY_LEVEL  High risk
    @REQUIRED_ACTION Default
*/
//============================================================================

//! @MSG     QMI_QCMAP_MSGR_SET_ROAMING_PREF_REQ
//! @TYPE    Request
//! @SENDER  Control point
//----------------------------------------------------------------------------
message {
  //! Mobile AP Handle
  //! @VERSION_INTRODUCED 1.2
  //! @VERSION 1.2
  mandatory uint32 mobile_ap_handle;
  /**< Handle identifying the mobile AP call instance.
       The value must be the handle previously returned by
       QMI_QCMAP_ MSGR_MOBILE_AP_ENABLE_REQ.
  */
  /* techpubs note: space added for table formatting */

  //! Roaming Mode
  //! @VERSION_INTRODUCED 1.2
  //! @VERSION 1.2
  mandatory boolean allow_wwan_calls_while_roaming;
  /**< Whether QCMAP_MSGR connects a data call while roaming; boolean value.
  */
} qcmap_msgr_set_roaming_pref_req_msg;

//! @MSG     QMI_QCMAP_MSGR_SET_ROAMING_PREF_RESP
//! @TYPE    Response
//! @SENDER  Service
//----------------------------------------------------------------------------
message {
  //! Result Code
  //! @VERSION_INTRODUCED 1.2
  //! @VERSION 1.2
  mandatory qmi_response_type resp;

} qcmap_msgr_set_roaming_pref_resp_msg;

/** @ERROR
    -QMI_ERR_NONE              No error in the request
    -QMI_ERR_INTERNAL          Unexpected error occurred during processing
    -QMI_ERR_MALFORMED_MSG     Message was not formulated correctly by the
                               control point or the message was corrupted
                               during transmission
    -QMI_ERR_MISSING_ARG       One or more required TLVs were missing in the request
    -QMI_ERR_INVALID_HANDLE    Mobile AP handle provided in the request
                               is not valid, i.e., it is not assigned to the
                               control point
    -QMI_ERR_INVALID_ARG       Argument is not correct
    -QMI_ERR_NOT_SUPPORTED     Operation is not supported
*/

/** @DESCRIPTION
    The Roaming Mode TLV determines the QCMAP_MSGR policy for establishing new data calls.
    By default, the TLV is assumed to be FALSE.  If modified through this interface, it is stored
    persistently.

    Note: The Roaming Mode TLV does not affect a currently established data connection.
    For example, if the roaming mode is set to FALSE but a roaming data call is connected
    (e.g., by a different client or because the mode was TRUE when the call was established),
    QCMAP_MSGR uses the currently established WWAN data connection.
*/

//============================================================================
/** @COMMAND QMI_QCMAP_MSGR_GET_ROAMING_PREF
    @BRIEF Gets the roaming flag.
    @CMD_VERSION 1.2
    @USAGE Production
    @SECURITY_LEVEL  Medium risk
    @REQUIRED_ACTION Default
*/
//============================================================================

//! @MSG     QMI_QCMAP_MSGR_GET_ROAMING_PREF_REQ
//! @TYPE    Request
//! @SENDER  Control point
//----------------------------------------------------------------------------
message {
  //! Mobile AP Handle
  //! @VERSION_INTRODUCED 1.2
  //! @VERSION 1.2
  mandatory uint32 mobile_ap_handle;
  /**< Handle identifying the mobile AP call instance.
       The value must be the handle previously returned by
       QMI_QCMAP_ MSGR_MOBILE_AP_ENABLE_REQ.
  */
  /* techpubs note: space added for table formatting */

} qcmap_msgr_get_roaming_pref_req_msg;

//! @MSG     QMI_QCMAP_MSGR_GET_ROAMING_PREF_RESP
//! @TYPE    Response
//! @SENDER  Service
//----------------------------------------------------------------------------
message {
  //! Result Code
  //! @VERSION_INTRODUCED 1.2
  //! @VERSION 1.2
  mandatory qmi_response_type resp;

  //! Roaming Mode
  //! @VERSION_INTRODUCED 1.2
  //! @VERSION 1.2
  optional boolean allow_wwan_calls_while_roaming;
  /**< Whether QCMAP_MSGR connects a data call while roaming; boolean value.
  */
} qcmap_msgr_get_roaming_pref_resp_msg;

/** @ERROR
    -QMI_ERR_NONE              No error in the request
    -QMI_ERR_INTERNAL          Unexpected error occurred during processing
    -QMI_ERR_MALFORMED_MSG     Message was not formulated correctly by the
                               control point or the message was corrupted
                               during transmission
    -QMI_ERR_MISSING_ARG       One or more required TLVs were missing in the request
    -QMI_ERR_INVALID_HANDLE    Mobile AP handle provided in the request
                               is not valid, i.e., it is not assigned to the
                               control point
    -QMI_ERR_INVALID_ARG       Argument is not correct
    -QMI_ERR_NOT_SUPPORTED     Operation is not supported
*/

/** @DESCRIPTION
    The Roaming Mode TLV determines the QCMAP_MSGR policy for establishing new data calls.
*/

//============================================================================
/** @COMMAND QMI_QCMAP_MSGR_SET_LOOPBACK_FLAG
    @BRIEF Configures whether QCMAP_MSGR initiates loopback call even
    without backhaul service.
    @CMD_VERSION 1.23
    @USAGE Production
    @SECURITY_LEVEL  High risk
    @REQUIRED_ACTION Default
*/
//============================================================================

//! @MSG     QMI_QCMAP_MSGR_SET_LOOPBACK_FLAG_REQ
//! @TYPE    Request
//! @SENDER  Control point
//----------------------------------------------------------------------------
message {
  //! Mobile AP Handle
  //! @VERSION_INTRODUCED 1.23
  //! @VERSION 1.23
  mandatory uint32 mobile_ap_handle;
  /**< Handle identifying the mobile AP call instance.
       The value must be the handle previously returned by
       QMI_QCMAP_ MSGR_MOBILE_AP_ENABLE_REQ.
  */
  /* techpubs note: space added for table formatting */

  //! Loopback Flag
  //! @VERSION_INTRODUCED 1.23
  //! @VERSION 1.23
  mandatory boolean loopback_flag;
  /**< Whether QCMAP_MSGR connects a loopback call without backhaul service;
       boolean value.
  */
} qcmap_msgr_set_loopback_flag_req_msg;

//! @MSG     QMI_QCMAP_MSGR_SET_LOOPBACK_FLAG_RESP
//! @TYPE    Response
//! @SENDER  Service
//----------------------------------------------------------------------------
message {
  //! Result Code
  //! @VERSION_INTRODUCED 1.23
  //! @VERSION 1.23
  mandatory qmi_response_type resp;

} qcmap_msgr_set_loopback_flag_resp_msg;

/** @ERROR
    -QMI_ERR_NONE              No error in the request
    -QMI_ERR_INTERNAL          Unexpected error occurred during processing
    -QMI_ERR_MALFORMED_MSG     Message was not formulated correctly by the
                               control point or the message was corrupted
                               during transmission
    -QMI_ERR_MISSING_ARG       One or more required TLVs were missing in the request
    -QMI_ERR_INVALID_HANDLE    Mobile AP handle provided in the request
                               is not valid, i.e., it is not assigned to the
                               control point
    -QMI_ERR_INVALID_ARG       Argument is not correct
    -QMI_ERR_NOT_SUPPORTED     Operation is not supported
*/

/** @DESCRIPTION
    The loopback flag TLV determines the QCMAP_MSGR policy for establishing
    loopback calls. By default, the TLV is assumed to be FALSE.
    If modified through this interface, it is stored persistently.

    Note: The loopback flag TLV does not affect a currently established
    data connection.
*/

//============================================================================
/** @COMMAND QMI_QCMAP_MSGR_GET_LOOPBACK_FLAG
    @BRIEF Gets the loopback flag.
    @CMD_VERSION 1.23
    @USAGE Production
    @SECURITY_LEVEL  Medium risk
    @REQUIRED_ACTION Default
*/
//============================================================================

//! @MSG     QMI_QCMAP_MSGR_GET_LOOPBACK_FLAG_REQ
//! @TYPE    Request
//! @SENDER  Control point
//----------------------------------------------------------------------------
message {
  //! Mobile AP Handle
  //! @VERSION_INTRODUCED 1.23
  //! @VERSION 1.23
  mandatory uint32 mobile_ap_handle;
  /**< Handle identifying the mobile AP call instance.
       The value must be the handle previously returned by
       QMI_QCMAP_ MSGR_MOBILE_AP_ENABLE_REQ.
  */
  /* techpubs note: space added for table formatting */
} qcmap_msgr_get_loopback_flag_req_msg;

//! @MSG     QMI_QCMAP_MSGR_GET_LOOPBACK_FLAG_RESP
//! @TYPE    Response
//! @SENDER  Service
//----------------------------------------------------------------------------
message {
  //! Result Code
  //! @VERSION_INTRODUCED 1.23
  //! @VERSION 1.23
  mandatory qmi_response_type resp;

  //! Loopback Flag
  //! @VERSION_INTRODUCED 1.23
  //! @VERSION 1.23
  optional boolean loopback_flag;
  /**< Whether QCMAP_MSGR connects a loopback call without service;
       boolean value.
  */
} qcmap_msgr_get_loopback_flag_resp_msg;

/** @ERROR
    -QMI_ERR_NONE              No error in the request
    -QMI_ERR_INTERNAL          Unexpected error occurred during processing
    -QMI_ERR_MALFORMED_MSG     Message was not formulated correctly by the
                               control point or the message was corrupted
                               during transmission
    -QMI_ERR_MISSING_ARG       One or more required TLVs were missing in the request
    -QMI_ERR_INVALID_HANDLE    Mobile AP handle provided in the request
                               is not valid, i.e., it is not assigned to the
                               control point
    -QMI_ERR_INVALID_ARG       Argument is not correct
    -QMI_ERR_NOT_SUPPORTED     Operation is not supported
*/

/** @DESCRIPTION
    The loopback flag TLV determines the QCMAP_MSGR policy for establishing
    loopback calls.
*/

//============================================================================
/** @COMMAND QMI_QCMAP_MSGR_ADD_FIREWALL_ENTRY
    @BRIEF Adds IP filter-based firewall rules.
    @CMD_VERSION 1.0
    @USAGE Production
    @SECURITY_LEVEL  High risk
    @REQUIRED_ACTION Default
*/
//============================================================================

//! @MSG     QMI_QCMAP_MSGR_ADD_FIREWALL_ENTRY_REQ
//! @TYPE    Request
//! @SENDER  Control point
//----------------------------------------------------------------------------

message {
    //! Mobile AP Handle
    //! @VERSION_INTRODUCED 1.0
    //! @VERSION 1.0
    mandatory uint32 mobile_ap_handle;
    /**< Handle identifying the mobile AP call instance.
         The value must be the handle previously returned by
         QMI_QCMAP_ MSGR_MOBILE_AP_ENABLE_REQ.
    */
    /* techpubs note: space added for table formatting */

    //! IP Version
    //! @VERSION_INTRODUCED 1.0
    //! @VERSION 1.0
    mandatory qcmap_msgr_ip_family_enum ip_version;
    /**< Identifies the firewall family version. Values: \n
         @ENUM ()
    */

    //! Next Protocol Header After the IP Header
    //! @VERSION_INTRODUCED 1.0
    //! @VERSION 1.0
    optional uint8 next_hdr_prot;
    /**< IPv4/IPv6 next header protocol. */

    //! TCP, UDP, and TCP_UDP Source Port
    //! @VERSION_INTRODUCED 1.0
    //! @VERSION 1.0
    optional  qcmap_tcp_udp_port_range  tcp_udp_src;

    //! TCP, UDP, and TCP_UDP Destination Port
    //! @VERSION_INTRODUCED 1.0
    //! @VERSION 1.0
    optional  qcmap_tcp_udp_port_range  tcp_udp_dst;

    //! ICMP Type
    //! @VERSION_INTRODUCED 1.0
    //! @VERSION 1.0
    optional  uint8  icmp_type;
    /**< ICMP type, as specified in the ICMP protocol
         (RFC 792 \hyperref[S3]{[S3]}). */

    //! ICMP Code
    //! @VERSION_INTRODUCED 1.0
    //! @VERSION 1.0
    optional  uint8  icmp_code;
    /**< ICMP code as specified in the ICMP protocol
         (RFC 792 \hyperref[S3]{[S3]}). */

    //! ESP Security Parameter Index
    //! @VERSION_INTRODUCED 1.0
    //! @VERSION 1.0
    optional  uint32 esp_spi;
    /**< Security parameter index, as specified in the ESP protocol
        (RFC 4303 \hyperref[S7]{[S7]}). */

    //! IPv4 Source Address and Subnet Mask
    //! @VERSION_INTRODUCED 1.0
    //! @VERSION 1.0
    optional  qcmap_ip4_addr_subnet_mask ip4_src_addr;

    //! IPv4 Destination Address and Subnet Mask
    //! @VERSION_INTRODUCED 1.0
    //! @VERSION 1.0
    optional  qcmap_ip4_addr_subnet_mask ip4_dst_addr;

    //! IPv4 TOS Value and Mask
    //! @VERSION_INTRODUCED 1.0
    //! @VERSION 1.0
    optional  qcmap_ip4_tos  ip4_tos;

    //! IPv6 Source Address and Prefix Length
    //! @VERSION_INTRODUCED 1.0
    //! @VERSION 1.0
    optional  qcmap_ip6_addr_prefix_len  ip6_src_addr;

    //! IPv6 Destination Address and Prefix Length
    //! @VERSION_INTRODUCED 1.0
    //! @VERSION 1.0
    optional  qcmap_ip6_addr_prefix_len  ip6_dst_addr;

    //! IPv6 Traffic Class Value and Mask
    //! @VERSION_INTRODUCED 1.0
    //! @VERSION 1.0
    optional  qcmap_ip6_traffic_class  ip6_trf_cls;


} qcmap_msgr_add_firewall_entry_req_msg;


//! @MSG     QMI_QCMAP_MSGR_ADD_FIREWALL_ENTRY_RESP
//! @TYPE    Response
//! @SENDER  Service
//----------------------------------------------------------------------------
message {
    //! Result Code
    //! @VERSION_INTRODUCED 1.0
    //! @VERSION 1.0
    mandatory qmi_response_type resp;

    //! Firewall Handle
    //! @VERSION_INTRODUCED 1.0
    //! @VERSION 1.0
    optional uint32 firewall_handle;
    /**< Identifies the handle for the added firewall rule. */

} qcmap_msgr_add_firewall_entry_resp_msg;

/** @ERROR
    -QMI_ERR_NONE              No error in request
    -QMI_ERR_INTERNAL          Unexpected error occurred during processing
    -QMI_ERR_MALFORMED_MSG     Message was not formulated correctly by the
                               control point or the message was corrupted
                               during transmission
    -QMI_ERR_MISSING_ARG       One or more required TLVs were missing in the request
    -QMI_ERR_INVALID_HANDLE    Mobile AP handle provided in the request
                               is not valid, i.e., it is not assigned to the
                               control point
    -QMI_ERR_INVALID_ARG       Argument is not correct
    -QMI_ERR_NOT_SUPPORTED     Operation is not supported
    -QMI_ERR_NO_MEMORY         Exceeded maximum number of firewall rules
                               supported; cannot add more firewall rules
*/

/** @DESCRIPTION
This command adds a single IP filter-based
firewall rule.
*/

//============================================================================
/** @COMMAND QMI_QCMAP_MSGR_GET_FIREWALL_ENTRIES_HANDLE_LIST
    @BRIEF Gets the handles of all firewall rules.
    @CMD_VERSION 1.0
    @USAGE Production
    @SECURITY_LEVEL  High risk
    @REQUIRED_ACTION Default

*/
//============================================================================

//! @MSG     QMI_QCMAP_MSGR_GET_FIREWALL_ENTRIES_HANDLE_LIST_REQ
//! @TYPE    Request
//! @SENDER  Control point
//----------------------------------------------------------------------------

message {
  //! Mobile AP Handle
  //! @VERSION_INTRODUCED 1.0
  //! @VERSION 1.0
  mandatory uint32 mobile_ap_handle;
  /**< Handle identifying the mobile AP call instance.
       Value must be the handle previously returned by
       QMI_QCMAP_ MSGR_MOBILE_AP_ENABLE_REQ.
   */
  /* techpubs note: space added for table formatting */

  //! IP Version
  //! @VERSION_INTRODUCED 1.0
  //! @VERSION 1.0
  mandatory qcmap_msgr_ip_family_enum ip_version;
  /**< Identifies the firewall family version. Values: \n
       @ENUM ()
   */
} qcmap_msgr_get_firewall_entries_handle_list_req_msg;

//! @MSG     QMI_QCMAP_MSGR_GET_FIREWALL_ENTRIES_HANDLE_LIST_RESP
//! @TYPE    Response
//! @SENDER  Service
//----------------------------------------------------------------------------
message {

  //! Result Code
  //! @VERSION_INTRODUCED 1.0
  //! @VERSION 1.0
  mandatory qmi_response_type resp;

  //! Firewall Handle List
  //! @VERSION_INTRODUCED 1.0
  //! @VERSION 1.0
  optional uint32 firewall_handle_list<QCMAP_MSGR_MAX_FIREWALL_ENTRIES>;
  /**< Handles identifying the firewall entry. The value must be the handle
       previously returned by QMI_QCMAP_MSGR_ ADD_FIREWALL_ENTRY_RESP.
   */
/* techpubs: space after _ for formatting. */
} qcmap_msgr_get_firewall_entries_handle_list_resp_msg;

/** @ERROR
    -QMI_ERR_NONE              No error in request
    -QMI_ERR_INTERNAL          Unexpected error occurred during processing
    -QMI_ERR_MALFORMED_MSG     Message was not formulated correctly by the
                               control point or the message was corrupted
                               during transmission
    -QMI_ERR_MISSING_ARG       One or more required TLVs were missing in the request
    -QMI_ERR_INVALID_HANDLE    Mobile AP handle provided in the request
                               is not valid, i.e., it is not assigned to the
                               control point
    -QMI_ERR_NOT_SUPPORTED     Operation is not supported
*/

/** @DESCRIPTION
    This command gets all the firewall handles associated with a single mobile AP instance.
*/

//============================================================================
/** @COMMAND QMI_QCMAP_MSGR_GET_FIREWALL_ENTRY
    @BRIEF Gets firewall rules.
    @CMD_VERSION 1.0
    @USAGE Production
    @SECURITY_LEVEL  High risk
    @REQUIRED_ACTION Default
*/
//============================================================================

//! @MSG     QMI_QCMAP_MSGR_GET_FIREWALL_ENTRY_REQ
//! @TYPE    Request
//! @SENDER  Control point
//----------------------------------------------------------------------------

message {
  //! Mobile AP Handle
  //! @VERSION_INTRODUCED 1.0
  //! @VERSION 1.0
  mandatory uint32 mobile_ap_handle;
  /**< Handle identifying the mobile AP call instance.
       The value must be the handle previously returned by
       QMI_QCMAP_ MSGR_MOBILE_AP_ENABLE_REQ.
   */
  /* techpubs note: space added for table formatting */

  //! Firewall Handle
  //! @VERSION_INTRODUCED 1.0
  //! @VERSION 1.0
  mandatory uint32 firewall_handle;
  /**< Handle identifying the firewall entry. The value must be the handle
       previously returned by
       QMI_QCMAP_MSGR_ADD_ FIREWALL_ENTRY_RESP,
       QMI_QCMAP_MSGR_GET_ FIREWALL_ENTRY_RESP, or
       QMI_QCMAP_MSGR_GET_ FIREWALL_ENTRIES_HANDLE_ LIST_RESP.
   */
/* techpubs: the spaces after _ are for formatting */
} qcmap_msgr_get_firewall_entry_req_msg;

//! @MSG     QMI_QCMAP_GET_FIREWALL_ENTRY_RESP
//! @TYPE    Response
//! @SENDER  Service
//----------------------------------------------------------------------------
message {

  //! Result Code
  //! @VERSION_INTRODUCED 1.0
  //! @VERSION 1.0
   mandatory qmi_response_type resp;

  //! IP Version
  //! @VERSION_INTRODUCED 1.0
  //! @VERSION 1.0
  optional qcmap_msgr_ip_family_enum ip_version;
  /**< Identifies the firewall family version. Values: \n
       @ENUM ()
  */

  //! Next Header Protocol
  //! @VERSION_INTRODUCED 1.0
  //! @VERSION 1.0
  optional uint8 next_hdr_prot;
  /**< IPv4/IPv6 next header protocol. */

  //! TCP, UDP, and TCP_UDP Source Port
  //! @VERSION_INTRODUCED 1.0
  //! @VERSION 1.0
  optional  qcmap_tcp_udp_port_range  tcp_udp_src;

  //! TCP, UDP, and TCP_UDP Destination Port
  //! @VERSION_INTRODUCED 1.0
  //! @VERSION 1.0
  optional  qcmap_tcp_udp_port_range  tcp_udp_dst;

  //! ICMP Type
  //! @VERSION_INTRODUCED 1.0
  //! @VERSION 1.0
  optional  uint8  icmp_type;
  /**< ICMP type, as specified in the ICMP protocol
       (RFC 792 \hyperref[S3]{[S3]}). */

  //! ICMP Code
  //! @VERSION_INTRODUCED 1.0
  //! @VERSION 1.0
  optional  uint8  icmp_code;
  /**< ICMP code, as specified in the ICMP protocol
       (RFC 792 \hyperref[S3]{[S3]}). */

  //! ESP Security Parameter Index
  //! @VERSION_INTRODUCED 1.0
  //! @VERSION 1.0
  optional  uint32 esp_spi;
  /**< Security parameter index, as specified in the ESP protocol
       (RFC 4303 \hyperref[S7]{[S7]}). */

  //! IPv4 Source Address and Subnet Mask
  //! @VERSION_INTRODUCED 1.0
  //! @VERSION 1.0
  optional  qcmap_ip4_addr_subnet_mask ip4_src_addr;

  //! IPv4 Destination Address and Subnet Mask
  //! @VERSION_INTRODUCED 1.0
  //! @VERSION 1.0
  optional  qcmap_ip4_addr_subnet_mask ip4_dst_addr;

  //! IPv4 TOS Value and Mask
  //! @VERSION_INTRODUCED 1.0
  //! @VERSION 1.0
  optional  qcmap_ip4_tos  ip4_tos;

  //! IPv6 Source Address and Prefix Length
  //! @VERSION_INTRODUCED 1.0
  //! @VERSION 1.0
  optional  qcmap_ip6_addr_prefix_len  ip6_src_addr;

  //! IPv6 Destination Address and Prefix Length
  //! @VERSION_INTRODUCED 1.0
  //! @VERSION 1.0
  optional  qcmap_ip6_addr_prefix_len  ip6_dst_addr;

  //! IPv6 Traffic Class Value and Mask
  //! @VERSION_INTRODUCED 1.0
  //! @VERSION 1.0
  optional  qcmap_ip6_traffic_class  ip6_trf_cls;

} qcmap_msgr_get_firewall_entry_resp_msg;

/** @ERROR
    -QMI_ERR_NONE              No error in request
    -QMI_ERR_INTERNAL          Unexpected error occurred during processing
    -QMI_ERR_MALFORMED_MSG     Message was not formulated correctly by the
                               control point or the message was corrupted
                               during transmission
    -QMI_ERR_MISSING_ARG       One or more required TLVs were missing in the request
    -QMI_ERR_INVALID_HANDLE    Mobile AP handle provided in the request
                               is not valid, i.e., it is not assigned to the
                               control point
    -QMI_ERR_NOT_SUPPORTED     Operation is not supported
*/

/** @DESCRIPTION
    This command gets a firewall rule associated with a single firewall handle.
*/

//============================================================================
/** @COMMAND QMI_QCMAP_MSGR_DELETE_FIREWALL_ENTRY
    @BRIEF Deletes a firewall rule identified by a handle.
    @CMD_VERSION 1.0
    @USAGE Production
    @SECURITY_LEVEL  High risk
    @REQUIRED_ACTION Default
*/
//============================================================================

//! @MSG     QMI_QCMAP_MSGR_DELETE_FIREWALL_ENTRY_REQ
//! @TYPE    Request
//! @SENDER  Control point
//----------------------------------------------------------------------------
message {
    //! Mobile AP Handle
    //! @VERSION_INTRODUCED 1.0
    //! @VERSION 1.0
    mandatory uint32 mobile_ap_handle;
    /**< Handle identifying the mobile AP call instance.
         Value must be the handle previously returned by
         QMI_QCMAP_ MSGR_MOBILE_AP_ENABLE_REQ.
    */
    /* techpubs note: space added for table formatting */

    //! Firewall Handle
    //! @VERSION_INTRODUCED 1.0
    //! @VERSION 1.0
    mandatory uint32 firewall_handle;
    /**< Handle identifying the firewall entry.
    */

} qcmap_msgr_delete_firewall_entry_req_msg;

//! @MSG     QMI_QCMAP_MSGR_DELETE_FIREWALL_ENTRY_RESP
//! @TYPE    Response
//! @SENDER  Service
//----------------------------------------------------------------------------
message {
    //! Result Code
    //! @VERSION_INTRODUCED 1.0
    //! @VERSION 1.0
    mandatory qmi_response_type resp;

} qcmap_msgr_delete_firewall_entry_resp_msg;

/** @ERROR
    -QMI_ERR_NONE              No error in request
    -QMI_ERR_INTERNAL          Unexpected error occurred during processing
    -QMI_ERR_MALFORMED_MSG     Message was not formulated correctly by the
                               control point or the message was corrupted
                               during transmission
    -QMI_ERR_MISSING_ARG       One or more required TLVs were missing in the request
    -QMI_ERR_INVALID_HANDLE    Mobile AP handle provided in the request
                               is not valid, i.e., it is not assigned to the
                               control point
    -QMI_ERR_INVALID_ARG       Argument is not correct
    -QMI_ERR_NOT_SUPPORTED     Operation is not supported
*/

/** @DESCRIPTION
    This command deletes firewall rules.
*/

//============================================================================
/** @COMMAND QMI_QCMAP_MSGR_GET_WWAN_CONFIG
    @BRIEF Queries the WWAN IP configuration.
    @CMD_VERSION 1.0
    @USAGE Production
    @SECURITY_LEVEL  Medium risk
    @REQUIRED_ACTION Default
*/
//============================================================================

//! @MSG     QMI_QCMAP_MSGR_GET_WWAN_CONFIG_REQ
//! @TYPE    Request
//! @SENDER  Control point
//----------------------------------------------------------------------------

message {
  //! Mobile AP Handle
  //! @VERSION_INTRODUCED 1.0
  //! @VERSION 1.0
  mandatory uint32 mobile_ap_handle;
  /**< Handle identifying the mobile AP call instance.
       The value must be the handle previously returned by
       QMI_QCMAP_ MOBILE_AP_ENABLE_REQ.
  */

  //! Address Type
  //! @VERSION_INTRODUCED 1.0
  //! @VERSION 1.0
  mandatory qcmap_msgr_addr_type_mask addr_type_op;
  /**< WWAN configuration mask. Values: \n
       @MASK ()
  */

} qcmap_msgr_get_wwan_config_req_msg;

//! @MSG     QMI_QCMAP_MSGR_GET_WWAN_CONFIG_RESP
//! @TYPE    Response
//! @SENDER  Service
//----------------------------------------------------------------------------
message {
  //! Result Code
  //! @VERSION_INTRODUCED 1.0
  //! @VERSION 1.0
  mandatory qmi_response_type resp;

  //! IPv4 Address
  //! @VERSION_INTRODUCED 1.0
  //! @VERSION 1.0
  optional uint32 v4_addr;
  /**< IPv4 address. */

  //! IPv6 Address
  //! @VERSION_INTRODUCED 1.0
  //! @VERSION 1.0
  optional uint8 v6_addr[QCMAP_MSGR_IPV6_ADDR_LEN];
  /**< IPv6 address. */

  //! IPv4 Primary DNS Address
  //! @VERSION_INTRODUCED 1.0
  //! @VERSION 1.0
  optional uint32 v4_prim_dns_addr;
  /**< IPv4 primary DNS address. */

  //! IPv4 Secondary DNS Address
  //! @VERSION_INTRODUCED 1.0
  //! @VERSION 1.0
  optional uint32 v4_sec_dns_addr;
  /**< IPv4 secondary DNS address. */

  //! IPv6 Primary DNS Address
  //! @VERSION_INTRODUCED 1.0
  //! @VERSION 1.0
  optional uint8 v6_prim_dns_addr[QCMAP_MSGR_IPV6_ADDR_LEN];
  /**< IPv6 primary DNS address. */

  //! IPv6 Secondary DNS Address
  //! @VERSION_INTRODUCED 1.0
  //! @VERSION 1.0
  optional uint8 v6_sec_dns_addr[QCMAP_MSGR_IPV6_ADDR_LEN];
  /**< IPv6 secondary DNS address. */

} qcmap_msgr_get_wwan_config_resp_msg;

/** @ERROR
    -QMI_ERR_NONE              No error in the request
    -QMI_ERR_INTERNAL          Unexpected error occurred during processing
    -QMI_ERR_MALFORMED_MSG     Message was not formulated correctly by the
                               control point or the message was corrupted
                               during transmission
    -QMI_ERR_MISSING_ARG       One or more required TLVs were missing in the request
    -QMI_ERR_INVALID_HANDLE    Mobile AP handle provided in the request
                               is not valid, i.e., it is not assigned to the
                               control point
    -QMI_ERR_INVALID_ARG       Argument is not correct
    -QMI_ERR_NOT_SUPPORTED     Operation is not supported
*/

/** @DESCRIPTION
    This command queries the WWAN IP configuration for the mobile AP. The
    command must be issued by the control point after QCMAP_MSGR_WWAN_STATUS_IND
    has indicated successfully bringing up a WWAN, otherwise a QMI_ERR_INTERNAL error
    is returned.
*/
 //============================================================================
/** @COMMAND QMI_QCMAP_MSGR_MOBILE_AP_STATUS
    @BRIEF Indicates a change in the current mobile AP status.
    @CMD_VERSION 1.0
    @USAGE Production
    @SECURITY_LEVEL  Medium risk
    @REQUIRED_ACTION Default
*/
//============================================================================

//! @MSG     QMI_QCMAP_MSGR_MOBILE_AP_STATUS_REQ
//! @TYPE    Request
//! @SENDER  Control point
//----------------------------------------------------------------------------

message {
    //! Mobile AP Handle
    //! @VERSION_INTRODUCED 1.0
    //! @VERSION 1.0
    mandatory uint32 mobile_ap_handle;
    /**< Handle identifying the mobile AP call instance.
         The value must be the handle previously returned by
         QMI_QCMAP_ MSGR_MOBILE_AP_ENABLE_REQ.
   */
    /* techpubs note: space added for table formatting */

} qcmap_msgr_mobile_ap_status_req;

//! @MSG     QMI_QCMAP_MSGR_MOBILE_AP_STATUS_RESP
//! @TYPE    Response
//! @SENDER  Service
//----------------------------------------------------------------------------

message {
  //! Result Code
  //! @VERSION_INTRODUCED 1.0
  //! @VERSION 1.0
  mandatory qmi_response_type resp;

  //! Mobile AP Status
  //! @VERSION_INTRODUCED 1.0
  //! @VERSION 1.0
  optional qcmap_msgr_mobile_ap_status_enum mobile_ap_status;
  /**< Indicates the mobile AP status. Values: \n
       @ENUM ()
  */
} qcmap_msgr_mobile_ap_status_resp;

/** @ERROR
    -QMI_ERR_NONE              No error in the request
    -QMI_ERR_INTERNAL          Unexpected error occurred during processing
    -QMI_ERR_MALFORMED_MSG     Message was not formulated correctly by the
                               control point or the message was corrupted
                               during transmission
    -QMI_ERR_INVALID_HANDLE    Mobile AP handle provided in the request
                               is not valid, i.e., it is not assigned to the
                               control point
    -QMI_ERR_NO_MEMORY         Device could not allocate memory to formulate a
                               response
    -QMI_ERR_MISSING_ARG       One or more required TLVs were missing in the request
*/

/** @DESCRIPTION
    This command gets the mobile AP status.
*/

//============================================================================
/** @COMMAND QMI_QCMAP_MSGR_WWAN_STATUS
    @BRIEF Gets the WWAN status.
    @CMD_VERSION 1.0
    @USAGE Production
    @SECURITY_LEVEL  Medium risk
    @REQUIRED_ACTION Default
*/
//============================================================================

//! @MSG     QMI_QCMAP_MSGR_WWAN_STATUS_REQ
//! @TYPE    Request
//! @SENDER  Control point
//----------------------------------------------------------------------------

message {
  //! Mobile AP Handle
  //! @VERSION_INTRODUCED 1.0
  //! @VERSION 1.0
  mandatory uint32 mobile_ap_handle;
  /**< Handle identifying the mobile AP call instance.
       The value must be the handle previously returned by
       QMI_QCMAP_ MOBILE_AP_ENABLE_REQ.
  */

  //! WWAN Call Type
  //! @VERSION_INTRODUCED 1.2
  //! @VERSION 1.2
  optional qcmap_msgr_wwan_call_type call_type;
  /**< WWAN call type for which the status is needed. Values: \n
       @ENUM ()
  */
} qcmap_msgr_wwan_status_req_msg;


//! @MSG     QMI_QCMAP_MSGR_WWAN_STATUS_RESP
//! @TYPE    Response
//! @SENDER  Service
//----------------------------------------------------------------------------

message {
  //! Result Code
  //! @VERSION_INTRODUCED 1.0
  //! @VERSION 1.0
  mandatory qmi_response_type resp;

  //! WWAN Connection Status
  //! @VERSION_INTRODUCED 1.0
  //! @VERSION 1.0
  optional qcmap_msgr_wwan_status_enum conn_status;
  /**< WWAN connection status. Values: \n
       @ENUM ()
   */
} qcmap_msgr_wwan_status_resp_msg;

/** @ERROR
    -QMI_ERR_NONE              No error in the request
    -QMI_ERR_INTERNAL          Unexpected error occurred during processing
    -QMI_ERR_MALFORMED_MSG     Message was not formulated correctly by the
                               control point or the message was corrupted
                               during transmission
    -QMI_ERR_INVALID_HANDLE    Mobile AP handle provided in the request
                               is not valid, i.e., it is not assigned to the
                               control point
    -QMI_ERR_NO_MEMORY         Device could not allocate memory to formulate a
                               response
    -QMI_ERR_MISSING_ARG       One or more required TLVs were missing in the request
*/

/** @DESCRIPTION
    This command queries the WWAN status.
*/

//============================================================================
/** @COMMAND QMI_QCMAP_MSGR_GET_STATION_MODE_STATUS
    @BRIEF Gets the Station Mode status.
    @CMD_VERSION 1.7
    @USAGE Production
    @SECURITY_LEVEL  Medium risk
    @REQUIRED_ACTION Default
*/
//============================================================================

//! @MSG     QMI_QCMAP_MSGR_GET_STATION_MODE_STATUS_REQ
//! @TYPE    Request
//! @SENDER  Control point
//----------------------------------------------------------------------------

message {
} qcmap_msgr_get_station_mode_status_req_msg;


//! @MSG     QMI_QCMAP_MSGR_GET_STATION_MODE_STATUS_RESP
//! @TYPE    Response
//! @SENDER  Service
//----------------------------------------------------------------------------

message {
  //! Result Code
  //! @VERSION_INTRODUCED 1.7
  //! @VERSION 1.7
  mandatory qmi_response_type resp;

  //! WWAN Connection Status
  //! @VERSION_INTRODUCED 1.7
  //! @VERSION 1.7
  optional qcmap_msgr_station_mode_status_enum conn_status;
  /**< Station Mode connection status. Values: \n
       @ENUM ()
   */
} qcmap_msgr_get_station_mode_status_resp_msg;

/** @ERROR
    -QMI_ERR_NONE              No error in the request
    -QMI_ERR_INTERNAL          Unexpected error occurred during processing
    -QMI_ERR_MALFORMED_MSG     Message was not formulated correctly by the
                               control point or the message was corrupted
                               during transmission
    -QMI_ERR_NO_MEMORY         Device could not allocate memory to formulate a
                               response
    -QMI_ERR_MISSING_ARG       One or more required TLVs were missing in the request
*/

/** @DESCRIPTION
    This command queries the Station Mode status.
*/

//============================================================================
/** @COMMAND QMI_QCMAP_MSGR_SET_NAT_TIMEOUT
    @BRIEF Configures different types of NAT timeouts.
    @CMD_VERSION 1.0
    @USAGE Production
    @SECURITY_LEVEL  Medium risk
    @REQUIRED_ACTION Default
*/
//============================================================================

//! @MSG     QMI_QCMAP_MSGR_SET_NAT_TIMEOUT_REQ
//! @TYPE    Request
//! @SENDER  Control point
//----------------------------------------------------------------------------

message {
  //! Mobile AP Handle
  //! @VERSION_INTRODUCED 1.0
  //! @VERSION 1.0
  mandatory uint32 mobile_ap_handle;
  /**< Handle identifying the mobile AP call instance.
       The value must be the handle previously returned by
       QMI_QCMAP_ MOBILE_AP_ENABLE_REQ.
  */

  //! NAT Timeout Type
  //! @VERSION_INTRODUCED 1.0
  //! @VERSION 1.0
  mandatory qcmap_msgr_nat_timeout_enum nat_timeout_type;
  /**< Indicates the NAT Timeout type to be used. Values: \n
       @ENUM ()
  */

  //! NAT Timeout Value
  //! @VERSION_INTRODUCED 1.0
  //! @VERSION 1.0
  mandatory uint32 timeout_value;
  /**< Indicates the NAT Timeout value to be used, in seconds.
  */

} qcmap_msgr_set_nat_timeout_req_msg;


//! @MSG     QMI_QCMAP_MSGR_SET_NAT_TIMEOUT_RESP
//! @TYPE    Response
//! @SENDER  Service
//----------------------------------------------------------------------------
message {
  //! Result Code
  //! @VERSION_INTRODUCED 1.0
  //! @VERSION 1.0
  mandatory qmi_response_type resp;

} qcmap_msgr_set_nat_timeout_resp_msg;

/** @ERROR
    -QMI_ERR_NONE              No error in the request
    -QMI_ERR_INTERNAL          Unexpected error occurred during processing
    -QMI_ERR_MALFORMED_MSG     Message was not formulated correctly by the
                               control point or the message was corrupted
                               during transmission
    -QMI_ERR_MISSING_ARG       One or more required TLVs were missing in the request
    -QMI_ERR_INVALID_HANDLE    Mobile AP handle provided in the request
                               is not valid, i.e., it is not assigned to the
                               control point
    -QMI_ERR_INVALID_ARG       Argument is not correct
    -QMI_ERR_NOT_SUPPORTED     Operation is not supported
*/

/** @DESCRIPTION
    This command sets different NAT timeouts on the device. The command
    handler overwrites any previously configured value with the current value.
*/

//============================================================================
/** @COMMAND QMI_QCMAP_MSGR_GET_NAT_TIMEOUT
    @BRIEF Queries the NAT timeout setting.
    @CMD_VERSION 1.0
    @USAGE Production
    @SECURITY_LEVEL  Medium risk
    @REQUIRED_ACTION Default
*/
//============================================================================

//! @MSG     QMI_QCMAP_MSGR_GET_NAT_TIMEOUT_REQ
//! @TYPE    Request
//! @SENDER  Control point
//----------------------------------------------------------------------------
message {
  //! Mobile AP Handle
  //! @VERSION_INTRODUCED 1.0
  //! @VERSION 1.0
  mandatory uint32 mobile_ap_handle;
  /**< Handle identifying the mobile AP call instance.
       The value must be the handle previously returned by
       QMI_QCMAP_ MOBILE_AP_ENABLE_REQ.
  */

  //! NAT Timeout Type
  //! @VERSION_INTRODUCED 1.0
  //! @VERSION 1.0
  mandatory qcmap_msgr_nat_timeout_enum nat_timeout_type;
  /**< Indicates the NAT Timeout type to be used. Values:\n
       @ENUM ()
  */

} qcmap_msgr_get_nat_timeout_req_msg;

//! @MSG     QMI_QCMAP_MSGR_GET_NAT_TIMEOUT_RESP
//! @TYPE    Response
//! @SENDER  Service
//----------------------------------------------------------------------------
message {
  //! Result Code
  //! @VERSION_INTRODUCED 1.0
  //! @VERSION 1.0
  mandatory qmi_response_type resp;

  //! NAT Timeout
  //! @VERSION_INTRODUCED 1.0
  //! @VERSION 1.0
  optional uint32 timeout_value;
  /**< Indicates the required timeout value, in seconds.
  */
} qcmap_msgr_get_nat_timeout_resp_msg;

/** @ERROR
    -QMI_ERR_NONE              No error in the request
    -QMI_ERR_INTERNAL          Unexpected error occurred during processing
    -QMI_ERR_MALFORMED_MSG     Message was not formulated correctly by the
                               control point or the message was corrupted
                               during transmission
    -QMI_ERR_MISSING_ARG       One or more required TLVs were missing in the request
    -QMI_ERR_INVALID_HANDLE    Mobile AP handle provided in the request
                               is not valid, i.e., it is not assigned to the
                               control point
    -QMI_ERR_NOT_SUPPORTED     Operation is not supported
*/

/** @DESCRIPTION
    This command queries the NAT timeout value on the device.
*/

//============================================================================
/** @COMMAND QMI_QCMAP_MSGR_SET_LAN_CONFIG
    @BRIEF Sets the LAN configuration.
    @CMD_VERSION 1.0
    @USAGE Production
    @SECURITY_LEVEL  High risk
    @REQUIRED_ACTION Default
*/
//============================================================================

//! @MSG     QMI_QCMAP_MSGR_SET_LAN_CONFIG_REQ
//! @TYPE    Request
//! @SENDER  Control point
//----------------------------------------------------------------------------
message {
  //! AP LAN Configuration
  //! @VERSION_INTRODUCED 1.11
  //! @VERSION 1.11
  optional qcmap_msgr_lan_config lan_config;
} qcmap_msgr_set_lan_config_req_msg;

//! @MSG     QMI_QCMAP_MSGR_SET_LAN_CONFIG_RESP
//! @TYPE    Response
//! @SENDER  Service
//----------------------------------------------------------------------------
message {
  //! Result Code
  //! @VERSION_INTRODUCED 1.0
  //! @VERSION 1.0
  mandatory qmi_response_type resp;
} qcmap_msgr_set_lan_config_resp_msg;

/** @ERROR
    -QMI_ERR_NONE              No error in the request
    -QMI_ERR_INTERNAL          Unexpected error occurred during processing
    -QMI_ERR_MALFORMED_MSG     Message was not formulated correctly by the
                               control point or the message was corrupted
                               during transmission
    -QMI_ERR_MISSING_ARG       One or more required TLVs were missing in the request
    -QMI_ERR_NOT_SUPPORTED     Operation is not supported
    -QMI_ERR_NO_EFFECT         Existing configuration is the same as the
                               configuration to be set
*/

/** @DESCRIPTION
    This command sets the LAN configuration.
    All LAN clients will get ip addresses from LAN Config.
    The command handler overwrites any previously configured value with the
    current value.
*/

//============================================================================
/** @COMMAND QMI_QCMAP_MSGR_SET_WLAN_CONFIG
    @BRIEF Sets the WLAN configuration.
    @CMD_VERSION 1.11
    @USAGE Production
    @SECURITY_LEVEL  High risk
    @REQUIRED_ACTION Default
*/
//============================================================================

//! @MSG     QMI_QCMAP_MSGR_SET_WLAN_CONFIG_REQ
//! @TYPE    Request
//! @SENDER  Control point
//----------------------------------------------------------------------------
message {
  //! Mobile AP Handle
  //! @VERSION_INTRODUCED 1.11
  //! @VERSION 1.11
  mandatory uint32 mobile_ap_handle;
  /**< Handle identifying the mobile AP call instance.
       The value must be the handle previously returned by
       QMI_QCMAP_MOBILE_AP_ENABLE_REQ.
  */

  //! WLAN Mode
  //! @VERSION_INTRODUCED 1.11
  //! @VERSION 1.11
  optional qcmap_msgr_wlan_mode_enum wlan_mode;
  /**< Identifies the WLAN mode. Values: \n
       @ENUM ()
  */

  //! Guest AP Access profile
  //! @VERSION_INTRODUCED 1.11
  //! @VERSION 1.11
  optional qcmap_msgr_access_profile guest_ap_acess_profile;
  /**< Sets guest ap access profile \n
  */

  //! Station Configuration
  //! @VERSION_INTRODUCED 1.11
  //! @VERSION 1.11
  optional qcmap_msgr_station_mode_config station_config;

} qcmap_msgr_set_wlan_config_req_msg;

//! @MSG     QMI_QCMAP_MSGR_SET_WLAN_CONFIG_RESP
//! @TYPE    Response
//! @SENDER  Service
//----------------------------------------------------------------------------
message {
  //! Result Code
  //! @VERSION_INTRODUCED 1.11
  //! @VERSION 1.11
  mandatory qmi_response_type resp;
} qcmap_msgr_set_wlan_config_resp_msg;

/** @ERROR
    -QMI_ERR_NONE              No error in the request
    -QMI_ERR_INTERNAL          Unexpected error occurred during processing
    -QMI_ERR_MALFORMED_MSG     Message was not formulated correctly by the
                               control point or the message was corrupted
                               during transmission
    -QMI_ERR_MISSING_ARG       One or more required TLVs were missing in the request
    -QMI_ERR_NOT_SUPPORTED     Operation is not supported
    -QMI_ERR_NO_EFFECT         Existing configuration is the same as the
                               configuration to be set
*/

/** @DESCRIPTION
    This command sets the WLAN configuration. It sets the WLAN mode, guest access profile
    and station mode config.
*/

//============================================================================
/** @COMMAND QMI_QCMAP_MSGR_GET_WLAN_STATUS
    @BRIEF Gets the WLAN status.
    @CMD_VERSION 1.0
    @USAGE Production
    @SECURITY_LEVEL  Medium risk
    @REQUIRED_ACTION Default
*/
//============================================================================

//! @MSG     QMI_QCMAP_MSGR_GET_WLAN_STATUS_REQ
//! @TYPE    Request
//! @SENDER  Control point
//----------------------------------------------------------------------------
message {
   //! Mobile AP Handle
   //! @VERSION_INTRODUCED 1.11
   //! @VERSION 1.11
   mandatory uint32 mobile_ap_handle;
   /**< Handle identifying the mobile AP call instance.
        The value must be the handle previously returned by
        QMI_QCMAP_MSGR_MOBILE_AP_ENABLE_REQ.
   */
} qcmap_msgr_get_wlan_status_req_msg;

//! @MSG     QMI_QCMAP_MSGR_GET_WLAN_STATUS_RESP
//! @TYPE    Response
//! @SENDER  Service
//----------------------------------------------------------------------------
message {
  //! Result Code
  //! @VERSION_INTRODUCED 1.0
  //! @VERSION 1.0
  mandatory qmi_response_type resp;

  //! WLAN Mode
  //! @VERSION_INTRODUCED 1.0
  //! @VERSION 1.0
  optional qcmap_msgr_wlan_mode_enum wlan_mode;
  /**< Identifies the WLAN mode. Values: \n
       @ENUM ()
  */
} qcmap_msgr_get_wlan_status_resp_msg;

/** @ERROR
    -QMI_ERR_NONE              No error in the request
    -QMI_ERR_INTERNAL          Unexpected error occurred during processing
    -QMI_ERR_MALFORMED_MSG     Message was not formulated correctly by the
                               control point or the message was corrupted
                               during transmission
    -QMI_ERR_MISSING_ARG       One or more required TLVs were missing in the request
    -QMI_ERR_NOT_SUPPORTED     Operation is not supported
*/

/** @DESCRIPTION
    This command gets the WLAN status.
*/

//============================================================================
/** @COMMAND QMI_QCMAP_MSGR_ACTIVATE_WLAN
    @BRIEF Activates the WLAN with the latest configuration.
    @CMD_VERSION 1.0
    @USAGE Production
    @SECURITY_LEVEL  High risk
    @REQUIRED_ACTION Default
*/
//============================================================================

//! @MSG     QMI_QCMAP_MSGR_ACTIVATE_WLAN_REQ
//! @TYPE    Request
//! @SENDER  Control point
//----------------------------------------------------------------------------
message {
  //! Mobile AP Handle
  //! @VERSION_INTRODUCED 1.10
  //! @VERSION 1.10
  mandatory uint32 mobile_ap_handle;
  /**< Handle identifying the mobile AP call instance.
       The value must be the handle previously returned by
       QMI_QCMAP_MSGR_MOBILE_AP_ENABLE_REQ.
  */
} qcmap_msgr_activate_wlan_req_msg;

//! @MSG     QMI_QCMAP_MSGR_ACTIVATE_WLAN_RESP
//! @TYPE    Response
//! @SENDER  Service
//----------------------------------------------------------------------------
message {
  //! Result Code
  //! @VERSION_INTRODUCED 1.0
  //! @VERSION 1.0
  mandatory qmi_response_type resp;
} qcmap_msgr_activate_wlan_resp_msg;

/** @ERROR
    -QMI_ERR_NONE              No error in the request
    -QMI_ERR_INTERNAL          Unexpected error occurred during processing
    -QMI_ERR_MALFORMED_MSG     Message was not formulated correctly by the
                               control point or the message was corrupted
                               during transmission
    -QMI_ERR_MISSING_ARG       One or more required TLVs were missing in the request
    -QMI_ERR_NOT_SUPPORTED     Operation is not supported
*/

/** @DESCRIPTION
    This command activates the WLAN with the latest configuration. This
    may cause the WLAN to be disabled and re-enabled depending on the changes
    to the configuration.
*/

//============================================================================
/** @COMMAND QMI_QCMAP_MSGR_ACTIVATE_LAN
    @BRIEF Activates the LAN with the latest configuration.
    @CMD_VERSION 1.11
    @USAGE Production
    @SECURITY_LEVEL  High risk
    @REQUIRED_ACTION Default
*/
//============================================================================

//! @MSG     QMI_QCMAP_MSGR_ACTIVATE_LAN_REQ
//! @TYPE    Request
//! @SENDER  Control point
//----------------------------------------------------------------------------
message {
  //! Mobile AP Handle
  //! @VERSION_INTRODUCED 1.11
  //! @VERSION 1.11
  mandatory uint32 mobile_ap_handle;
  /**< Handle identifying the mobile AP call instance.
       The value must be the handle previously returned by
       QMI_QCMAP_MSGR_MOBILE_AP_ENABLE_REQ.
  */
} qcmap_msgr_activate_lan_req_msg;

//! @MSG     QMI_QCMAP_MSGR_ACTIVATE_LAN_RESP
//! @TYPE    Response
//! @SENDER  Service
//----------------------------------------------------------------------------
message {
  //! Result Code
  //! @VERSION_INTRODUCED 1.11
  //! @VERSION 1.11
  mandatory qmi_response_type resp;
} qcmap_msgr_activate_lan_resp_msg;

/** @ERROR
    -QMI_ERR_NONE              No error in the request
    -QMI_ERR_INTERNAL          Unexpected error occurred during processing
    -QMI_ERR_MALFORMED_MSG     Message was not formulated correctly by the
                               control point or the message was corrupted
                               during transmission
    -QMI_ERR_MISSING_ARG       One or more required TLVs were missing in the request
    -QMI_ERR_NOT_SUPPORTED     Operation is not supported
*/

/** @DESCRIPTION
    This command activates the LAN with the latest configuration. This
    may cause the WLAN to be disabled and re-enabled depending on the changes
    to the configuration. In either case backhaul should not be affected.
*/

//============================================================================
/** @COMMAND QMI_QCMAP_MSGR_GET_LAN_CONFIG
    @BRIEF Gets the LAN configuration.
    @CMD_VERSION 1.0
    @USAGE Production
    @SECURITY_LEVEL Medium risk
    @REQUIRED_ACTION Default
*/
//============================================================================

//! @MSG     QMI_QCMAP_MSGR_GET_LAN_CONFIG_REQ
//! @TYPE    Request
//! @SENDER  Control point
//----------------------------------------------------------------------------
message {
} qcmap_msgr_get_lan_config_req_msg;

//! @MSG     QMI_QCMAP_MSGR_GET_LAN_CONFIG_RESP
//! @TYPE    Response
//! @SENDER  Service
//----------------------------------------------------------------------------
message {
  //! Result Code
  //! @VERSION_INTRODUCED 1.0
  //! @VERSION 1.0
  mandatory qmi_response_type resp;

  //! AP Configuration
  //! @VERSION_INTRODUCED 1.11
  //! @VERSION 1.11
  optional qcmap_msgr_lan_config lan_config;

  //! WLAN and USB Configuration on Access Point
  //! @VERSION_INTRODUCED 1.5
  //! @VERSION 1.5
  optional qcmap_msgr_ap_mode_wlan_usb_ip_config ap_wlan_usb_ip_config;

} qcmap_msgr_get_lan_config_resp_msg;

/** @ERROR
    -QMI_ERR_NONE              No error in the request
    -QMI_ERR_INTERNAL          Unexpected error occurred during processing
    -QMI_ERR_MALFORMED_MSG     Message was not formulated correctly by the
                               control point or the message was corrupted
                               during transmission
    -QMI_ERR_MISSING_ARG       One or more required TLVs were missing in the request
    -QMI_ERR_NOT_SUPPORTED     Operation is not supported
    -QMI_ERR_NO_EFFECT         Existing configuration is the same as the
                               configuration to be set
*/

/** @DESCRIPTION
    This command gets the LAN configuration. The WLAN access point IP range and
	tethered USB IP address are taken from the AP configuration.
*/

//============================================================================
/** @COMMAND QMI_QCMAP_MSGR_GET_WLAN_CONFIG
    @BRIEF Gets the WLAN configuration.
    @CMD_VERSION 1.11
    @USAGE Production
    @SECURITY_LEVEL Medium risk
    @REQUIRED_ACTION Default
*/
//============================================================================

//! @MSG     QMI_QCMAP_MSGR_GET_WLAN_CONFIG_REQ
//! @TYPE    Request
//! @SENDER  Control point
//----------------------------------------------------------------------------
message {
} qcmap_msgr_get_wlan_config_req_msg;

//! @MSG     QMI_QCMAP_MSGR_GET_WLAN_CONFIG_RESP
//! @TYPE    Response
//! @SENDER  Service
//----------------------------------------------------------------------------
message {
  //! Result Code
  //! @VERSION_INTRODUCED 1.11
  //! @VERSION 1.11
  mandatory qmi_response_type resp;

  //! WLAN mode
  //! @VERSION_INTRODUCED 1.11
  //! @VERSION 1.11
  optional qcmap_msgr_wlan_mode_enum wlan_mode;
  /**< Identifies the WLAN mode. Values: \n
       @ENUM ()
  */

  //! Station Configuration
  //! @VERSION_INTRODUCED 1.11
  //! @VERSION 1.11
  optional qcmap_msgr_station_mode_config station_config;

  //! Guest Configuration on Access Point
  //! @VERSION_INTRODUCED 1.11
  //! @VERSION 1.11
  optional qcmap_msgr_access_profile guest_ap_access_profile;

} qcmap_msgr_get_wlan_config_resp_msg;

/** @ERROR
    -QMI_ERR_NONE              No error in the request
    -QMI_ERR_INTERNAL          Unexpected error occurred during processing
    -QMI_ERR_MALFORMED_MSG     Message was not formulated correctly by the
                               control point or the message was corrupted
                               during transmission
    -QMI_ERR_MISSING_ARG       One or more required TLVs were missing in the request
    -QMI_ERR_NOT_SUPPORTED     Operation is not supported
    -QMI_ERR_NO_EFFECT         Existing configuration is the same as the
                               configuration to be set
*/

/** @DESCRIPTION
    This command gets the WLAN configuration.
    It gets the WLAN mode, Guest AP Access Profile and Station Mode config.
*/

//============================================================================
/** @COMMAND QMI_QCMAP_MSGR_ACTIVATE_HOSTAPD_CONFIG
    @BRIEF Activates the HOSTAPD with the latest configuration.
    @CMD_VERSION 1.15
    @USAGE Production
    @SECURITY_LEVEL  High risk
    @REQUIRED_ACTION Default
*/
//============================================================================

//! @MSG     QMI_QCMAP_MSGR_ACTIVATE_HOSTAPD_CONFIG_REQ
//! @TYPE    Request
//! @SENDER  Control point
//----------------------------------------------------------------------------
message {
  //! Mobile AP Handle
  //! @VERSION_INTRODUCED 1.15
  //! @VERSION 1.15
  mandatory uint32 mobile_ap_handle;
  /**< Handle identifying the mobile AP call instance.
       The value must be the handle previously returned by
       QMI_QCMAP_MSGR_MOBILE_AP_ENABLE_REQ.
  */
  //! AP type
  //! @VERSION_INTRODUCED 1.15
  //! @VERSION 1.15
  optional qcmap_msgr_activate_hostapd_ap_enum ap_type;
  /**< Identifies the AP for which settings need to be activated. Values: \n
       @ENUM ()
  */
  //! Action Type
  //! @VERSION_INTRODUCED 1.16
  //! @VERSION 1.16
  optional qcmap_msgr_activate_hostapd_action_enum action_type;
  /**< Identifies the hostapd action which needs to be activated. Values: \n
       @ENUM ()
  */
} qcmap_msgr_activate_hostapd_config_req_msg;

//! @MSG     QMI_QCMAP_MSGR_ACTIVATE_HOSTAPD_CONFIG_RESP
//! @TYPE    Response
//! @SENDER  Service
//----------------------------------------------------------------------------
message {
  //! Result Code
  //! @VERSION_INTRODUCED 1.15
  //! @VERSION 1.15
  mandatory qmi_response_type resp;
} qcmap_msgr_activate_hostapd_config_resp_msg;

/** @ERROR
    -QMI_ERR_NONE              No error in the request
    -QMI_ERR_INTERNAL          Unexpected error occurred during processing
    -QMI_ERR_MALFORMED_MSG     Message was not formulated correctly by the
                               control point or the message was corrupted
                               during transmission
    -QMI_ERR_MISSING_ARG       One or more required TLVs were missing in the request
    -QMI_ERR_NOT_SUPPORTED     Operation is not supported
*/

/** @DESCRIPTION
    This command activates the HOSTAPD with the latest configuration only if
    WLAN is already enabled. This will cause the HOSTAPD to be restarted.
*/

//============================================================================
/** @COMMAND QMI_QCMAP_MSGR_ACTIVATE_SUPPLICANT_CONFIG
    @BRIEF Activates the supplicant with the latest configuration.
    @CMD_VERSION 1.15
    @USAGE Production
    @SECURITY_LEVEL  High risk
    @REQUIRED_ACTION Default
*/
//============================================================================

//! @MSG     QMI_QCMAP_MSGR_ACTIVATE_SUPPLICANT_CONFIG_REQ
//! @TYPE    Request
//! @SENDER  Control point
//----------------------------------------------------------------------------
message {
  //! Mobile AP Handle
  //! @VERSION_INTRODUCED 1.15
  //! @VERSION 1.15
  mandatory uint32 mobile_ap_handle;
  /**< Handle identifying the mobile AP call instance.
       The value must be the handle previously returned by
       QMI_QCMAP_MSGR_MOBILE_AP_ENABLE_REQ.
  */
} qcmap_msgr_activate_supplicant_config_req_msg;

//! @MSG     QMI_QCMAP_MSGR_ACTIVATE_SUPPLICANT_CONFIG_RESP
//! @TYPE    Response
//! @SENDER  Service
//----------------------------------------------------------------------------
message {
  //! Result Code
  //! @VERSION_INTRODUCED 1.15
  //! @VERSION 1.15
  mandatory qmi_response_type resp;
} qcmap_msgr_activate_supplicant_config_resp_msg;

/** @ERROR
    -QMI_ERR_NONE              No error in the request
    -QMI_ERR_INTERNAL          Unexpected error occurred during processing
    -QMI_ERR_MALFORMED_MSG     Message was not formulated correctly by the
                               control point or the message was corrupted
                               during transmission
    -QMI_ERR_MISSING_ARG       One or more required TLVs were missing in the request
    -QMI_ERR_NOT_SUPPORTED     Operation is not supported
*/

/** @DESCRIPTION
    This command activates the supplicant with the latest configuration only if
    WLAN is already enabled in station mode. This will cause the supplicant
    to be restarted.
*/

//============================================================================
/** @COMMAND QMI_QCMAP_MSGR_USB_LINK_UP
    @BRIEF Sets up a USB link for RNDIS/ECM/PPP tethering.
    @CMD_VERSION 1.1
    @USAGE Production
    @SECURITY_LEVEL High risk
    @REQUIRED_ACTION Default
*/
//============================================================================

//! @MSG     QMI_QCMAP_MSGR_USB_LINK_UP_REQ
//! @TYPE    Request
//! @SENDER  Control point
//----------------------------------------------------------------------------
message {
  //! Mobile AP Handle
  //! @VERSION_INTRODUCED 1.1
  //! @VERSION 1.1
  mandatory uint32 mobile_ap_handle;
  /**< Handle identifying the mobile AP call instance.
       The value must be the handle previously returned by
	   QMI_QCMAP_ MOBILE_AP_ENABLE_REQ.
  */

  //! USB Interface Name
  //! @VERSION_INTRODUCED 1.1
  //! @VERSION 1.1
  mandatory qcmap_msgr_usb_link_enum usb_link;
  /**< Identifies the USB tethered link type. Values: \n
       @ENUM ()
  */
} qcmap_msgr_usb_link_up_req_msg;

//! @MSG     QMI_QCMAP_MSGR_USB_LINK_UP_RESP
//! @TYPE    Response
//! @SENDER  Service
//----------------------------------------------------------------------------
message {
  //! Result Code
  //! @VERSION_INTRODUCED 1.1
  //! @VERSION 1.1
  mandatory qmi_response_type resp;
} qcmap_msgr_usb_link_up_resp_msg;

/** @ERROR
    -QMI_ERR_NONE              No error in the request
    -QMI_ERR_INTERNAL          Unexpected error occurred during processing
    -QMI_ERR_MALFORMED_MSG     Message was not formulated correctly by the
                               control point or the message was corrupted
                               during transmission
    -QMI_ERR_MISSING_ARG       One or more required TLVs were missing in the request
    -QMI_ERR_NOT_SUPPORTED     Operation is not supported
    -QMI_ERR_NO_EFFECT         Existing configuration is the same as the
                               configuration to be set
*/

/** @DESCRIPTION
    This command sets up RNDIS/ECM/PPP USB tethering.
*/

//============================================================================
/** @COMMAND QMI_QCMAP_MSGR_USB_LINK_DOWN
    @BRIEF Brings down a USB link for RNDIS/ECM/PPP tethering.
    @CMD_VERSION 1.1
    @USAGE Production
    @SECURITY_LEVEL High risk
    @REQUIRED_ACTION Default
*/
//============================================================================

//! @MSG     QMI_QCMAP_MSGR_USB_LINK_DOWN_REQ
//! @TYPE    Request
//! @SENDER  Control point
//----------------------------------------------------------------------------
message {
  //! Mobile AP Handle
  //! @VERSION_INTRODUCED 1.1
  //! @VERSION 1.1
  mandatory uint32 mobile_ap_handle;
  /**< Handle identifying the mobile AP call instance.
       The value must be the handle previously returned by
	   QMI_QCMAP_ MOBILE_AP_ENABLE_REQ.
  */

  //! USB Interface Name
  //! @VERSION_INTRODUCED 1.1
  //! @VERSION 1.1
  mandatory qcmap_msgr_usb_link_enum usb_link;
  /**< Identifies the USB tethered link type. Values: \n
       @ENUM ()
  */
} qcmap_msgr_usb_link_down_req_msg;

//! @MSG     QMI_QCMAP_MSGR_USB_LINK_DOWN_RESP
//! @TYPE    Response
//! @SENDER  Service
//----------------------------------------------------------------------------
message {
  //! Result Code
  //! @VERSION_INTRODUCED 1.1
  //! @VERSION 1.1
  mandatory qmi_response_type resp;
} qcmap_msgr_usb_link_down_resp_msg;

/** @ERROR
    -QMI_ERR_NONE              No error in the request
    -QMI_ERR_INTERNAL          Unexpected error occurred during processing
    -QMI_ERR_MALFORMED_MSG     Message was not formulated correctly by the
                               control point or the message was corrupted
                               during transmission
    -QMI_ERR_MISSING_ARG       One or more required TLVs were missing in the request
    -QMI_ERR_NOT_SUPPORTED     Operation is not supported
    -QMI_ERR_NO_EFFECT         Existing configuration is the same as the
                               configuration to be set
*/

/** @DESCRIPTION
    This command brings down RNDIS/ECM/PPP USB tethering.
*/

//============================================================================
//============================================================================
/** @COMMAND QMI_QCMAP_MSGR_SET_WWAN_POLICY
    @BRIEF Sets the WWAN policy.
    @CMD_VERSION 1.4
    @USAGE Production
    @SECURITY_LEVEL  High risk
    @REQUIRED_ACTION Default
*/
//============================================================================
//! @MSG     QMI_QCMAP_MSGR_SET_WWAN_POLICY_REQ
//! @TYPE    Request
//! @SENDER  Control point
//----------------------------------------------------------------------------

message {
  //! Mobile AP Handle
  //! @VERSION_INTRODUCED 1.4
  //! @VERSION 1.4
  mandatory uint32 mobile_ap_handle;
  /**< Handle identifying the mobile AP call instance.
   */

  //! WWAN Policy
  //! @VERSION_INTRODUCED 1.4
  //! @VERSION 1.4
  mandatory qcmap_msgr_net_policy_info wwan_policy;
} qcmap_msgr_set_wwan_policy_req_msg ;

//! @MSG     QMI_QCMAP_MSGR_SET_WWAN_POLICY_RESP
//! @TYPE    Response
//! @SENDER  Service
//----------------------------------------------------------------------------

message {
  //! Result Code
  //! @VERSION_INTRODUCED 1.4
  //! @VERSION 1.4
  mandatory qmi_response_type resp;
} qcmap_msgr_set_wwan_policy_resp_msg  ;

/** @ERROR
    -QMI_ERR_NONE              No error in the request
    -QMI_ERR_INTERNAL          Unexpected error occurred during processing
    -QMI_ERR_MALFORMED_MSG     Message was not formulated correctly by the
                               control point or the message was corrupted
                               during transmission
    -QMI_ERR_MISSING_ARG       One or more required TLVs were missing in the request
    -QMI_ERR_INVALID_HANDLE    Mobile AP handle provided in the request
                               is not valid, i.e., it is not assigned to the
                               control point
    -QMI_ERR_INVALID_ARG       Argument is not correct
    -QMI_ERR_NOT_SUPPORTED     Operation is not supported
*/

/** @DESCRIPTION
    This command sets the WWAN policy.
    The command must be issued by the control point to set the WWAN policy
    information.
*/

//============================================================================
/** @COMMAND QMI_QCMAP_MSGR_GET_WWAN_POLICY
    @BRIEF Queries the WWAN policy.
    @CMD_VERSION 1.4
    @USAGE Production
    @SECURITY_LEVEL  Medium risk
    @REQUIRED_ACTION Default
*/
//============================================================================
//! @MSG     QMI_QCMAP_MSGR_GET_WWAN_POLICY_REQ
//! @TYPE    Request
//! @SENDER  Control point
//----------------------------------------------------------------------------

message {

} qcmap_msgr_get_wwan_policy_req_msg ;

//! @MSG     QMI_QCMAP_MSGR_GET_WWAN_POLICY_RESP
//! @TYPE    Response
//! @SENDER  Service
//----------------------------------------------------------------------------
message {
  //! Result Code
  //! @VERSION_INTRODUCED 1.4
  //! @VERSION 1.4
  mandatory qmi_response_type resp;

   //! WWAN Policy
  //! @VERSION_INTRODUCED 1.4
  //! @VERSION 1.4
  optional qcmap_msgr_net_policy_info wwan_policy;
} qcmap_msgr_get_wwan_policy_resp_msg ;

/** @ERROR
    -QMI_ERR_NONE              No error in the request
    -QMI_ERR_INTERNAL          Unexpected error occurred during processing
    -QMI_ERR_MALFORMED_MSG     Message was not formulated correctly by the
                               control point or the message was corrupted
                               during transmission
    -QMI_ERR_MISSING_ARG       One or more required TLVs were missing in the request
    -QMI_ERR_INVALID_ARG       Argument is not correct
    -QMI_ERR_NOT_SUPPORTED     Operation is not supported
*/

/** @DESCRIPTION
    This command queries the WWAN policy for the mobile AP. The
    command must be issued by the control point to get the WWAN policy information.
*/

//============================================================================
/** @COMMAND QMI_QCMAP_MSGR_ENABLE_UPNP
    @BRIEF Enables UPnP discovery of other networked devices.
    @CMD_VERSION 1.4
    @USAGE Production
    @SECURITY_LEVEL  Medium risk
    @REQUIRED_ACTION Default
*/
//============================================================================

//! @MSG     QMI_QCMAP_MSGR_ENABLE_UPNP_REQ
//! @TYPE    Request
//! @SENDER  Control point
//----------------------------------------------------------------------------
message {
} qcmap_msgr_enable_upnp_req_msg;

//! @MSG     QMI_QCMAP_MSGR_ENABLE_UPNP_RESP
//! @TYPE    Response
//! @SENDER  Service
//----------------------------------------------------------------------------
message {
  //! Result Code
  //! @VERSION_INTRODUCED 1.4
  //! @VERSION 1.4
  mandatory qmi_response_type resp;
} qcmap_msgr_enable_upnp_resp_msg;

/** @ERROR
    -QMI_ERR_NONE              No error in the request
    -QMI_ERR_INTERNAL          Unexpected error occurred during processing
    -QMI_ERR_MALFORMED_MSG     Message was not formulated correctly by the
                               control point or the message was corrupted
                               during transmission
    -QMI_ERR_MISSING_ARG       One or more required TLVs were missing in the request
    -QMI_ERR_NOT_SUPPORTED     Operation is not supported
	-QMI_ERR_NO_EFFECT         UPnP is already enabled
*/

/** @DESCRIPTION
    This command enables UPnP discovery of other networked devices

*/

//============================================================================
/** @COMMAND QMI_QCMAP_MSGR_DISABLE_UPNP
    @BRIEF Disables UPnP discovery of other networked devices.
    @CMD_VERSION 1.4
    @USAGE Production
    @SECURITY_LEVEL  Medium risk
    @REQUIRED_ACTION Default
*/
//============================================================================

//! @MSG     QMI_QCMAP_MSGR_DISABLE_UPNP_REQ
//! @TYPE    Request
//! @SENDER  Control point
//----------------------------------------------------------------------------
message {
} qcmap_msgr_disable_upnp_req_msg;

//! @MSG     QMI_QCMAP_MSGR_DISABLE_UPNP_RESP
//! @TYPE    Response
//! @SENDER  Service
//----------------------------------------------------------------------------
message {
  //! Result Code
  //! @VERSION_INTRODUCED 1.4
  //! @VERSION 1.4
  mandatory qmi_response_type resp;
} qcmap_msgr_disable_upnp_resp_msg;

/** @ERROR
    -QMI_ERR_NONE              No error in the request
    -QMI_ERR_INTERNAL          Unexpected error occurred during processing
    -QMI_ERR_MALFORMED_MSG     Message was not formulated correctly by the
                               control point or the message was corrupted
                               during transmission
    -QMI_ERR_MISSING_ARG       One or more required TLVs were missing in the request
    -QMI_ERR_NOT_SUPPORTED     Operation is not supported
	-QMI_ERR_NO_EFFECT         UPnP was not enabled
*/

/** @DESCRIPTION
    This command disables UPnP discovery of other networked devices.
*/

//============================================================================
/** @COMMAND QMI_QCMAP_MSGR_ENABLE_DLNA
    @BRIEF Enables a DLNA media server to share content with network devices.
    @CMD_VERSION 1.4
    @USAGE Production
    @SECURITY_LEVEL  Medium risk
    @REQUIRED_ACTION Default
*/
//============================================================================

//! @MSG     QMI_QCMAP_MSGR_ENABLE_DLNA_REQ
//! @TYPE    Request
//! @SENDER  Control point
//----------------------------------------------------------------------------
message {
} qcmap_msgr_enable_dlna_req_msg;

//! @MSG     QMI_QCMAP_MSGR_ENABLE_DLNA_RESP
//! @TYPE    Response
//! @SENDER  Service
//----------------------------------------------------------------------------
message {
  //! Result Code
  //! @VERSION_INTRODUCED 1.4
  //! @VERSION 1.4
  mandatory qmi_response_type resp;
} qcmap_msgr_enable_dlna_resp_msg;

/** @ERROR
    -QMI_ERR_NONE              No error in the request
    -QMI_ERR_INTERNAL          Unexpected error occurred during processing
    -QMI_ERR_MALFORMED_MSG     Message was not formulated correctly by the
                               control point or the message was corrupted
                               during transmission
    -QMI_ERR_MISSING_ARG       One or more required TLVs were missing in the request
    -QMI_ERR_NOT_SUPPORTED     Operation is not supported
	-QMI_ERR_NO_EFFECT         DLNA is already enabled
*/

/** @DESCRIPTION
    This command enables a DLNA media server to share content with network devices.
*/

//============================================================================
/** @COMMAND QMI_QCMAP_MSGR_DISABLE_DLNA
    @BRIEF Disables a DLNA media server from sharing content with network devices.
    @CMD_VERSION 1.4
    @USAGE Production
    @SECURITY_LEVEL  Medium risk
    @REQUIRED_ACTION Default
*/
//============================================================================

//! @MSG     QMI_QCMAP_MSGR_DISABLE_DLNA_REQ
//! @TYPE    Request
//! @SENDER  Control point
//----------------------------------------------------------------------------
message {
} qcmap_msgr_disable_dlna_req_msg;

//! @MSG     QMI_QCMAP_MSGR_DISABLE_DLNA_RESP
//! @TYPE    Response
//! @SENDER  Service
//----------------------------------------------------------------------------
message {
  //! Result Code
  //! @VERSION_INTRODUCED 1.4
  //! @VERSION 1.4
  mandatory qmi_response_type resp;
} qcmap_msgr_disable_dlna_resp_msg;

/** @ERROR
    -QMI_ERR_NONE              No error in the request
    -QMI_ERR_INTERNAL          Unexpected error occurred during processing
    -QMI_ERR_MALFORMED_MSG     Message was not formulated correctly by the
                               control point or the message was corrupted
                               during transmission
    -QMI_ERR_MISSING_ARG       One or more required TLVs were missing in the request
    -QMI_ERR_NOT_SUPPORTED     Operation is not supported
	-QMI_ERR_NO_EFFECT         DLNA was not enabled
*/

/** @DESCRIPTION
    This command disables a DLNA media server from sharing content with network devices.
*/
//============================================================================
/** @COMMAND QMI_QCMAP_MSGR_SET_FIREWALL_CONFIG
    @BRIEF Sets the firewall configuration.
    @CMD_VERSION 1.5
    @USAGE Production
    @SECURITY_LEVEL  High risk
    @REQUIRED_ACTION Default
*/
//============================================================================

//! @MSG     QMI_QCMAP_MSGR_SET_FIREWALL_CONFIG_REQ
//! @TYPE    Request
//! @SENDER  Control point
//----------------------------------------------------------------------------
message {
  //! Mobile AP Handle
  //! @VERSION_INTRODUCED 1.5
  //! @VERSION 1.5
  mandatory uint32 mobile_ap_handle;
  /**< Handle identifying the mobile AP call instance.
       The value must be the handle previously returned by
       QMI_QCMAP_ MSGR_MOBILE_AP_ENABLE_REQ.
  */

  //! Firewall Enabled
  //! @VERSION_INTRODUCED 1.5
  //! @VERSION 1.5
  mandatory boolean firewall_enabled;
  /**< Indicates whether the firewall is to be enabled or disabled; boolean value.
  */

  //! Accept or Drop Packets
  //! @VERSION_INTRODUCED 1.5
  //! @VERSION 1.5
  optional boolean pkts_allowed;
  /**< Indicates whether packets are to be accepted or dropped; boolean value.
  */
} qcmap_msgr_set_firewall_config_req_msg;

//! @MSG     QMI_QCMAP_MSGR_SET_FIREWALL_CONFIG_RESP
//! @TYPE    Response
//! @SENDER  Service
//----------------------------------------------------------------------------
message {
  //! Result Code
  //! @VERSION_INTRODUCED 1.5
  //! @VERSION 1.5
  mandatory qmi_response_type resp;

} qcmap_msgr_set_firewall_config_resp_msg;

/** @ERROR
    -QMI_ERR_NONE              No error in the request
    -QMI_ERR_INTERNAL          Unexpected error occurred during processing
    -QMI_ERR_MALFORMED_MSG     Message was not formulated correctly by the
                               control point or the message was corrupted
                               during transmission
    -QMI_ERR_MISSING_ARG       One or more required TLVs were missing in the request
    -QMI_ERR_INVALID_HANDLE    Mobile AP handle provided in the request
                               is not valid, i.e., it is not assigned to the
                               control point
    -QMI_ERR_INVALID_ARG       Argument is not correct
    -QMI_ERR_NOT_SUPPORTED     Operation is not supported
*/

/** @DESCRIPTION
    This command enables or disables the firewall. If the firewall is enabled, it
    sets the firewall state to accept or drop the packets.
*/

//============================================================================
/** @COMMAND QMI_QCMAP_MSGR_GET_FIREWALL_CONFIG
    @BRIEF Gets the firewall configuration.
    @CMD_VERSION 1.5
    @USAGE Production
    @SECURITY_LEVEL  Medium risk
    @REQUIRED_ACTION Default
*/
//============================================================================

//! @MSG     QMI_QCMAP_MSGR_GET_FIREWALL_CONFIG_REQ
//! @TYPE    Request
//! @SENDER  Control point
//----------------------------------------------------------------------------
message {
  //! Mobile AP Handle
  //! @VERSION_INTRODUCED 1.5
  //! @VERSION 1.5
  mandatory uint32 mobile_ap_handle;
  /**< Handle identifying the mobile AP call instance.
       The value must be the handle previously returned by
       QMI_QCMAP_MSGR_MOBILE_AP_ENABLE_REQ.
  */
} qcmap_msgr_get_firewall_config_req_msg;

//! @MSG     QMI_QCMAP_MSGR_GET_FIREWALL_CONFIG_RESP
//! @TYPE    Response
//! @SENDER  Service
//----------------------------------------------------------------------------
message {
  //! Result Code
  //! @VERSION_INTRODUCED 1.5
  //! @VERSION 1.5
  mandatory qmi_response_type resp;

  //! Firewall Enabled
  //! @VERSION_INTRODUCED 1.5
  //! @VERSION 1.5
  optional boolean firewall_enabled;
  /**< Indicates whether the firewall is enabled or disabled; boolean value.
  */

  //! Accept or Drop Packets
  //! @VERSION_INTRODUCED 1.5
  //! @VERSION 1.5
  optional boolean pkts_allowed;
  /**< Indicates whether packets are accepted or dropped; boolean value.
  */
} qcmap_msgr_get_firewall_config_resp_msg;

/** @ERROR
    -QMI_ERR_NONE              No error in the request
    -QMI_ERR_INTERNAL          Unexpected error occurred during processing
    -QMI_ERR_MALFORMED_MSG     Message was not formulated correctly by the
                               control point or the message was corrupted
                               during transmission
    -QMI_ERR_MISSING_ARG       One or more required TLVs were missing in the request
    -QMI_ERR_INVALID_HANDLE    Mobile AP handle provided in the request
                               is not valid, i.e., it is not assigned to the
                               control point
    -QMI_ERR_INVALID_ARG       Argument is not correct
    -QMI_ERR_NOT_SUPPORTED     Operation is not supported
*/

/** @DESCRIPTION
    This command gets the firewall configuration. The configuration values identify
    whether the firewall is enabled or disabled and whether the firewall state is
    configured to accept or drop packets.
*/

//============================================================================
/** @COMMAND QMI_QCMAP_MSGR_ENABLE_MULTICAST_DNS_RESPONDER
    @BRIEF Enables service discovery over a local LAN using multicast DNS.
    @CMD_VERSION 1.5
    @USAGE Production
    @SECURITY_LEVEL  Medium risk
    @REQUIRED_ACTION Default
*/
//============================================================================

//! @MSG     QMI_QCMAP_MSGR_ENABLE_MULTICAST_DNS_RESPONDER_REQ
//! @TYPE    Request
//! @SENDER  Control point
//----------------------------------------------------------------------------
message {
} qcmap_msgr_enable_multicast_dns_req_msg;

//! @MSG     QMI_QCMAP_MSGR_ENABLE_MULTICAST_DNS_RESPONDER_RESP
//! @TYPE    Response
//! @SENDER  Service
//----------------------------------------------------------------------------
message {
  //! Result Code
  //! @VERSION_INTRODUCED 1.5
  //! @VERSION 1.5
  mandatory qmi_response_type resp;
} qcmap_msgr_enable_multicast_dns_resp_msg;

/** @ERROR
    -QMI_ERR_NONE              No error in the request
    -QMI_ERR_INTERNAL          Unexpected error occurred during processing
    -QMI_ERR_MALFORMED_MSG     Message was not formulated correctly by the
                               control point or the message was corrupted
                               during transmission
    -QMI_ERR_MISSING_ARG       One or more required TLVs were missing in the request
    -QMI_ERR_NOT_SUPPORTED     Operation is not supported
	-QMI_ERR_NO_EFFECT         mDNS is already enabled
*/

/** @DESCRIPTION
    This command enables service discovery over a local LAN using multicast DNS.
*/

//============================================================================
/** @COMMAND QMI_QCMAP_MSGR_DISABLE_MULTICAST_DNS_RESPONDER
    @BRIEF Disables service discovery over a local LAN using multicast DNS.
    @CMD_VERSION 1.5
    @USAGE Production
    @SECURITY_LEVEL  Medium risk
    @REQUIRED_ACTION Default
*/
//============================================================================

//! @MSG     QMI_QCMAP_MSGR_DISABLE_MULTICAST_DNS_RESPONDER_REQ
//! @TYPE    Request
//! @SENDER  Control point
//----------------------------------------------------------------------------
message {
} qcmap_msgr_disable_multicast_dns_req_msg;

//! @MSG     QMI_QCMAP_MSGR_DISABLE_MULTICAST_DNS_RESPONDER_RESP
//! @TYPE    Response
//! @SENDER  Service
//----------------------------------------------------------------------------
message {
  //! Result Code
  //! @VERSION_INTRODUCED 1.5
  //! @VERSION 1.5
  mandatory qmi_response_type resp;
} qcmap_msgr_disable_multicast_dns_resp_msg;

/** @ERROR
    -QMI_ERR_NONE              No error in the request
    -QMI_ERR_INTERNAL          Unexpected error occurred during processing
    -QMI_ERR_MALFORMED_MSG     Message was not formulated correctly by the
                               control point or the message was corrupted
                               during transmission
    -QMI_ERR_MISSING_ARG       One or more required TLVs were missing in the request
    -QMI_ERR_NOT_SUPPORTED     Operation is not supported
	-QMI_ERR_NO_EFFECT         mDNS was not enabled
*/

/** @DESCRIPTION
   This command disables service discovery over a local LAN using multicast DNS.
*/

//============================================================================
/** @COMMAND QMI_QCMAP_MSGR_GET_UPNP_STATUS
    @BRIEF Gets the UPnP status.
    @CMD_VERSION 1.6
    @USAGE Production
    @SECURITY_LEVEL  Medium risk
    @REQUIRED_ACTION Default
*/
//============================================================================

//! @MSG     QMI_QCMAP_MSGR_GET_UPNP_STATUS_REQ
//! @TYPE    Request
//! @SENDER  Control point
//----------------------------------------------------------------------------
message {
} qcmap_msgr_get_upnp_status_req_msg;

//! @MSG     QMI_QCMAP_MSGR_GET_UPNP_STATUS_RESP
//! @TYPE    Response
//! @SENDER  Service
//----------------------------------------------------------------------------
message {
  //! Result Code
  //! @VERSION_INTRODUCED 1.6
  //! @VERSION 1.6
  mandatory qmi_response_type resp;

  //! UPNP Mode
  //! @VERSION_INTRODUCED 1.6
  //! @VERSION 1.6
  optional qcmap_msgr_upnp_mode_enum upnp_mode;
  /**< Identifies the UPnP mode. Values: \n
       @ENUM ()
  */
} qcmap_msgr_get_upnp_status_resp_msg;

/** @ERROR
    -QMI_ERR_NONE              No error in the request
    -QMI_ERR_INTERNAL          Unexpected error occurred during processing
    -QMI_ERR_MALFORMED_MSG     Message was not formulated correctly by the
                               control point or the message was corrupted
                               during transmission
    -QMI_ERR_MISSING_ARG       One or more required TLVs were missing in the request
    -QMI_ERR_NOT_SUPPORTED     Operation is not supported
*/

/** @DESCRIPTION
    This command returns the current status UPnP.
*/

//============================================================================
/** @COMMAND QMI_QCMAP_MSGR_GET_DLNA_STATUS
    @BRIEF Gets the DLNA status.
    @CMD_VERSION 1.6
    @USAGE Production
    @SECURITY_LEVEL  Medium risk
    @REQUIRED_ACTION Default
*/
//============================================================================

//! @MSG     QMI_QCMAP_MSGR_GET_DLNA_STATUS_REQ
//! @TYPE    Request
//! @SENDER  Control point
//----------------------------------------------------------------------------
message {
} qcmap_msgr_get_dlna_status_req_msg;

//! @MSG     QMI_QCMAP_MSGR_GET_DLNA_STATUS_RESP
//! @TYPE    Response
//! @SENDER  Service
//----------------------------------------------------------------------------
message {
  //! Result Code
  //! @VERSION_INTRODUCED 1.6
  //! @VERSION 1.6
  mandatory qmi_response_type resp;

  //! DLNA Mode
  //! @VERSION_INTRODUCED 1.6
  //! @VERSION 1.6
  optional qcmap_msgr_dlna_mode_enum dlna_mode;
  /**< Identifies the DLNA mode. Values: \n
       @ENUM ()
  */
} qcmap_msgr_get_dlna_status_resp_msg;

/** @ERROR
    -QMI_ERR_NONE              No error in the request
    -QMI_ERR_INTERNAL          Unexpected error occurred during processing
    -QMI_ERR_MALFORMED_MSG     Message was not formulated correctly by the
                               control point or the message was corrupted
                               during transmission
    -QMI_ERR_MISSING_ARG       One or more required TLVs were missing in the request
    -QMI_ERR_NOT_SUPPORTED     Operation is not supported
*/

/** @DESCRIPTION
    This command returns the current status DLNA.
*/

//============================================================================
/** @COMMAND QMI_QCMAP_MSGR_GET_MULTICAST_DNS_STATUS
    @BRIEF Gets the Multicast DNS status.
    @CMD_VERSION 1.6
    @USAGE Production
    @SECURITY_LEVEL  Medium risk
    @REQUIRED_ACTION Default
*/
//============================================================================

//! @MSG     QMI_QCMAP_MSGR_GET_MULTICAST_DNS_STATUS_REQ
//! @TYPE    Request
//! @SENDER  Control point
//----------------------------------------------------------------------------
message {
} qcmap_msgr_get_multicast_dns_status_req_msg;

//! @MSG     QMI_QCMAP_MSGR_GET_MULTICAST_DNS_STATUS_RESP
//! @TYPE    Response
//! @SENDER  Service
//----------------------------------------------------------------------------
message {
  //! Result Code
  //! @VERSION_INTRODUCED 1.6
  //! @VERSION 1.6
  mandatory qmi_response_type resp;

  //! MDNS Mode
  //! @VERSION_INTRODUCED 1.6
  //! @VERSION 1.6
  optional qcmap_msgr_mdns_mode_enum mdns_mode;
  /**< Identifies the Multicast DNS mode. Values: \n
       @ENUM ()
  */
} qcmap_msgr_get_multicast_dns_status_resp_msg;

/** @ERROR
    -QMI_ERR_NONE              No error in the request
    -QMI_ERR_INTERNAL          Unexpected error occurred during processing
    -QMI_ERR_MALFORMED_MSG     Message was not formulated correctly by the
                               control point or the message was corrupted
                               during transmission
    -QMI_ERR_MISSING_ARG       One or more required TLVs were missing in the request
    -QMI_ERR_NOT_SUPPORTED     Operation is not supported
*/

/** @DESCRIPTION
    This command returns the current status of Multicast DNS.
*/

//============================================================================
/** @COMMAND QMI_QCMAP_MSGR_SET_QCMAP_BOOTUP_CFG
    @BRIEF Sets Bootup values for MobileAP components.

    @CMD_VERSION 1.9
    @USAGE Production
    @SECURITY_LEVEL  High risk
    @REQUIRED_ACTION Default
*/
//============================================================================

//! @MSG     QMI_QCMAP_MSGR_SET_QCMAP_BOOTUP_CFG_REQ
//! @TYPE    Request
//! @SENDER  Control point
//----------------------------------------------------------------------------
message {

  //! Mobile AP Bootup Flag
  //! @VERSION_INTRODUCED 1.11
  //! @VERSION 1.11
  optional qcmap_msgr_bootup_flag mobileap_bootup_flag;
  /**< This flag is used to start Mobile AP on bootup.
        If set to true Mobile AP would be enabled on bootup.
  */

  //! WLAN Bootup Flag
  //! @VERSION_INTRODUCED 1.11
  //! @VERSION 1.11
  optional qcmap_msgr_bootup_flag wlan_bootup_flag;
  /**< This flag is used to bring up WLAN on bootup.
        If set to true, then WLAN would be enabled on bootup.
  */
} qcmap_msgr_set_qcmap_bootup_cfg_req_msg;

//! @MSG    QMI_QCMAP_MSGR_SET_QCMAP_BOOTUP_CFG_RESP
//! @TYPE    Response
//! @SENDER  Service
//----------------------------------------------------------------------------
message {
  //! Result Code
  //! @VERSION_INTRODUCED 1.9
  //! @VERSION 1.9
  mandatory qmi_response_type resp;
} qcmap_msgr_set_qcmap_bootup_cfg_resp_msg;

/** @ERROR
    -QMI_ERR_NONE              No error in the request
    -QMI_ERR_INTERNAL          Unexpected error occurred during processing
    -QMI_ERR_MALFORMED_MSG     Message was not formulated correctly by the
                               control point or the message was corrupted
                               during transmission
    -QMI_ERR_NOT_SUPPORTED     Operation is not supported
*/

/** @DESCRIPTION
    This command sets the bootup behaviour of QCMAP (mobile AP) and
	related components. The default flags are set to false i.e. do not bringup
	wlan and mobileap on bootup.
*/

//============================================================================
/** @COMMAND QMI_QCMAP_MSGR_GET_QCMAP_BOOTUP_CFG
    @BRIEF Gets Bootup values for QCMAP components
    on the ARM\reg Cortex\tmns-A5 processor.

    @CMD_VERSION 1.9
    @USAGE Production
    @SECURITY_LEVEL  Medium risk
    @REQUIRED_ACTION Default
*/
//============================================================================

//! @MSG     QMI_QCMAP_MSGR_GET_QCMAP_BOOTUP_CFG_REQ
//! @TYPE    Request
//! @SENDER  Control point
//----------------------------------------------------------------------------
message {
} qcmap_msgr_get_qcmap_bootup_cfg_req_msg;

//! @MSG    QMI_QCMAP_MSGR_GET_QCMAP_BOOTUP_CFG_RESP
//! @TYPE    Response
//! @SENDER  Service
//----------------------------------------------------------------------------
message {

  //! Result Code
  //! @VERSION_INTRODUCED 1.9
  //! @VERSION 1.9
  mandatory qmi_response_type resp;

  //! Mobile AP Bootup Flag
  //! @VERSION_INTRODUCED 1.11
  //! @VERSION 1.11
  optional qcmap_msgr_bootup_flag mobileap_bootup_flag;
  /**< This flag will indicate the bootup behaviour of Mobile AP.
        If found to be true, Mobile AP would be enabled on bootup.
  */

  //! WLAN Bootup Flag
  //! @VERSION_INTRODUCED 1.11
  //! @VERSION 1.11
  optional qcmap_msgr_bootup_flag wlan_bootup_flag;
  /**< This flag indicated the bootup behaviour of WLAN.
        If found to be true, WLAN would be enabled on bootup.
  */

} qcmap_msgr_get_qcmap_bootup_cfg_resp_msg;

/** @ERROR
    -QMI_ERR_NONE              No error in the request
    -QMI_ERR_INTERNAL          Unexpected error occurred during processing
    -QMI_ERR_MALFORMED_MSG     Message was not formulated correctly by the
                               control point or the message was corrupted
                               during transmission
    -QMI_ERR_MISSING_ARG       One or more required TLVs were missing in the request
    -QMI_ERR_NOT_SUPPORTED     Operation is not supported
*/

/** @DESCRIPTION
    This command gets the default bootup behaviour of QCMAP (mobile AP) and
	related components. Depending upon the default behaviour the QCMAP components
	will either be enable or disable on bootup.
*/

//============================================================================
/** @COMMAND QMI_QCMAP_MSGR_SET_DLNA_MEDIA_DIR
    @BRIEF Sets the DLNA media directory.
    @CMD_VERSION 1.10
    @USAGE Production
    @SECURITY_LEVEL  Critical
    @SECURITY_SUBLEVEL EFS
    @REQUIRED_ACTION Review
*/
//============================================================================

//! @MSG     QMI_QCMAP_MSGR_SET_DLNA_MEDIA_DIR_REQ
//! @TYPE    Request
//! @SENDER  Control point
//----------------------------------------------------------------------------
message {
  //! Media Directory
  //! @VERSION_INTRODUCED 1.10
  //! @VERSION 1.10
  mandatory char media_dir<QCMAP_MSGR_MAX_DLNA_DIR_LEN>;
} qcmap_msgr_set_dlna_media_dir_req_msg;

//! @MSG     QMI_QCMAP_MSGR_SET_DLNA_MEDIA_DIR_RESP
//! @TYPE    Response
//! @SENDER  Service
//----------------------------------------------------------------------------
message {
  //! Result Code
  //! @VERSION_INTRODUCED 1.10
  //! @VERSION 1.10
  mandatory qmi_response_type resp;
} qcmap_msgr_set_dlna_media_dir_resp_msg;

/** @ERROR
    -QMI_ERR_NONE              No error in the request
    -QMI_ERR_INTERNAL          Unexpected error occurred during processing
    -QMI_ERR_MALFORMED_MSG     Message was not formulated correctly by the
                               control point or the message was corrupted
                               during transmission
    -QMI_ERR_MISSING_ARG       One or more required TLVs were missing in the request
    -QMI_ERR_NOT_SUPPORTED     Operation is not supported
*/

/** @DESCRIPTION
    This command updates the current media directory of DLNA.
*/

//============================================================================
/** @COMMAND QMI_QCMAP_MSGR_GET_DLNA_MEDIA_DIR
    @BRIEF Retrieves the DLNA media directory.
    @CMD_VERSION 1.10
    @USAGE Production
    @SECURITY_LEVEL  Critical
    @SECURITY_SUBLEVEL EFS
    @REQUIRED_ACTION Review
*/
//============================================================================

//! @MSG     QMI_QCMAP_MSGR_GET_DLNA_MEDIA_DIR_REQ
//! @TYPE    Request
//! @SENDER  Control point
//----------------------------------------------------------------------------
message {
} qcmap_msgr_get_dlna_media_dir_req_msg;

//! @MSG     QMI_QCMAP_MSGR_GET_DLNA_MEDIA_DIR_RESP
//! @TYPE    Response
//! @SENDER  Service
//----------------------------------------------------------------------------
message {
  //! Result Code
  //! @VERSION_INTRODUCED 1.10
  //! @VERSION 1.10
  mandatory qmi_response_type resp;

  //! Media Directory
  //! @VERSION_INTRODUCED 1.10
  //! @VERSION 1.10
  optional char media_dir<QCMAP_MSGR_MAX_DLNA_DIR_LEN>;
} qcmap_msgr_get_dlna_media_dir_resp_msg;

/** @ERROR
    -QMI_ERR_NONE              No error in the request
    -QMI_ERR_INTERNAL          Unexpected error occurred during processing
    -QMI_ERR_MALFORMED_MSG     Message was not formulated correctly by the
                               control point or the message was corrupted
                               during transmission
    -QMI_ERR_MISSING_ARG       One or more required TLVs were missing in the request
    -QMI_ERR_NOT_SUPPORTED     Operation is not supported
*/

/** @DESCRIPTION
    This command retrieves the current media directory of DLNA.
*/

//============================================================================
/** @COMMAND QMI_QCMAP_MSGR_GET_DATA_BITRATE
    @BRIEF Retrieves the current data bitrates.
    @CMD_VERSION 1.12
    @USAGE Production
    @SECURITY_LEVEL  Medium risk
    @REQUIRED_ACTION Default
*/
//============================================================================

//! @MSG     QMI_QCMAP_MSGR_DATA_BITRATE_DIR_REQ
//! @TYPE    Request
//! @SENDER  Control point
//----------------------------------------------------------------------------
message {
  //! Result Code
  //! @VERSION_INTRODUCED 1.13
  //! @VERSION 1.13
  mandatory uint32 mobile_ap_handle;
  /**< Handle identifying the mobile AP call instance.
       The value must be the handle previously returned by
       QMI_QCMAP_MSGR_MOBILE_AP_ENABLE_REQ.
  */
} qcmap_msgr_get_data_bitrate_req_msg;

//! @MSG     QMI_QCMAP_MSGR_GET_DATA_BITRATE_RESP
//! @TYPE    Response
//! @SENDER  Service
//----------------------------------------------------------------------------
message {
  //! Result Code
  //! @VERSION_INTRODUCED 1.12
  //! @VERSION 1.12
  mandatory qmi_response_type resp;

  //! Media Directory
  //! @VERSION_INTRODUCED 1.12
  //! @VERSION 1.12
  optional qcmap_msgr_data_bitrate data_rate;
} qcmap_msgr_get_data_bitrate_resp_msg;

/** @ERROR
    -QMI_ERR_NONE              No error in the request
    -QMI_ERR_INTERNAL          Unexpected error occurred during processing
    -QMI_ERR_MALFORMED_MSG     Message was not formulated correctly by the
                               control point or the message was corrupted
                               during transmission
    -QMI_ERR_MISSING_ARG       One or more required TLVs were missing in the request
    -QMI_ERR_NOT_SUPPORTED     Operation is not supported
*/

/** @DESCRIPTION
    Returns a struct with the current data bearer bitrates
*/

//============================================================================
/** @COMMAND QMI_QCMAP_MSGR_GET_UPNP_NOTIFY_INTERVAL
    @BRIEF Retrieves UPnP notify interval.
    @CMD_VERSION 1.13
    @USAGE Production
    @SECURITY_LEVEL  High risk
    @REQUIRED_ACTION Default
*/
//============================================================================

//! @MSG     QMI_QCMAP_MSGR_GET_UPNP_NOTIFY_INTERVAL_REQ
//! @TYPE    Request
//! @SENDER  Control point
//----------------------------------------------------------------------------
message {
} qcmap_msgr_get_upnp_notify_interval_req_msg;

//! @MSG     QMI_QCMAP_MSGR_GET_UPNP_NOTIFY_INTERVAL_RESP
//! @TYPE    Response
//! @SENDER  Service
//----------------------------------------------------------------------------
message {
  //! Result Code
  //! @VERSION_INTRODUCED 1.13
  //! @VERSION 1.13
  mandatory qmi_response_type resp;

  //! Notify Interval
  //! @VERSION_INTRODUCED 1.13
  //! @VERSION 1.13
  optional int32 notify_interval;
  /**< Specifies the UPnP notify interval in seconds, 30-60000. \n
  */
} qcmap_msgr_get_upnp_notify_interval_resp_msg;

/** @ERROR
    -QMI_ERR_NONE              No error in the request
    -QMI_ERR_INTERNAL          Unexpected error occurred during processing
    -QMI_ERR_MALFORMED_MSG     Message was not formulated correctly by the
                               control point or the message was corrupted
                               during transmission
    -QMI_ERR_MISSING_ARG       One or more required TLVs were missing in the request
    -QMI_ERR_NOT_SUPPORTED     Operation is not supported
*/

/** @DESCRIPTION
    Returns an integer with the UPnP notify interval.
*/

//============================================================================
/** @COMMAND QMI_QCMAP_MSGR_SET_UPNP_NOTIFY_INTERVAL
    @BRIEF Sets the UPnP notify interval.
    @CMD_VERSION 1.13
    @USAGE Production
    @SECURITY_LEVEL  High risk
    @REQUIRED_ACTION Default
*/
//============================================================================

//! @MSG     QMI_QCMAP_MSGR_SET_UPNP_NOTIFY_INTERVAL_REQ
//! @TYPE    Request
//! @SENDER  Control point
//----------------------------------------------------------------------------
message {
  //! Notify Interval
  //! @VERSION_INTRODUCED 1.13
  //! @VERSION 1.13
  optional int32 notify_interval;
  /**< Specifies the UPnP notify interval in seconds, 30-60000. \n
  */
} qcmap_msgr_set_upnp_notify_interval_req_msg;

//! @MSG     QMI_QCMAP_MSGR_SET_UPNP_NOTIFY_INTERVAL_RESP
//! @TYPE    Response
//! @SENDER  Service
//----------------------------------------------------------------------------
message {
  //! Result Code
  //! @VERSION_INTRODUCED 1.13
  //! @VERSION 1.13
  mandatory qmi_response_type resp;
} qcmap_msgr_set_upnp_notify_interval_resp_msg;

/** @ERROR
    -QMI_ERR_NONE              No error in the request
    -QMI_ERR_INTERNAL          Unexpected error occurred during processing
    -QMI_ERR_NO_EFFECT         Notify interval is out of range
    -QMI_ERR_MALFORMED_MSG     Message was not formulated correctly by the
                               control point or the message was corrupted
                               during transmission
    -QMI_ERR_MISSING_ARG       One or more required TLVs were missing in the request
    -QMI_ERR_NOT_SUPPORTED     Operation is not supported
*/

/** @DESCRIPTION
    Sets the UPnP notify interval.
*/

//============================================================================
/** @COMMAND QMI_QCMAP_MSGR_GET_DLNA_NOTIFY_INTERVAL
    @BRIEF Retrieves DLNA notify interval.
    @CMD_VERSION 1.13
    @USAGE Production
    @SECURITY_LEVEL  High risk
    @REQUIRED_ACTION Default
*/
//============================================================================

//! @MSG     QMI_QCMAP_MSGR_GET_DLNA_NOTIFY_INTERVAL_REQ
//! @TYPE    Request
//! @SENDER  Control point
//----------------------------------------------------------------------------
message {
} qcmap_msgr_get_dlna_notify_interval_req_msg;

//! @MSG     QMI_QCMAP_MSGR_GET_DLNA_NOTIFY_INTERVAL_RESP
//! @TYPE    Response
//! @SENDER  Service
//----------------------------------------------------------------------------
message {
  //! Result Code
  //! @VERSION_INTRODUCED 1.13
  //! @VERSION 1.13
  mandatory qmi_response_type resp;

  //! Notify Interval
  //! @VERSION_INTRODUCED 1.13
  //! @VERSION 1.13
  optional int32 notify_interval;
  /**< Specifies the DLNA notify interval in seconds, 30-60000. \n
  */
} qcmap_msgr_get_dlna_notify_interval_resp_msg;

/** @ERROR
    -QMI_ERR_NONE              No error in the request
    -QMI_ERR_INTERNAL          Unexpected error occurred during processing
    -QMI_ERR_MALFORMED_MSG     Message was not formulated correctly by the
                               control point or the message was corrupted
                               during transmission
    -QMI_ERR_MISSING_ARG       One or more required TLVs were missing in the request
    -QMI_ERR_NOT_SUPPORTED     Operation is not supported
*/

/** @DESCRIPTION
    Returns an integer with the DLNA notify interval.
*/

//============================================================================
/** @COMMAND QMI_QCMAP_MSGR_SET_DLNA_NOTIFY_INTERVAL
    @BRIEF Sets the DLNA notify interval.
    @CMD_VERSION 1.13
    @USAGE Production
    @SECURITY_LEVEL  High risk
    @REQUIRED_ACTION Default
*/
//============================================================================

//! @MSG     QMI_QCMAP_MSGR_SET_DLNA_NOTIFY_INTERVAL_REQ
//! @TYPE    Request
//! @SENDER  Control point
//----------------------------------------------------------------------------
message {
  //! Notify Interval
  //! @VERSION_INTRODUCED 1.13
  //! @VERSION 1.13
  optional int32 notify_interval;
  /**< Specifies the DLNA notify interval in seconds, 30-60000. \n
  */
} qcmap_msgr_set_dlna_notify_interval_req_msg;

//! @MSG     QMI_QCMAP_MSGR_SET_DLNA_NOTIFY_INTERVAL_RESP
//! @TYPE    Response
//! @SENDER  Service
//----------------------------------------------------------------------------
message {
  //! Result Code
  //! @VERSION_INTRODUCED 1.13
  //! @VERSION 1.13
  mandatory qmi_response_type resp;
} qcmap_msgr_set_dlna_notify_interval_resp_msg;

/** @ERROR
    -QMI_ERR_NONE              No error in the request
    -QMI_ERR_INTERNAL          Unexpected error occurred during processing
    -QMI_ERR_NO_EFFECT         Notify interval is out of range
    -QMI_ERR_MALFORMED_MSG     Message was not formulated correctly by the
                               control point or the message was corrupted
                               during transmission
    -QMI_ERR_MISSING_ARG       One or more required TLVs were missing in the request
    -QMI_ERR_NOT_SUPPORTED     Operation is not supported
*/

/** @DESCRIPTION
    Sets the DLNA notify interval.
*/

//============================================================================
/** @COMMAND QMI_QCMAP_MSGR_ADD_DHCP_RESERVATION_RECORD
    @BRIEF Adds DHCP reservation record.
    @CMD_VERSION 1.14
    @USAGE Production
    @SECURITY_LEVEL  Medium risk
    @REQUIRED_ACTION Default
*/
//============================================================================

//! @MSG     QMI_QCMAP_MSGR_ADD_DHCP_RESERVATION_RECORD_REQ
//! @TYPE    Request
//! @SENDER  Control point
//----------------------------------------------------------------------------

message {
  //! Mobile AP Handle
  //! @VERSION_INTRODUCED 1.14
  //! @VERSION 1.14
  mandatory uint32 mobile_ap_handle;
  /**< Handle identifying the mobile AP call instance.
       The value must be the handle previously returned by
       QMI_QCMAP_ MSGR_MOBILE_AP_ENABLE_REQ.
  */

  //! DHCP Reservation Configuration
  //! @VERSION_INTRODUCED 1.14
  //! @VERSION 1.14
  mandatory qcmap_msgr_dhcp_reservation dhcp_reservation_record;

} qcmap_msgr_add_dhcp_reservation_record_req_msg;

//! @MSG     QMI_QCMAP_MSGR_ADD_DHCP_RESERVATION_RECORD_RESP
//! @TYPE    Response
//! @SENDER  Service
//----------------------------------------------------------------------------
message {
  //! Result Code
  //! @VERSION_INTRODUCED 1.14
  //! @VERSION 1.14
  mandatory qmi_response_type resp;

} qcmap_msgr_add_dhcp_reservation_record_resp_msg;

/** @ERROR
    -QMI_ERR_NONE              No error in the request
    -QMI_ERR_INTERNAL          Unexpected error occurred during processing
    -QMI_ERR_MALFORMED_MSG     Message was not formulated correctly by the
                               control point or the message was corrupted
                               during transmission
    -QMI_ERR_MISSING_ARG       One or more required TLVs were missing in the request
    -QMI_ERR_INVALID_HANDLE    Mobile AP handle provided in the request
                               is not valid, i.e., it is not assigned to the
                               control point
    -QMI_ERR_INVALID_ARG       Argument is not correct
    -QMI_ERR_NOT_SUPPORTED     Operation is not supported
    -QMI_ERR_MAX_LIMIT_REACHED Maximum limit was reached for the DHCP Record
                               entry
    -QMI_ERR_DUPLICATE_ENTRY   Entry already exists
*/

/** @DESCRIPTION
    This command adds a DHCP record for a AP/USB client.
*/


//============================================================================
/** @COMMAND QMI_QCMAP_MSGR_GET_DHCP_RESERVATION_RECORDS
    @BRIEF Queries all DHCP records and display
    @CMD_VERSION 1.14
    @USAGE Production
    @SECURITY_LEVEL  Medium risk
    @REQUIRED_ACTION Default
*/
//============================================================================

//! @MSG     QMI_QCMAP_MSGR_GET_DHCP_RESERVATION_RECORDS_REQ
//! @TYPE    Request
//! @SENDER  Control point
//----------------------------------------------------------------------------
message {
  //! Mobile AP Handle
  //! @VERSION_INTRODUCED 1.14
  //! @VERSION 1.14
  mandatory uint32 mobile_ap_handle;
  /**< Handle identifying the mobile AP call instance.
       The value must be the handle previously returned by
       QMI_QCMAP_ MSGR_MOBILE_AP_ENABLE_REQ.
  */

} qcmap_msgr_get_dhcp_reservation_records_req_msg;

//! @MSG     QMI_QCMAP_MSGR_GET_DHCP_RESERVATION_RECORDS_RESP
//! @TYPE    Response
//! @SENDER  Service
//----------------------------------------------------------------------------
message {
  //! Result Code
  //! @VERSION_INTRODUCED 1.14
  //! @VERSION 1.14
  mandatory qmi_response_type resp;

  //! Display All DHCP Records
  //! @VERSION_INTRODUCED 1.14
  //! @VERSION 1.14
  optional qcmap_msgr_dhcp_reservation dhcp_reservation_records<QCMAP_MSGR_MAX_DHCP_RESERVATION_ENTRIES>;

} qcmap_msgr_get_dhcp_reservation_records_resp_msg;

/** @ERROR
    -QMI_ERR_NONE              No error in the request
    -QMI_ERR_INTERNAL          Unexpected error occurred during processing
    -QMI_ERR_MALFORMED_MSG     Message was not formulated correctly by the
                               control point or the message was corrupted
                               during transmission
    -QMI_ERR_MISSING_ARG       One or more required TLVs were missing in the request
    -QMI_ERR_INVALID_HANDLE    Mobile AP handle provided in the request
                               is not valid, i.e., it is not assigned to the
                               control point
    -QMI_ERR_INVALID_ARG       Argument is not correct
    -QMI_ERR_NOT_SUPPORTED     Operation is not supported
*/

/** @DESCRIPTION
    This command queries DHCP reservation records. The response message
    contains the number of entries followed by the value of these entries
    sequentially.
*/

//============================================================================
/** @COMMAND QMI_QCMAP_MSGR_EDIT_DHCP_RESERVATION_RECORD
    @BRIEF Edit a DHCP record
    @CMD_VERSION 1.14
    @USAGE Production
    @SECURITY_LEVEL  High risk
    @REQUIRED_ACTION Default
*/
//============================================================================

//! @MSG     QMI_QCMAP_MSGR_EDIT_DHCP_RESERVATION_RECORD_REQ
//! @TYPE    Request
//! @SENDER  Control point
//----------------------------------------------------------------------------
message {
  //! Mobile AP Handle
  //! @VERSION_INTRODUCED 1.14
  //! @VERSION 1.14
  mandatory uint32 mobile_ap_handle;
  /**< Handle identifying the mobile AP call instance.
       The value must be the handle previously returned by
       QMI_QCMAP_ MSGR_MOBILE_AP_ENABLE_REQ.
  */

  //! Client Reserved IP to Access Record
  //! @VERSION_INTRODUCED 1.14
  //! @VERSION 1.14
  optional  uint32 client_reserved_ip;

  //! DHCP Record to Edit
  //! @VERSION_INTRODUCED 1.14
  //! @VERSION 1.14
  optional  qcmap_msgr_dhcp_reservation dhcp_reservation_record;

} qcmap_msgr_edit_dhcp_reservation_record_req_msg;

//! @MSG     QMI_QCMAP_MSGR_EDIT_DHCP_RESERVATION_RECORD_RESP
//! @TYPE    Response
//! @SENDER  Service
//----------------------------------------------------------------------------
message {
  //! Result Code
  //! @VERSION_INTRODUCED 1.14
  //! @VERSION 1.14
  mandatory qmi_response_type resp;

} qcmap_msgr_edit_dhcp_reservation_record_resp_msg;

/** @ERROR
    -QMI_ERR_NONE              No error in the request
    -QMI_ERR_INTERNAL          Unexpected error occurred during processing
    -QMI_ERR_MALFORMED_MSG     Message was not formulated correctly by the
                               control point or the message was corrupted
                               during transmission
    -QMI_ERR_MISSING_ARG       One or more required TLVs were missing in the request
    -QMI_ERR_INVALID_HANDLE    Mobile AP handle provided in the request
                               is not valid, i.e., it is not assigned to the
                               control point
    -QMI_ERR_INVALID_ARG       Argument is not correct
    -QMI_ERR_NOT_SUPPORTED     Operation is not supported
    -QMI_ERR_NO_ENTRY          Entry was not found
*/

/** @DESCRIPTION
    This command edits a DHCP Record.
*/

//============================================================================
/** @COMMAND QMI_QCMAP_MSGR_DELETE_DHCP_RESERVATION_RECORD
    @BRIEF Deletes a DHCP record
    @CMD_VERSION 1.14
    @USAGE Production
    @SECURITY_LEVEL  High risk
    @REQUIRED_ACTION Default
*/
//============================================================================

//! @MSG     QMI_QCMAP_MSGR_DELETE_DHCP_RESERVATION_RECORD_REQ
//! @TYPE    Request
//! @SENDER  Control point
//----------------------------------------------------------------------------
message {
  //! Mobile AP Handle
  //! @VERSION_INTRODUCED 1.14
  //! @VERSION 1.14
  mandatory uint32 mobile_ap_handle;
  /**< Handle identifying the mobile AP call instance.
       The value must be the handle previously returned by
       QMI_QCMAP_ MSGR_MOBILE_AP_ENABLE_REQ.
  */

  //! Client IP
  //! @VERSION_INTRODUCED 1.14
  //! @VERSION 1.14
  optional  uint32 client_reserved_ip;

} qcmap_msgr_delete_dhcp_reservation_record_req_msg;

//! @MSG     QMI_QCMAP_MSGR_DELETE_DHCP_RESERVATION_RECORD_RESP
//! @TYPE    Response
//! @SENDER  Service
//----------------------------------------------------------------------------
message {
  //! Result Code
  //! @VERSION_INTRODUCED 1.14
  //! @VERSION 1.14
  mandatory qmi_response_type resp;

} qcmap_msgr_delete_dhcp_reservation_record_resp_msg;

/** @ERROR
    -QMI_ERR_NONE              No error in the request
    -QMI_ERR_INTERNAL          Unexpected error occurred during processing
    -QMI_ERR_MALFORMED_MSG     Message was not formulated correctly by the
                               control point or the message was corrupted
                               during transmission
    -QMI_ERR_MISSING_ARG       One or more required TLVs were missing in the request
    -QMI_ERR_INVALID_HANDLE    Mobile AP handle provided in the request
                               is not valid, i.e., it is not assigned to the
                               control point
    -QMI_ERR_INVALID_ARG       Argument is not correct
    -QMI_ERR_NOT_SUPPORTED     Operation is not supported
    -QMI_ERR_NO_ENTRY          Entry was not found
*/

/** @DESCRIPTION
    This command deletes a DHCP reservation record.
*/

//============================================================================
/** @COMMAND QMI_QCMAP_MSGR_ENABLE_ALG
    @BRIEF Enables ALG Module.
    @CMD_VERSION 1.15
    @USAGE Production
    @SECURITY_LEVEL  High risk
    @REQUIRED_ACTION Default
*/
//============================================================================

//! @MSG     QMI_QCMAP_MSGR_ENABLE_ALG_REQ
//! @TYPE    Request
//! @SENDER  Control point
//----------------------------------------------------------------------------


message {
  //! Mobile AP Handle
  //! @VERSION_INTRODUCED 1.15
  //! @VERSION 1.15
  mandatory uint32 mobile_ap_handle;
  /**< Handle identifying the mobile AP call instance.
       The value must be the handle previously returned by
       QMI_QCMAP_ MSGR_MOBILE_AP_ENABLE_REQ.
  */
  /* techpubs note: space added for table formatting */

  //! ALG Type
  //! @VERSION_INTRODUCED 1.15
  //! @VERSION 1.19
  mandatory qcmap_msgr_alg_type_mask alg_type_op;
  /**< ALG configuration mask. Values: \n
       @MASK ()
  */

} qcmap_msgr_enable_alg_req_msg;

//! @MSG     QMI_QCMAP_MSGR_ENABLE_ALG_RESP
//! @TYPE    Response
//! @SENDER  Service
//----------------------------------------------------------------------------
message {
  //! Result Code
  //! @VERSION_INTRODUCED 1.15
  //! @VERSION 1.15
  mandatory qmi_response_type resp;
} qcmap_msgr_enable_alg_resp_msg;

/** @ERROR
    -QMI_ERR_NONE              No error in the request
    -QMI_ERR_INTERNAL          Unexpected error occurred during processing
    -QMI_ERR_MALFORMED_MSG     Message was not formulated correctly by the
                               control point or the message was corrupted
                               during transmission
    -QMI_ERR_MISSING_ARG       One or more required TLVs were missing in the request
    -QMI_ERR_INVALID_HANDLE    Mobile AP handle provided in the request
                               is not valid, i.e., it is not assigned to the
                               control point
    -QMI_ERR_NO_EFFECT         alg is already enabled or a previous request is
                               still in process
*/

/** @DESCRIPTION
    This command enables ALG functionality for the current data connection,
    or if there is no active data connection, for the next data connection.
    ALG functionality will stay enabled until the next power cycle, at which
    time it will be restored to Disabled (the default value).

    If the control point issues multiple requests in short intervals,
    a QMI_ERR_NO_EFFECT error is returned indicating that the previous request
    is still in process.
*/

//============================================================================
/** @COMMAND QMI_QCMAP_MSGR_DISABLE_ALG
    @BRIEF Disables  ALG and stops data transfer if in progress.
    @CMD_VERSION 1.15
    @USAGE Production
    @SECURITY_LEVEL  High risk
    @REQUIRED_ACTION Default
*/
//============================================================================

//! @MSG     QMI_QCMAP_MSGR_DISABLE_ALG_REQ
//! @TYPE    Request
//! @SENDER  Control point
//----------------------------------------------------------------------------


message {
  //! Mobile AP Handle
  //! @VERSION_INTRODUCED 1.15
  //! @VERSION 1.15
  mandatory uint32 mobile_ap_handle;
  /**< Handle identifying the mobile AP call instance.
       The value must be the handle previously returned by
       QMI_QCMAP_ MSGR_MOBILE_AP_ENABLE_REQ.
  */
  /* techpubs note: space added for table formatting */

  //! ALG Type
  //! @VERSION_INTRODUCED 1.15
  //! @VERSION 1.19
  mandatory qcmap_msgr_alg_type_mask alg_type_op;
  /**< ALG configuration mask. Values: \n
       @MASK ()
  */

} qcmap_msgr_disable_alg_req_msg;

//! @MSG     QMI_QCMAP_MSGR_DISABLE_ALG_RESP
//! @TYPE    Response
//! @SENDER  Service
//----------------------------------------------------------------------------
message {
  //! Result Code
  //! @VERSION_INTRODUCED 1.15
  //! @VERSION 1.15
  mandatory qmi_response_type resp;
} qcmap_msgr_disable_alg_resp_msg;

/** @ERROR
    -QMI_ERR_NONE              No error in the request
    -QMI_ERR_INTERNAL          Unexpected error occurred during processing
    -QMI_ERR_MALFORMED_MSG     Message was not formulated correctly by the
                               control point or the message was corrupted
                               during transmission
    -QMI_ERR_MISSING_ARG       One or more required TLVs were missing in the request
    -QMI_ERR_INVALID_HANDLE    Mobile AP handle provided in the request
                               is not valid, i.e., it is not assigned to the
                               control point
    -QMI_ERR_NO_EFFECT         alg is already disabled or a previous request is
                               still in process
*/

/** @DESCRIPTION
    This command disables ALG functionality for the current data connection,
    or if there is no active data connection, for the next data connection.

    If the control point issues multiple requests in short intervals,
    a QMI_ERR_NO_EFFECT error is returned indicating that the previous request
    is still in process.
*/

//============================================================================
/** @COMMAND QMI_QCMAP_MSGR_SET_WEBSERVER_WWAN_ACCESS
    @BRIEF Configures the webserver access from WWAN interface.
    @CMD_VERSION 1.17
    @USAGE Production
    @SECURITY_LEVEL  High risk
    @REQUIRED_ACTION Default
*/
//============================================================================

//! @MSG     QMI_QCMAP_MSGR_SET_WEBSERVER_WWAN_ACCESS_REQ
//! @TYPE    Request
//! @SENDER  Control point
//----------------------------------------------------------------------------

message {
  //! Mobile AP Handle
  //! @VERSION_INTRODUCED 1.17
  //! @VERSION 1.17
  mandatory uint32 mobile_ap_handle;
  /**< Handle identifying the mobile AP call instance.
       The value must be the handle previously returned by
       QMI_QCMAP_ MSGR_MOBILE_AP_ENABLE_REQ.
  */
  /* techpubs note: space added for table formatting */

  //! Webserver WWAN Access Flag
  //! @VERSION_INTRODUCED 1.17
  //! @VERSION 1.17
  mandatory boolean webserver_wwan_access;
  /**< Indicates whether webserver can be accessed from WWAN interface or not;
       boolean value.
  */

} qcmap_msgr_set_webserver_wwan_access_req_msg;

//! @MSG     QMI_QCMAP_MSGR_SET_WEBSERVER_WWAN_ACCESS_RESP
//! @TYPE    Response
//! @SENDER  Service
//----------------------------------------------------------------------------
message {
  //! Result Code
  //! @VERSION_INTRODUCED 1.17
  //! @VERSION 1.17
  mandatory qmi_response_type resp;

} qcmap_msgr_set_webserver_wwan_access_resp_msg;

/** @ERROR
    -QMI_ERR_NONE              No error in the request
    -QMI_ERR_INTERNAL          Unexpected error occurred during processing
    -QMI_ERR_MALFORMED_MSG     Message was not formulated correctly by the
                               control point or the message was corrupted
                               during transmission
    -QMI_ERR_MISSING_ARG       One or more required TLVs were missing in the request
    -QMI_ERR_INVALID_HANDLE    Mobile AP handle provided in the request
                               is not valid, i.e., it is not assigned to the
                               control point
    -QMI_ERR_INVALID_ARG       Argument is not correct
    -QMI_ERR_NOT_SUPPORTED     Operation is not supported
*/

/** @DESCRIPTION
    This command sets whether webserver can be accessed from WWAN interface or not.  The command
    handler overwrites any previously configured value with the current value.
*/

//============================================================================
/** @COMMAND QMI_QCMAP_MSGR_GET_WEBSERVER_WWAN_ACCESS
    @BRIEF Queries the webserver WWAN access setting.
    @CMD_VERSION 1.17
    @USAGE Production
    @SECURITY_LEVEL  Medium risk
    @REQUIRED_ACTION Default
*/
//============================================================================

//! @MSG     QMI_QCMAP_MSGR_GET_WEBSERVER_WWAN_ACCESS_REQ
//! @TYPE    Request
//! @SENDER  Control point
//----------------------------------------------------------------------------
message {
  //! Mobile AP Handle
  //! @VERSION_INTRODUCED 1.17
  //! @VERSION 1.17
  mandatory uint32 mobile_ap_handle;
  /**< Handle identifying the mobile AP call instance.
       The value must be the handle previously returned by
       QMI_QCMAP_ MSGR_MOBILE_AP_ENABLE_REQ.
  */
  /* techpubs note: space added for table formatting */

} qcmap_msgr_get_webserver_wwan_access_req_msg;

//! @MSG     QMI_QCMAP_MSGR_GET_WEBSERVER_WWAN_ACCESS_RESP
//! @TYPE    Response
//! @SENDER  Service
//----------------------------------------------------------------------------
message {
  //! Result Code
  //! @VERSION_INTRODUCED 1.17
  //! @VERSION 1.17
  mandatory qmi_response_type resp;

  //! Webserver WWAN Access Value
  //! @VERSION_INTRODUCED 1.17
  //! @VERSION 1.17
  optional boolean webserver_wwan_access;
  /**< Indicates whether webserver can be accessed from WWAN; boolean value.
  */
} qcmap_msgr_get_webserver_wwan_access_resp_msg;

/** @ERROR
    -QMI_ERR_NONE              No error in the request
    -QMI_ERR_INTERNAL          Unexpected error occurred during processing
    -QMI_ERR_MALFORMED_MSG     Message was not formulated correctly by the
                               control point or the message was corrupted
                               during transmission
    -QMI_ERR_MISSING_ARG       One or more required TLVs were missing in the request
    -QMI_ERR_INVALID_HANDLE    Mobile AP handle provided in the request
                               is not valid, i.e., it is not assigned to the
                               control point
    -QMI_ERR_NOT_SUPPORTED     Operation is not supported
*/

/** @DESCRIPTION
    This command queries the webserver WWAN access status on the device.
*/


//============================================================================
/** @COMMAND QMI_QCMAP_MSGR_SET_SIP_SERVER_INFO
    @BRIEF Sets the SIP server information.
    @CMD_VERSION 1.19
    @USAGE Production
    @SECURITY_LEVEL  Medium risk
    @REQUIRED_ACTION Default
*/
//============================================================================

//! @MSG     QMI_QCMAP_MSGR_SET_SIP_SERVER_INFO_REQ
//! @TYPE    Request
//! @SENDER  Control point
//----------------------------------------------------------------------------

message {
  //! Mobile AP Handle
  //! @VERSION_INTRODUCED 1.19
  //! @VERSION 1.19
  mandatory uint32 mobile_ap_handle;
  /**< Handle identifying the mobile AP call instance.
       The value must be the handle previously returned by
       QMI_QCMAP_MSGR_MOBILE_AP_ENABLE_REQ.
  */
  /* techpubs note: space added for table formatting */

  //! Default SIP Server Information
  //! @VERSION_INTRODUCED 1.19
  //! @VERSION 1.19
  mandatory qcmap_msgr_sip_server_info default_sip_server_info;
  /**< Identifies the default PCSCF information which will be
       provided through DHCP to the Access Point clients*/

} qcmap_msgr_set_sip_server_info_req_msg;

//! @MSG     QMI_QCMAP_MSGR_SET_SIP_SERVER_INFO_RESP
//! @TYPE    Response
//! @SENDER  Service
//----------------------------------------------------------------------------
message {
  //! Result Code
  //! @VERSION_INTRODUCED 1.19
  //! @VERSION 1.19
  mandatory qmi_response_type resp;

} qcmap_msgr_set_sip_server_info_resp_msg;

/** @ERROR
    -QMI_ERR_NONE              No error in the request
    -QMI_ERR_INTERNAL          Unexpected error occurred during processing
    -QMI_ERR_MALFORMED_MSG     Message was not formulated correctly by the
                               control point or the message was corrupted
                               during transmission
    -QMI_ERR_MISSING_ARG       One or more required TLVs were missing in the request
    -QMI_ERR_INVALID_HANDLE    Mobile AP handle provided in the request
                               is not valid, i.e., it is not assigned to the
                               control point
    -QMI_ERR_INVALID_ARG       Argument is not correct
    -QMI_ERR_NOT_SUPPORTED     Operation is not supported
*/

/** @DESCRIPTION
    This command sets the PCSCF SIP server information.
*/

//============================================================================
/** @COMMAND QMI_QCMAP_MSGR_GET_SIP_SERVER_INFO
    @BRIEF Queries the SIP server information.
    @CMD_VERSION 1.19
    @USAGE Production
    @SECURITY_LEVEL  Medium risk
    @REQUIRED_ACTION Default
*/
//============================================================================

//! @MSG     QMI_QCMAP_MSGR_GET_SIP_SERVER_INFO_REQ
//! @TYPE    Request
//! @SENDER  Control point
//----------------------------------------------------------------------------
message {
  //! Mobile AP Handle
  //! @VERSION_INTRODUCED 1.19
  //! @VERSION 1.19
  mandatory uint32 mobile_ap_handle;
  /**< Handle identifying the mobile AP call instance.
       The value must be the handle previously returned by
       QMI_QCMAP_MSGR_MOBILE_AP_ENABLE_REQ.
  */
  /* techpubs note: space added for table formatting */

} qcmap_msgr_get_sip_server_info_req_msg;

//! @MSG     QMI_QCMAP_MSGR_GET_SIP_SERVER_INFO_RESP
//! @TYPE    Response
//! @SENDER  Service
//----------------------------------------------------------------------------
message {
  //! Result Code
  //! @VERSION_INTRODUCED 1.19
  //! @VERSION 1.19
  mandatory qmi_response_type resp;

  //! Default SIP Server Information
  //! @VERSION_INTRODUCED 1.19
  //! @VERSION 1.19
  optional qcmap_msgr_sip_server_info default_sip_server_info;
  /**< Identifies the default PCSCF information which will be
       provided through DHCP to the Access Point clients*/

  //! Network SIP Server Information
  //! @VERSION_INTRODUCED 1.19
  //! @VERSION 1.19
  optional qcmap_msgr_sip_server_info
	  network_sip_server_info<QCMAP_MSGR_MAX_SIP_SERVER_ENTRIES>;
  /**< Identifies the network assigned PCSCF information which will be
       provided through DHCP to the Access Point clients*/

} qcmap_msgr_get_sip_server_info_resp_msg;

/** @ERROR
    -QMI_ERR_NONE              No error in the request
    -QMI_ERR_INTERNAL          Unexpected error occurred during processing
    -QMI_ERR_MALFORMED_MSG     Message was not formulated correctly by the
                               control point or the message was corrupted
                               during transmission
    -QMI_ERR_MISSING_ARG       One or more required TLVs were missing in the request
    -QMI_ERR_INVALID_HANDLE    Mobile AP handle provided in the request
                               is not valid, i.e., it is not assigned to the
                               control point
    -QMI_ERR_NOT_SUPPORTED     Operation is not supported
*/

/** @DESCRIPTION
    This command queries the PCSCF SIP server information on the device.
*/

//============================================================================
/** @COMMAND QMI_QCMAP_MSGR_RESTORE_FACTORY_CONFIG
    @BRIEF Resets to factory configuration.
    @CMD_VERSION 1.20
    @USAGE Production
    @SECURITY_LEVEL  High risk
    @REQUIRED_ACTION Default
*/
//============================================================================

//! @MSG     QMI_QCMAP_MSGR_RESTORE_FACTORY_CONFIG_REQ
//! @TYPE    Request
//! @SENDER  Control point
//----------------------------------------------------------------------------
message {
  //! Mobile AP Handle
  //! @VERSION_INTRODUCED 1.20
  //! @VERSION 1.20
  mandatory uint32 mobile_ap_handle;
  /**< Handle identifying the mobile AP call instance.
       The value must be the handle previously returned by
       QMI_QCMAP_MSGR_MOBILE_AP_ENABLE_REQ.
  */
} qcmap_msgr_restore_factory_config_req_msg;

//! @MSG     QMI_QCMAP_MSGR_RESTORE_FACTORY_CONFIG_RESP
//! @TYPE    Response
//! @SENDER  Service
//----------------------------------------------------------------------------
message {
  //! Result Code
  //! @VERSION_INTRODUCED 1.20
  //! @VERSION 1.20
  mandatory qmi_response_type resp;
} qcmap_msgr_restore_factory_config_resp_msg;

/** @ERROR
    -QMI_ERR_NONE              No error in the request
    -QMI_ERR_INTERNAL          Unexpected error occurred during processing
    -QMI_ERR_MALFORMED_MSG     Message was not formulated correctly by the
                               control point or the message was corrupted
                               during transmission
    -QMI_ERR_MISSING_ARG       One or more required TLVs were missing in the request
    -QMI_ERR_NOT_SUPPORTED     Operation is not supported
*/

/** @DESCRIPTION
    This command will reset the device to default factory configuration and reboot the device.
*/

//============================================================================
/** @COMMAND QMI_QCMAP_MSGR_SET_ODU_MODE
    @BRIEF Sets ODU mode.
    @CMD_VERSION 1.21
    @USAGE Production
    @SECURITY_LEVEL  High risk
    @REQUIRED_ACTION Default
*/
//============================================================================

//! @MSG     QMI_QCMAP_MSGR_SET_ODU_MODE_REQ
//! @TYPE    Request
//! @SENDER  Control point
//----------------------------------------------------------------------------
message {
  //! ODU Mode
  //! @VERSION_INTRODUCED 1.21
  //! @VERSION 1.21
  optional qcmap_msgr_odu_mode mode;
  /**< Identifies the ODU mode. Values: \n
       @ENUM ()
  */
} qcmap_msgr_set_odu_mode_req_msg;

//! @MSG     QMI_QCMAP_MSGR_SET_ODU_MODE_RESP
//! @TYPE    Response
//! @SENDER  Service
//----------------------------------------------------------------------------
message {
  //! Result Code
  //! @VERSION_INTRODUCED 1.21
  //! @VERSION 1.21
  mandatory qmi_response_type resp;
} qcmap_msgr_set_odu_mode_resp_msg;

/** @ERROR
    -QMI_ERR_NONE              No error in the request
    -QMI_ERR_INTERNAL          Unexpected error occurred during processing
    -QMI_ERR_MALFORMED_MSG     Message was not formulated correctly by the
                               control point or the message was corrupted
                               during transmission
    -QMI_ERR_MISSING_ARG       One or more required TLVs were missing in the request
    -QMI_ERR_NOT_SUPPORTED     Operation is not supported
*/

/** @DESCRIPTION
    This command will set the ODU mode, and restart the device.   The device
    mode is persistant across restarts.  Default mode is router.
*/

//============================================================================
/** @COMMAND QMI_QCMAP_MSGR_GET_ODU_MODE
    @BRIEF Retrieves ODU mode.
    @CMD_VERSION 1.21
    @USAGE Production
    @SECURITY_LEVEL  High risk
    @REQUIRED_ACTION Default
*/
//============================================================================

//! @MSG     QMI_QCMAP_MSGR_GET_ODU_MODE_REQ
//! @TYPE    Request
//! @SENDER  Control point
//----------------------------------------------------------------------------
message {
} qcmap_msgr_get_odu_mode_req_msg;

//! @MSG     QMI_QCMAP_MSGR_GET_ODU_MODE_RESP
//! @TYPE    Response
//! @SENDER  Service
//----------------------------------------------------------------------------
message {
  //! Result Code
  //! @VERSION_INTRODUCED 1.21
  //! @VERSION 1.21
  mandatory qmi_response_type resp;

  //! ODU Mode
  //! @VERSION_INTRODUCED 1.21
  //! @VERSION 1.21
  optional qcmap_msgr_odu_mode mode;
  /**< Identifies the ODU mode. Values: \n
       @ENUM ()
  */
} qcmap_msgr_get_odu_mode_resp_msg;

/** @ERROR
    -QMI_ERR_NONE              No error in the request
    -QMI_ERR_INTERNAL          Unexpected error occurred during processing
    -QMI_ERR_MALFORMED_MSG     Message was not formulated correctly by the
                               control point or the message was corrupted
                               during transmission
    -QMI_ERR_MISSING_ARG       One or more required TLVs were missing in the request
    -QMI_ERR_NOT_SUPPORTED     Operation is not supported
*/

/** @DESCRIPTION
    This command will retrieve the current ODU mode.
*/

//============================================================================
/** @COMMAND QMI_QCMAP_MSGR_SET_ODU_PSWD
    @BRIEF Set the ODU password.
    @CMD_VERSION 1.22
    @USAGE Production
    @SECURITY_LEVEL  High risk
    @REQUIRED_ACTION Default
*/
//============================================================================

//! @MSG     QMI_QCMAP_MSGR_SET_ODU_PSWD_REQ
//! @TYPE    Request
//! @SENDER  Control point
//----------------------------------------------------------------------------
message {
  //! Result Code
  //! @VERSION_INTRODUCED 1.22
  //! @VERSION 1.22
  optional string password<15>;
  /**< Indicates the new password.
  */
} qcmap_msgr_set_odu_pswd_req_msg;

//! @MSG     QMI_QCMAP_MSGR_SET_ODU_PSWD_RESP
//! @TYPE    Response
//! @SENDER  Service
//----------------------------------------------------------------------------
message {
  //! Result Code
  //! @VERSION_INTRODUCED 1.22
  //! @VERSION 1.22
  mandatory qmi_response_type resp;

} qcmap_msgr_set_odu_pswd_resp_msg;

/** @ERROR
    -QMI_ERR_NONE              No error in the request
    -QMI_ERR_INTERNAL          Unexpected error occurred during processing
    -QMI_ERR_MALFORMED_MSG     Message was not formulated correctly by the
                               control point or the message was corrupted
                               during transmission
    -QMI_ERR_MISSING_ARG       One or more required TLVs were missing in the
                               request
    -QMI_ERR_NOT_SUPPORTED     Operation is not supported
*/

/** @DESCRIPTION
    This command will set the current ODU password.
*/

//============================================================================
/** @COMMAND QMI_QCMAP_MSGR_GET_CONNECTED_DEVICES_INFO
    @BRIEF Queries the list of all device connected to SoftAP device.
    @CMD_VERSION 1.23
    @USAGE Production
    @SECURITY_LEVEL  Medium risk
    @REQUIRED_ACTION Default
*/
//============================================================================
//! @MSG     QMI_QCMAP_MSGR_GET_CONNECTED_DEVICES_INFO_REQ
//! @TYPE    Request
//! @SENDER  Control point
//----------------------------------------------------------------------------
message {
  //! Mobile AP Handle
  //! @VERSION_INTRODUCED 1.23
  //! @VERSION 1.23
  mandatory uint32 mobile_ap_handle;
  /**< Handle identifying the mobile AP call instance.
       The value must be the handle previously returned by
       QMI_QCMAP_ MSGR_MOBILE_AP_ENABLE_REQ.
  */
  /* techpubs note: space added for table formatting */

} qcmap_msgr_get_connected_devices_info_req_msg;

//! @MSG     QMI_QCMAP_MSGR_GET_CONNECTED_DEVICES_INFO_RESP
//! @TYPE    Response
//! @SENDER  Service
//----------------------------------------------------------------------------
message {
  //! Result Code
  //! @VERSION_INTRODUCED 1.23
  //! @VERSION 1.23
  mandatory qmi_response_type resp;

  //! Connected Devices Information
  //! @VERSION_INTRODUCED 1.23
  //! @VERSION 1.23
  optional qcmap_msgr_connected_device_info connected_devices_info<QCMAP_MSGR_MAX_CONNECTED_DEVICES>;

} qcmap_msgr_get_connected_devices_info_resp_msg;

/** @ERROR
    -QMI_ERR_NONE              No error in the request
    -QMI_ERR_INTERNAL          Unexpected error occurred during processing
    -QMI_ERR_MALFORMED_MSG     Message was not formulated correctly by the
                               control point or the message was corrupted
                               during transmission
    -QMI_ERR_MISSING_ARG       One or more required TLVs were missing in the request
    -QMI_ERR_INVALID_HANDLE    Mobile AP handle provided in the request
                               is not valid, i.e., it is not assigned to the
                               control point
    -QMI_ERR_INVALID_ARG       Argument is not correct
    -QMI_ERR_NOT_SUPPORTED     Operation is not supported
*/

/** @DESCRIPTION
    This command queries the list of all device connected to SoftAP device. The response message
    contains the number of entries followed by the value of these entries
    sequentially.
*/

//============================================================================
/** @COMMAND QMI_QCMAP_MSGR_GET_IPV6_SIP_SERVER_INFO
    @BRIEF Queries the IPV6 SIP server information.
    @CMD_VERSION 1.24
    @USAGE Production
    @SECURITY_LEVEL  Medium risk
    @REQUIRED_ACTION Default
*/
//============================================================================

//! @MSG     QMI_QCMAP_MSGR_GET_IPV6_SIP_SERVER_INFO_REQ
//! @TYPE    Request
//! @SENDER  Control point
//----------------------------------------------------------------------------
message {
  //! Mobile AP Handle
  //! @VERSION_INTRODUCED 1.24
  //! @VERSION 1.24
  mandatory uint32 mobile_ap_handle;
  /**< Handle identifying the mobile AP call instance.
       The value must be the handle previously returned by
       QMI_QCMAP_MSGR_MOBILE_AP_ENABLE_REQ.
  */
  /* techpubs note: space added for table formatting */

} qcmap_msgr_get_ipv6_sip_server_info_req_msg;

//! @MSG     QMI_QCMAP_MSGR_GET_IPV6_SIP_SERVER_INFO_RESP
//! @TYPE    Response
//! @SENDER  Service
//----------------------------------------------------------------------------
message {
  //! Result Code
  //! @VERSION_INTRODUCED 1.24
  //! @VERSION 1.24
  mandatory qmi_response_type resp;

  //! Network SIP Server Information
  //! @VERSION_INTRODUCED 1.24
  //! @VERSION 1.24
  optional qcmap_msgr_ipv6_sip_server_info
	   network_ipv6_sip_server_info<QCMAP_MSGR_MAX_SIP_SERVER_ENTRIES>;
  /**< Identifies the network assigned IPV6 PCSCF information which will be
       provided through DHCP to the Access Point clients*/

} qcmap_msgr_get_ipv6_sip_server_info_resp_msg;

/** @ERROR
    -QMI_ERR_NONE              No error in the request
    -QMI_ERR_INTERNAL          Unexpected error occurred during processing
    -QMI_ERR_MALFORMED_MSG     Message was not formulated correctly by the
                               control point or the message was corrupted
                               during transmission
    -QMI_ERR_MISSING_ARG       One or more required TLVs were missing in the request
    -QMI_ERR_INVALID_HANDLE    Mobile AP handle provided in the request
                               is not valid, i.e., it is not assigned to the
                               control point
    -QMI_ERR_NOT_SUPPORTED     Operation is not supported
*/

/** @DESCRIPTION
    This command queries the PCSCF IPV6 SIP server information on the device.
*/

//============================================================================
/** @COMMAND QMI_QCMAP_MSGR_SET_SUPPLICANT_CONFIG
    @BRIEF Starts/stops wpa_supplicant and wpa_cli based on
	 supplicant_config_status flag.
    @CMD_VERSION 1.25
    @USAGE Production
    @SECURITY_LEVEL  Medium risk
    @REQUIRED_ACTION Default
*/
//============================================================================
//! @MSG     QMI_QCMAP_MSGR_SET_SUPPLICANT_CONFIG_REQ
//! @TYPE    Request
//! @SENDER  Control point
//----------------------------------------------------------------------------
message {
  //! Mobile AP Handle
  //! @VERSION_INTRODUCED 1.25
  //! @VERSION 1.25
  mandatory uint32 mobile_ap_handle;
  /**< Handle identifying the mobile AP call instance.
       The value must be the handle previously returned by
       QMI_QCMAP_MSGR_MOBILE_AP_ENABLE_REQ.
  */
  mandatory boolean supplicant_config_status;
  /* techpubs note: space added for table formatting */

} qcmap_msgr_set_supplicant_config_req_msg;

//! @MSG     QMI_QCMAP_MSGR_SET_SUPPLICANT_CONFIG_RESP
//! @TYPE    Response
//! @SENDER  Service
//----------------------------------------------------------------------------
message {
  //! Result Code
  //! @VERSION_INTRODUCED 1.25
  //! @VERSION 1.25
  mandatory qmi_response_type resp;

} qcmap_msgr_set_supplicant_config_resp_msg;

/** @ERROR
    -QMI_ERR_NONE              No error in the request
    -QMI_ERR_MALFORMED_MSG     Message was not formulated correctly by the
                               control point or the message was corrupted
                               during transmission
    -QMI_ERR_INVALID_HANDLE    Mobile AP handle provided in the request
                               is not valid, i.e., it is not assigned to the
                               control point
*/


/** @DESCRIPTION
    This command Starts/stops wpa_supplicant and wpa_cli based on
	supplicant_config_status flag.
*/

//============================================================================
/** @COMMAND QMI_QCMAP_MSGR_GET_CRADLE_MODE
    @BRIEF Retrieves Cradle mode.
    @CMD_VERSION 1.27
    @USAGE Production
    @SECURITY_LEVEL  High risk
    @REQUIRED_ACTION Default
*/
//============================================================================

//! @MSG     QMI_QCMAP_MSGR_GET_CRADLE_MODE_REQ
//! @TYPE    Request
//! @SENDER  Control point
//----------------------------------------------------------------------------
message {
} qcmap_msgr_get_cradle_mode_req_msg;

//! @MSG     QMI_QCMAP_MSGR_GET_CRADLE_MODE_RESP
//! @TYPE    Response
//! @SENDER  Service
//----------------------------------------------------------------------------
message {
  //! Result Code
  //! @VERSION_INTRODUCED 1.27
  //! @VERSION 1.27
  mandatory qmi_response_type resp;

  //! Cradle Mode
  //! @VERSION_INTRODUCED 1.27
  //! @VERSION 1.27
  optional qcmap_msgr_cradle_mode mode;
  /**< Identifies the Cradle mode. Values: \n
       @ENUM ()
  */
} qcmap_msgr_get_cradle_mode_resp_msg;

/** @ERROR
    -QMI_ERR_NONE              No error in the request
    -QMI_ERR_INTERNAL          Unexpected error occurred during processing
    -QMI_ERR_MALFORMED_MSG     Message was not formulated correctly by the
                               control point or the message was corrupted
                               during transmission
    -QMI_ERR_MISSING_ARG       One or more required TLVs were missing in the request
    -QMI_ERR_NOT_SUPPORTED     Operation is not supported
*/

/** @DESCRIPTION
    This command will retrieve the current Cradle mode.
*/

//============================================================================
/** @COMMAND QMI_QCMAP_MSGR_SET_CRADLE_MODE
    @BRIEF Sets the Cradle mode.
    @CMD_VERSION 1.27
    @USAGE Production
    @SECURITY_LEVEL  High risk
    @REQUIRED_ACTION Default
*/
//============================================================================

//! @MSG     QMI_QCMAP_MSGR_SET_CRADLE_MODE_REQ
//! @TYPE    Request
//! @SENDER  Control point
//----------------------------------------------------------------------------
message {
  //! Cradle Mode
  //! @VERSION_INTRODUCED 1.27
  //! @VERSION 1.27
  mandatory uint32 mobile_ap_handle;
  /**< Handle identifying the mobile AP call instance.
       The value must be the handle previously returned by
       QMI_QCMAP_MSGR_MOBILE_AP_ENABLE_REQ.
  */

  //! Cradle Mode
  //! @VERSION_INTRODUCED 1.27
  //! @VERSION 1.27
  mandatory qcmap_msgr_cradle_mode mode;
  /**< Identifies the Cradle mode. Values: \n
       @ENUM ()
  */
} qcmap_msgr_set_cradle_mode_req_msg;

//! @MSG     QMI_QCMAP_MSGR_SET_CRADLE_MODE_RESP
//! @TYPE    Response
//! @SENDER  Service
//----------------------------------------------------------------------------
message {
  //! Result Code
  //! @VERSION_INTRODUCED 1.27
  //! @VERSION 1.27
  mandatory qmi_response_type resp;
} qcmap_msgr_set_cradle_mode_resp_msg;

/** @ERROR
    -QMI_ERR_NONE              No error in the request
    -QMI_ERR_INTERNAL          Unexpected error occurred during processing
    -QMI_ERR_MALFORMED_MSG     Message was not formulated correctly by the
                               control point or the message was corrupted
                               during transmission
    -QMI_ERR_MISSING_ARG       One or more required TLVs were missing in the request
    -QMI_ERR_NOT_SUPPORTED     Operation is not supported
*/

/** @DESCRIPTION
    This command will set the specified Cradle mode.
*/

//============================================================================
/** @COMMAND QMI_QCMAP_MSGR_CRADLE_MODE_STATUS_IND
    @BRIEF Indicates a change in the current cradle mode status.
    @CMD_VERSION 1.27
    @USAGE Production
    @SECURITY_LEVEL  Low risk
    @REQUIRED_ACTION Default
*/
//============================================================================

//! @MSG     QMI_QCMAP_MSGR_CRADLE_MODE_STATUS_IND
//! @TYPE    Indication
//! @SENDER  Service
//! @SCOPE   Unicast
//----------------------------------------------------------------------------

message {
  //! Mobile AP Handle
  //! @VERSION_INTRODUCED 1.27
  //! @VERSION 1.27
  mandatory uint32 mobile_ap_handle;
  /**< Handle identifying the mobile AP call instance.
       The value must be the handle previously returned by
       QMI_QCMAP_ MSGR_MOBILE_AP_ENABLE_REQ.
   */
  /* techpubs note: space added for table formatting */

  //! Station Mode Status
  //! @VERSION_INTRODUCED 1.27
  //! @VERSION 1.27
  mandatory qcmap_msgr_cradle_status_enum cradle_status;
  /**< Indicates the Cradle status. Values: \n
       @ENUM ()
  */
} qcmap_msgr_cradle_mode_status_ind_msg;

/** @DESCRIPTION
    This indication communicates changes in the cradle mode.
*/

//============================================================================
/** @COMMAND QMI_QCMAP_MSGR_GET_PREFIX_DELEGATION_CONFIG
    @BRIEF Retrieves Prefix Delegation config.
    @CMD_VERSION 1.28
    @USAGE Production
    @SECURITY_LEVEL  High risk
    @REQUIRED_ACTION Default
*/
//============================================================================

//! @MSG     QMI_QCMAP_MSGR_GET_PREFIX_DELEGATION_CONFIG_REQ
//! @TYPE    Request
//! @SENDER  Control point
//----------------------------------------------------------------------------
message {
} qcmap_msgr_get_prefix_delegation_config_req_msg;

//! @MSG     QMI_QCMAP_MSGR_GET_PREFIX_DELEGATION_CONFIG_RESP
//! @TYPE    Response
//! @SENDER  Service
//----------------------------------------------------------------------------
message {
  //! Result Code
  //! @VERSION_INTRODUCED 1.28
  //! @VERSION 1.28
  mandatory qmi_response_type resp;

  //! Prefix Delegation Config
  //! @VERSION_INTRODUCED 1.28
  //! @VERSION 1.28
  optional boolean prefix_delegation;
  /**< Identifies the Prefix Delegation config; boolean value */

} qcmap_msgr_get_prefix_delegation_config_resp_msg;

/** @ERROR
    -QMI_ERR_NONE              No error in the request
    -QMI_ERR_INTERNAL          Unexpected error occurred during processing
    -QMI_ERR_MALFORMED_MSG     Message was not formulated correctly by the
                               control point or the message was corrupted
                               during transmission
    -QMI_ERR_MISSING_ARG       One or more required TLVs were missing in the request
    -QMI_ERR_NOT_SUPPORTED     Operation is not supported
*/

/** @DESCRIPTION
    This command will retrieve whether or not Prefix Delegation config is enabled or disabled.
*/

//============================================================================
/** @COMMAND QMI_QCMAP_MSGR_SET_PREFIX_DELEGATION_CONFIG
    @BRIEF Sets the Prefix Delegation config.
    @CMD_VERSION 1.28
    @USAGE Production
    @SECURITY_LEVEL  High risk
    @REQUIRED_ACTION Default
*/
//============================================================================

//! @MSG     QMI_QCMAP_MSGR_SET_PREFIX_DELEGATION_CONFIG_REQ
//! @TYPE    Request
//! @SENDER  Control point
//----------------------------------------------------------------------------
message {
  //! Prefix Delegation Config
  //! @VERSION_INTRODUCED 1.28
  //! @VERSION 1.28
  mandatory uint32 mobile_ap_handle;
  /**< Handle identifying the mobile AP call instance.
       The value must be the handle previously returned by
       QMI_QCMAP_MSGR_MOBILE_AP_ENABLE_REQ.
  */

  //! Prefix Delegation Config
  //! @VERSION_INTRODUCED 1.28
  //! @VERSION 1.28
  mandatory boolean prefix_delegation;
  /**< Identifies the Prefix Delegation config. Values: \n
       @ENUM ()
  */
} qcmap_msgr_set_prefix_delegation_config_req_msg;

//! @MSG     QMI_QCMAP_MSGR_SET_PREFIX_DELEGATION_CONFIG_RESP
//! @TYPE    Response
//! @SENDER  Service
//----------------------------------------------------------------------------
message {
  //! Result Code
  //! @VERSION_INTRODUCED 1.28
  //! @VERSION 1.28
  mandatory qmi_response_type resp;
} qcmap_msgr_set_prefix_delegation_config_resp_msg;

/** @ERROR
    -QMI_ERR_NONE              No error in the request
    -QMI_ERR_INTERNAL          Unexpected error occurred during processing
    -QMI_ERR_MALFORMED_MSG     Message was not formulated correctly by the
                               control point or the message was corrupted
                               during transmission
    -QMI_ERR_MISSING_ARG       One or more required TLVs were missing in the request
    -QMI_ERR_NOT_SUPPORTED     Operation is not supported
*/

/** @DESCRIPTION
    This command will set Prefix Delegation config.
*/

//============================================================================
/** @COMMAND QMI_QCMAP_MSGR_GET_PREFIX_DELEGATION_STATUS
    @BRIEF Retrieves the current Prefix Delegation mode.
    @CMD_VERSION 1.28
    @USAGE Production
    @SECURITY_LEVEL  High risk
    @REQUIRED_ACTION Default
*/
//============================================================================

//! @MSG     QMI_QCMAP_MSGR_GET_PREFIX_DELEGATION_STATUS_REQ
//! @TYPE    Request
//! @SENDER  Control point
//----------------------------------------------------------------------------
message {
} qcmap_msgr_get_prefix_delegation_status_req_msg;

//! @MSG     QMI_QCMAP_MSGR_GET_PREFIX_DELEGATION_STATUS_RESP
//! @TYPE    Response
//! @SENDER  Service
//----------------------------------------------------------------------------
message {
  //! Result Code
  //! @VERSION_INTRODUCED 1.28
  //! @VERSION 1.28
  mandatory qmi_response_type resp;

  //! Prefix Delegation Config
  //! @VERSION_INTRODUCED 1.28
  //! @VERSION 1.28
  optional boolean prefix_delegation;
  /**< Identifies the Prefix Delegation mode; boolean value */

} qcmap_msgr_get_prefix_delegation_status_resp_msg;

/** @ERROR
    -QMI_ERR_NONE              No error in the request
    -QMI_ERR_INTERNAL          Unexpected error occurred during processing
    -QMI_ERR_MALFORMED_MSG     Message was not formulated correctly by the
                               control point or the message was corrupted
                               during transmission
    -QMI_ERR_MISSING_ARG       One or more required TLVs were missing in the request
    -QMI_ERR_NOT_SUPPORTED     Operation is not supported
*/

/** @DESCRIPTION
    This command will retrieve whether or not Prefix Delegation is currently enabled or disabled.
*/

//============================================================================
//============================================================================
// File footer
//============================================================================
/*
@FOOTER
*/

//============================================================================
// Service definition
//============================================================================
service qcmap_msgr {

  // 0x0020
  //! @ID QMI_QCMAP_MSGR_MOBILE_AP_ENABLE
  qcmap_msgr_mobile_ap_enable_req_msg    QMI_QCMAP_MSGR_MOBILE_AP_ENABLE_REQ,
  qcmap_msgr_mobile_ap_enable_resp_msg   QMI_QCMAP_MSGR_MOBILE_AP_ENABLE_RESP = 0x0020;

  // 0x0021
  //! @ID QMI_QCMAP_MSGR_MOBILE_AP_DISABLE
  qcmap_msgr_mobile_ap_disable_req_msg   QMI_QCMAP_MSGR_MOBILE_AP_DISABLE_REQ,
  qcmap_msgr_mobile_ap_disable_resp_msg  QMI_QCMAP_MSGR_MOBILE_AP_DISABLE_RESP;

  // 0x0022
  //! @ID QMI_QCMAP_MSGR_BRING_UP_WWAN
  qcmap_msgr_bring_up_wwan_req_msg       QMI_QCMAP_MSGR_BRING_UP_WWAN_REQ,
  qcmap_msgr_bring_up_wwan_resp_msg      QMI_QCMAP_MSGR_BRING_UP_WWAN_RESP,
  //! @ID QMI_QCMAP_MSGR_BRING_UP_WWAN_IND
  qcmap_msgr_bring_up_wwan_ind_msg       QMI_QCMAP_MSGR_BRING_UP_WWAN_IND;

  // 0x0023
  //! @ID QMI_QCMAP_MSGR_TEAR_DOWN_WWAN
  qcmap_msgr_tear_down_wwan_req_msg      QMI_QCMAP_MSGR_TEAR_DOWN_WWAN_REQ,
  qcmap_msgr_tear_down_wwan_resp_msg     QMI_QCMAP_MSGR_TEAR_DOWN_WWAN_RESP,
  //! @ID QMI_QCMAP_MSGR_TEAR_DOWN_WWAN_IND
  qcmap_msgr_tear_down_wwan_ind_msg      QMI_QCMAP_MSGR_TEAR_DOWN_WWAN_IND;

  // 0x0024
  //! @ID QMI_QCMAP_MSGR_WWAN_STATUS_IND_REG
  qcmap_msgr_wwan_status_ind_register_req_msg   QMI_QCMAP_MSGR_WWAN_STATUS_IND_REG_REQ,
  qcmap_msgr_wwan_status_ind_register_resp_msg  QMI_QCMAP_MSGR_WWAN_STATUS_IND_REG_RESP;

  // 0x0025
  //! @ID QMI_QCMAP_MSGR_WWAN_STATUS_IND
  qcmap_msgr_wwan_status_ind_msg         QMI_QCMAP_MSGR_WWAN_STATUS_IND;

  // 0x0026
  //! @ID QMI_QCMAP_MSGR_ENABLE_WLAN
  qcmap_msgr_enable_wlan_req_msg         QMI_QCMAP_MSGR_ENABLE_WLAN_REQ,
  qcmap_msgr_enable_wlan_resp_msg        QMI_QCMAP_MSGR_ENABLE_WLAN_RESP;

  // 0x0027
  //! @ID QMI_QCMAP_MSGR_DISABLE_WLAN
  qcmap_msgr_disable_wlan_req_msg        QMI_QCMAP_MSGR_DISABLE_WLAN_REQ,
  qcmap_msgr_disable_wlan_resp_msg       QMI_QCMAP_MSGR_DISABLE_WLAN_RESP;

  // 0x0028
  //! @ID QMI_QCMAP_MSGR_MOBILE_AP_STATUS_IND_REG
  qcmap_msgr_mobile_ap_status_ind_register_req_msg   QMI_QCMAP_MSGR_MOBILE_AP_STATUS_IND_REG_REQ,
  qcmap_msgr_mobile_ap_status_ind_register_resp_msg  QMI_QCMAP_MSGR_MOBILE_AP_STATUS_IND_REG_RESP;

  // 0x0029
  //! @ID QMI_QCMAP_MSGR_MOBILE_AP_STATUS_IND
  qcmap_msgr_mobile_ap_status_ind_msg    QMI_QCMAP_MSGR_MOBILE_AP_STATUS_IND;

 // 0x002A
  //! @ID QMI_QCMAP_MSGR_ADD_STATIC_NAT_ENTRY
  qcmap_msgr_add_static_nat_entry_req_msg     QMI_QCMAP_MSGR_ADD_STATIC_NAT_ENTRY_REQ,
  qcmap_msgr_add_static_nat_entry_resp_msg    QMI_QCMAP_MSGR_ADD_STATIC_NAT_ENTRY_RESP;

  // 0x002B
  //! @ID QMI_QCMAP_MSGR_DELETE_STATIC_NAT_ENTRY
  qcmap_msgr_delete_static_nat_entry_req_msg  QMI_QCMAP_MSGR_DELETE_STATIC_NAT_ENTRY_REQ,
  qcmap_msgr_delete_static_nat_entry_resp_msg QMI_QCMAP_MSGR_DELETE_STATIC_NAT_ENTRY_RESP;

  // 0x002C
  //! @ID QMI_QCMAP_MSGR_GET_STATIC_NAT_ENTRIES
  qcmap_msgr_get_static_nat_entries_req_msg   QMI_QCMAP_MSGR_GET_STATIC_NAT_ENTRIES_REQ,
  qcmap_msgr_get_static_nat_entries_resp_msg  QMI_QCMAP_MSGR_GET_STATIC_NAT_ENTRIES_RESP;

  // 0x002D
  //! @ID QMI_QCMAP_MSGR_SET_DMZ
  qcmap_msgr_set_dmz_req_msg             QMI_QCMAP_MSGR_SET_DMZ_REQ,
  qcmap_msgr_set_dmz_resp_msg            QMI_QCMAP_MSGR_SET_DMZ_RESP;

  // 0x002E
  //! @ID QMI_QCMAP_MSGR_DELETE_DMZ
  qcmap_msgr_delete_dmz_req_msg          QMI_QCMAP_MSGR_DELETE_DMZ_REQ,
  qcmap_msgr_delete_dmz_resp_msg         QMI_QCMAP_MSGR_DELETE_DMZ_RESP;

  // 0x002F
  //! @ID QMI_QCMAP_MSGR_GET_DMZ
  qcmap_msgr_get_dmz_req_msg             QMI_QCMAP_MSGR_GET_DMZ_REQ,
  qcmap_msgr_get_dmz_resp_msg            QMI_QCMAP_MSGR_GET_DMZ_RESP;

  // 0x0030
  //! @ID QMI_QCMAP_MSGR_GET_WWAN_STATS
  qcmap_msgr_get_wwan_stats_req_msg      QMI_QCMAP_MSGR_GET_WWAN_STATS_REQ,
  qcmap_msgr_get_wwan_stats_resp_msg     QMI_QCMAP_MSGR_GET_WWAN_STATS_RESP;

  // 0x0031
  //! @ID QMI_QCMAP_MSGR_RESET_WWAN_STATS
  qcmap_msgr_reset_wwan_stats_req_msg    QMI_QCMAP_MSGR_RESET_WWAN_STATS_REQ,
  qcmap_msgr_reset_wwan_stats_resp_msg   QMI_QCMAP_MSGR_RESET_WWAN_STATS_RESP;

  // 0x0032
  //! @ID QMI_QCMAP_MSGR_GET_IPSEC_VPN_PASS_THROUGH
  qcmap_msgr_get_ipsec_vpn_pass_through_req_msg  QMI_QCMAP_MSGR_GET_IPSEC_VPN_PASS_THROUGH_REQ,
  qcmap_msgr_get_ipsec_vpn_pass_through_resp_msg QMI_QCMAP_MSGR_GET_IPSEC_VPN_PASS_THROUGH_RESP;

  // 0x0033
  //! @ID QMI_QCMAP_MSGR_SET_IPSEC_VPN_PASS_THROUGH
  qcmap_msgr_set_ipsec_vpn_pass_through_req_msg  QMI_QCMAP_MSGR_SET_IPSEC_VPN_PASS_THROUGH_REQ,
  qcmap_msgr_set_ipsec_vpn_pass_through_resp_msg QMI_QCMAP_MSGR_SET_IPSEC_VPN_PASS_THROUGH_RESP;

  // 0x0034
  //! @ID QMI_QCMAP_MSGR_GET_PPTP_VPN_PASS_THROUGH
  qcmap_msgr_get_pptp_vpn_pass_through_req_msg   QMI_QCMAP_MSGR_GET_PPTP_VPN_PASS_THROUGH_REQ,
  qcmap_msgr_get_pptp_vpn_pass_through_resp_msg  QMI_QCMAP_MSGR_GET_PPTP_VPN_PASS_THROUGH_RESP;

  // 0x0035
  //! @ID QMI_QCMAP_MSGR_SET_PPTP_VPN_PASS_THROUGH
  qcmap_msgr_set_pptp_vpn_pass_through_req_msg   QMI_QCMAP_MSGR_SET_PPTP_VPN_PASS_THROUGH_REQ,
  qcmap_msgr_set_pptp_vpn_pass_through_resp_msg  QMI_QCMAP_MSGR_SET_PPTP_VPN_PASS_THROUGH_RESP;

  // 0x0036
  //! @ID QMI_QCMAP_MSGR_GET_L2TP_VPN_PASS_THROUGH
  qcmap_msgr_get_l2tp_vpn_pass_through_req_msg   QMI_QCMAP_MSGR_GET_L2TP_VPN_PASS_THROUGH_REQ,
  qcmap_msgr_get_l2tp_vpn_pass_through_resp_msg  QMI_QCMAP_MSGR_GET_L2TP_VPN_PASS_THROUGH_RESP;

  // 0x0037
  //! @ID QMI_QCMAP_MSGR_SET_L2TP_VPN_PASS_THROUGH
  qcmap_msgr_set_l2tp_vpn_pass_through_req_msg   QMI_QCMAP_MSGR_SET_L2TP_VPN_PASS_THROUGH_REQ,
  qcmap_msgr_set_l2tp_vpn_pass_through_resp_msg  QMI_QCMAP_MSGR_SET_L2TP_VPN_PASS_THROUGH_RESP;

  // 0x0038
  //! @ID QMI_QCMAP_MSGR_SET_NAT_TYPE
  qcmap_msgr_set_nat_type_req_msg       QMI_QCMAP_MSGR_SET_NAT_TYPE_REQ,
  qcmap_msgr_set_nat_type_resp_msg      QMI_QCMAP_MSGR_SET_NAT_TYPE_RESP;

  // 0x0039
  //! @ID QMI_QCMAP_MSGR_GET_NAT_TYPE
  qcmap_msgr_get_nat_type_req_msg       QMI_QCMAP_MSGR_GET_NAT_TYPE_REQ,
  qcmap_msgr_get_nat_type_resp_msg      QMI_QCMAP_MSGR_GET_NAT_TYPE_RESP;

  // 0x003A
  //! @ID QMI_QCMAP_MSGR_SET_AUTO_CONNECT
  qcmap_msgr_set_auto_connect_req_msg   QMI_QCMAP_MSGR_SET_AUTO_CONNECT_REQ,
  qcmap_msgr_set_auto_connect_resp_msg  QMI_QCMAP_MSGR_SET_AUTO_CONNECT_RESP;

  // 0x003B
  //! @ID QMI_QCMAP_MSGR_GET_AUTO_CONNECT
  qcmap_msgr_get_auto_connect_req_msg   QMI_QCMAP_MSGR_GET_AUTO_CONNECT_REQ,
  qcmap_msgr_get_auto_connect_resp_msg  QMI_QCMAP_MSGR_GET_AUTO_CONNECT_RESP;

  // 0x003C
  //! @ID QMI_QCMAP_MSGR_ADD_FIREWALL_ENTRY
  qcmap_msgr_add_firewall_entry_req_msg    QMI_QCMAP_MSGR_ADD_FIREWALL_ENTRY_REQ,
  qcmap_msgr_add_firewall_entry_resp_msg   QMI_QCMAP_MSGR_ADD_FIREWALL_ENTRY_RESP;

  // 0x003D
  //! @ID QMI_QCMAP_MSGR_GET_FIREWALL_ENTRIES_HANDLE_LIST
  qcmap_msgr_get_firewall_entries_handle_list_req_msg  QMI_QCMAP_MSGR_GET_FIREWALL_ENTRIES_HANDLE_LIST_REQ,
  qcmap_msgr_get_firewall_entries_handle_list_resp_msg QMI_QCMAP_MSGR_GET_FIREWALL_ENTRIES_HANDLE_LIST_RESP;

  // 0x003E
  //! @ID QMI_QCMAP_MSGR_GET_FIREWALL_ENTRY
  qcmap_msgr_get_firewall_entry_req_msg     QMI_QCMAP_MSGR_GET_FIREWALL_ENTRY_REQ,
  qcmap_msgr_get_firewall_entry_resp_msg    QMI_QCMAP_MSGR_GET_FIREWALL_ENTRY_RESP;

  // 0x003F
  //! @ID QMI_QCMAP_MSGR_DELETE_FIREWALL_ENTRY
  qcmap_msgr_delete_firewall_entry_req_msg  QMI_QCMAP_MSGR_DELETE_FIREWALL_ENTRY_REQ,
  qcmap_msgr_delete_firewall_entry_resp_msg QMI_QCMAP_MSGR_DELETE_FIREWALL_ENTRY_RESP;

  // 0x040
  //! @ID QMI_QCMAP_MSGR_GET_WWAN_CONFIG
  qcmap_msgr_get_wwan_config_req_msg    QMI_QCMAP_MSGR_GET_WWAN_CONFIG_REQ,
  qcmap_msgr_get_wwan_config_resp_msg   QMI_QCMAP_MSGR_GET_WWAN_CONFIG_RESP;

  // 0x041
  //! @ID QMI_QCMAP_MSGR_MOBILE_AP_STATUS
  qcmap_msgr_mobile_ap_status_req       QMI_QCMAP_MSGR_MOBILE_AP_STATUS_REQ,
  qcmap_msgr_mobile_ap_status_resp      QMI_QCMAP_MSGR_MOBILE_AP_STATUS_RESP;

  // 0x042
  //! @ID QMI_QCMAP_MSGR_WWAN_STATUS
  qcmap_msgr_wwan_status_req_msg        QMI_QCMAP_MSGR_WWAN_STATUS_REQ,
  qcmap_msgr_wwan_status_resp_msg       QMI_QCMAP_MSGR_WWAN_STATUS_RESP;

  // 0x0043
  //! @ID QMI_QCMAP_MSGR_SET_NAT_TIMEOUT
  qcmap_msgr_set_nat_timeout_req_msg    QMI_QCMAP_MSGR_SET_NAT_TIMEOUT_REQ,
  qcmap_msgr_set_nat_timeout_resp_msg   QMI_QCMAP_MSGR_SET_NAT_TIMEOUT_RESP;

  // 0x0044
  //! @ID QMI_QCMAP_MSGR_GET_NAT_TIMEOUT
  qcmap_msgr_get_nat_timeout_req_msg    QMI_QCMAP_MSGR_GET_NAT_TIMEOUT_REQ,
  qcmap_msgr_get_nat_timeout_resp_msg   QMI_QCMAP_MSGR_GET_NAT_TIMEOUT_RESP;

  // 0x0045
  //! @ID QMI_QCMAP_MSGR_SET_LAN_CONFIG
  qcmap_msgr_set_lan_config_req_msg    QMI_QCMAP_MSGR_SET_LAN_CONFIG_REQ,
  qcmap_msgr_set_lan_config_resp_msg   QMI_QCMAP_MSGR_SET_LAN_CONFIG_RESP;

  // 0x0046
  //! @ID QMI_QCMAP_MSGR_GET_WLAN_STATUS
  qcmap_msgr_get_wlan_status_req_msg    QMI_QCMAP_MSGR_GET_WLAN_STATUS_REQ,
  qcmap_msgr_get_wlan_status_resp_msg   QMI_QCMAP_MSGR_GET_WLAN_STATUS_RESP;

  // 0x0047
  //! @ID QMI_QCMAP_MSGR_ACTIVATE_WLAN
  qcmap_msgr_activate_wlan_req_msg      QMI_QCMAP_MSGR_ACTIVATE_WLAN_REQ,
  qcmap_msgr_activate_wlan_resp_msg     QMI_QCMAP_MSGR_ACTIVATE_WLAN_RESP;

  // 0x0048
  //! @ID QMI_QCMAP_MSGR_GET_LAN_CONFIG
  qcmap_msgr_get_lan_config_req_msg    QMI_QCMAP_MSGR_GET_LAN_CONFIG_REQ,
  qcmap_msgr_get_lan_config_resp_msg   QMI_QCMAP_MSGR_GET_LAN_CONFIG_RESP;

  // 0x0049
  //! @ID QMI_QCMAP_MSGR_USB_LINK_UP
  qcmap_msgr_usb_link_up_req_msg   QMI_QCMAP_MSGR_USB_LINK_UP_REQ,
  qcmap_msgr_usb_link_up_resp_msg  QMI_QCMAP_MSGR_USB_LINK_UP_RESP;

  //0x004A
  //! @ID QMI_QCMAP_MSGR_USB_LINK_DOWN
  qcmap_msgr_usb_link_down_req_msg  QMI_QCMAP_MSGR_USB_LINK_DOWN_REQ,
  qcmap_msgr_usb_link_down_resp_msg QMI_QCMAP_MSGR_USB_LINK_DOWN_RESP;

  //0x004B
  //! @ID QMI_QCMAP_MSGR_ENABLE_IPV6
  qcmap_msgr_enable_ipv6_req_msg            QMI_QCMAP_MSGR_ENABLE_IPV6_REQ,
  qcmap_msgr_enable_ipv6_resp_msg           QMI_QCMAP_MSGR_ENABLE_IPV6_RESP;

  // 0x004C
  //! @ID QMI_QCMAP_MSGR_DISABLE_IPV6
  qcmap_msgr_disable_ipv6_req_msg           QMI_QCMAP_MSGR_DISABLE_IPV6_REQ,
  qcmap_msgr_disable_ipv6_resp_msg          QMI_QCMAP_MSGR_DISABLE_IPV6_RESP;

  // 0x004D
  //! @ID QMI_QCMAP_MSGR_SET_ROAMING_PREF
  qcmap_msgr_set_roaming_pref_req_msg                QMI_QCMAP_MSGR_SET_ROAMING_PREF_REQ,
  qcmap_msgr_set_roaming_pref_resp_msg               QMI_QCMAP_MSGR_SET_ROAMING_PREF_RESP;

  // 0x004E
  //! @ID QMI_QCMAP_MSGR_GET_ROAMING_PREF
  qcmap_msgr_get_roaming_pref_req_msg                QMI_QCMAP_MSGR_GET_ROAMING_PREF_REQ,
  qcmap_msgr_get_roaming_pref_resp_msg               QMI_QCMAP_MSGR_GET_ROAMING_PREF_RESP;

  //0x004F
  //! @ID QMI_QCMAP_MSGR_SET_WWAN_POLICY
  qcmap_msgr_set_wwan_policy_req_msg            QMI_QCMAP_MSGR_SET_WWAN_POLICY_REQ,
  qcmap_msgr_set_wwan_policy_resp_msg           QMI_QCMAP_MSGR_SET_WWAN_POLICY_RESP;

  //0x0050
  //! @ID QMI_QCMAP_MSGR_GET_WWAN_POLICY
  qcmap_msgr_get_wwan_policy_req_msg            QMI_QCMAP_MSGR_GET_WWAN_POLICY_REQ,
  qcmap_msgr_get_wwan_policy_resp_msg           QMI_QCMAP_MSGR_GET_WWAN_POLICY_RESP;

  //0x0051
  //! @ID QMI_QCMAP_MSGR_GET_IPV6_STATE
   qcmap_msgr_get_ipv6_state_req_msg       QMI_QCMAP_MSGR_GET_IPV6_STATE_REQ,
   qcmap_msgr_get_ipv6_state_resp_msg      QMI_QCMAP_MSGR_GET_IPV6_STATE_RESP;

  // 0x0052
  //! @ID QMI_QCMAP_MSGR_ENABLE_UPNP
  qcmap_msgr_enable_upnp_req_msg                QMI_QCMAP_MSGR_ENABLE_UPNP_REQ,
  qcmap_msgr_enable_upnp_resp_msg               QMI_QCMAP_MSGR_ENABLE_UPNP_RESP;

  // 0x0053
  //! @ID QMI_QCMAP_MSGR_DISABLE_UPNP
  qcmap_msgr_disable_upnp_req_msg                QMI_QCMAP_MSGR_DISABLE_UPNP_REQ,
  qcmap_msgr_disable_upnp_resp_msg               QMI_QCMAP_MSGR_DISABLE_UPNP_RESP;

  // 0x0054
  //! @ID QMI_QCMAP_MSGR_ENABLE_DLNA
  qcmap_msgr_enable_dlna_req_msg                QMI_QCMAP_MSGR_ENABLE_DLNA_REQ,
  qcmap_msgr_enable_dlna_resp_msg               QMI_QCMAP_MSGR_ENABLE_DLNA_RESP;

  // 0x0055
  //! @ID QMI_QCMAP_MSGR_DISABLE_DLNA
  qcmap_msgr_disable_dlna_req_msg                QMI_QCMAP_MSGR_DISABLE_DLNA_REQ,
  qcmap_msgr_disable_dlna_resp_msg               QMI_QCMAP_MSGR_DISABLE_DLNA_RESP;

  // 0x0056
  //! @ID QMI_QCMAP_MSGR_SET_FIREWALL_CONFIG
  qcmap_msgr_set_firewall_config_req_msg                QMI_QCMAP_MSGR_SET_FIREWALL_CONFIG_REQ,
  qcmap_msgr_set_firewall_config_resp_msg               QMI_QCMAP_MSGR_SET_FIREWALL_CONFIG_RESP;

  // 0x0057
  //! @ID QMI_QCMAP_MSGR_GET_FIREWALL_CONFIG
  qcmap_msgr_get_firewall_config_req_msg                QMI_QCMAP_MSGR_GET_FIREWALL_CONFIG_REQ,
  qcmap_msgr_get_firewall_config_resp_msg               QMI_QCMAP_MSGR_GET_FIREWALL_CONFIG_RESP;

  // 0x0058
  //! @ID QMI_QCMAP_MSGR_ENABLE_MULTICAST_DNS_RESPONDER
  qcmap_msgr_enable_multicast_dns_req_msg              QMI_QCMAP_MSGR_ENABLE_MULTICAST_DNS_RESPONDER_REQ,
  qcmap_msgr_enable_multicast_dns_resp_msg             QMI_QCMAP_MSGR_ENABLE_MULTICAST_DNS_RESPONDER_RESP;

  // 0x0059
  //! @ID QMI_QCMAP_MSGR_DISABLE_MULTICAST_DNS_RESPONDER
  qcmap_msgr_disable_multicast_dns_req_msg              QMI_QCMAP_MSGR_DISABLE_MULTICAST_DNS_RESPONDER_REQ,
  qcmap_msgr_disable_multicast_dns_resp_msg             QMI_QCMAP_MSGR_DISABLE_MULTICAST_DNS_RESPONDER_RESP;

  // 0x005A
  //! @ID QMI_QCMAP_MSGR_GET_UPNP_STATUS
  qcmap_msgr_get_upnp_status_req_msg              QMI_QCMAP_MSGR_GET_UPNP_STATUS_REQ,
  qcmap_msgr_get_upnp_status_resp_msg             QMI_QCMAP_MSGR_GET_UPNP_STATUS_RESP;

  // 0x005B
  //! @ID QMI_QCMAP_MSGR_GET_DLNA_STATUS
  qcmap_msgr_get_dlna_status_req_msg              QMI_QCMAP_MSGR_GET_DLNA_STATUS_REQ,
  qcmap_msgr_get_dlna_status_resp_msg             QMI_QCMAP_MSGR_GET_DLNA_STATUS_RESP;

  // 0x005C
  //! @ID QMI_QCMAP_MSGR_GET_MULTICAST_DNS_STATUS
  qcmap_msgr_get_multicast_dns_status_req_msg              QMI_QCMAP_MSGR_GET_MULTICAST_DNS_STATUS_REQ,
  qcmap_msgr_get_multicast_dns_status_resp_msg             QMI_QCMAP_MSGR_GET_MULTICAST_DNS_STATUS_RESP;

  // 0x005D
  //! @ID QMI_QCMAP_MSGR_STATION_MODE_STATUS_IND_REG
  qcmap_msgr_station_mode_status_ind_register_req_msg   QMI_QCMAP_MSGR_STATION_MODE_STATUS_IND_REG_REQ,
  qcmap_msgr_station_mode_status_ind_register_resp_msg  QMI_QCMAP_MSGR_STATION_MODE_STATUS_IND_REG_RESP;

  // 0x005E
  //! @ID QMI_QCMAP_MSGR_STATION_MODE_STATUS_IND
  qcmap_msgr_station_mode_status_ind_msg    QMI_QCMAP_MSGR_STATION_MODE_STATUS_IND;

  // 0x05F
  //! @ID QMI_QCMAP_MSGR_GET_STATION_MODE_STATUS
  qcmap_msgr_get_station_mode_status_req_msg        QMI_QCMAP_MSGR_GET_STATION_MODE_STATUS_REQ,
  qcmap_msgr_get_station_mode_status_resp_msg       QMI_QCMAP_MSGR_GET_STATION_MODE_STATUS_RESP;

  // 0x0060
  //! @ID QMI_QCMAP_MSGR_SET_QCMAP_BOOTUP_CFG
  qcmap_msgr_set_qcmap_bootup_cfg_req_msg             QMI_QCMAP_MSGR_SET_QCMAP_BOOTUP_CFG_REQ,
  qcmap_msgr_set_qcmap_bootup_cfg_resp_msg            QMI_QCMAP_MSGR_SET_QCMAP_BOOTUP_CFG_RESP;

  // 0x0061
  //! @ID QMI_QCMAP_MSGR_GET_QCMAP_BOOTUP_CFG
  qcmap_msgr_get_qcmap_bootup_cfg_req_msg            QMI_QCMAP_MSGR_GET_QCMAP_BOOTUP_CFG_REQ,
  qcmap_msgr_get_qcmap_bootup_cfg_resp_msg           QMI_QCMAP_MSGR_GET_QCMAP_BOOTUP_CFG_RESP;

  // 0x0062
  //! @ID QMI_QCMAP_MSGR_SET_DLNA_MEDIA_DIR
  qcmap_msgr_set_dlna_media_dir_req_msg              QMI_QCMAP_MSGR_SET_DLNA_MEDIA_DIR_REQ,
  qcmap_msgr_set_dlna_media_dir_resp_msg             QMI_QCMAP_MSGR_SET_DLNA_MEDIA_DIR_RESP;

  // 0x0063
  //! @ID QMI_QCMAP_MSGR_GET_DLNA_MEDIA_DIR
  qcmap_msgr_get_dlna_media_dir_req_msg              QMI_QCMAP_MSGR_GET_DLNA_MEDIA_DIR_REQ,
  qcmap_msgr_get_dlna_media_dir_resp_msg             QMI_QCMAP_MSGR_GET_DLNA_MEDIA_DIR_RESP;

  // 0x0064
  //! @ID QMI_QCMAP_MSGR_SET_WLAN_CONFIG
  qcmap_msgr_set_wlan_config_req_msg    QMI_QCMAP_MSGR_SET_WLAN_CONFIG_REQ,
  qcmap_msgr_set_wlan_config_resp_msg   QMI_QCMAP_MSGR_SET_WLAN_CONFIG_RESP;

  // 0x0065
  //! @ID QMI_QCMAP_MSGR_ACTIVATE_LAN
  qcmap_msgr_activate_lan_req_msg      QMI_QCMAP_MSGR_ACTIVATE_LAN_REQ,
  qcmap_msgr_activate_lan_resp_msg     QMI_QCMAP_MSGR_ACTIVATE_LAN_RESP;

  // 0x0066
  //! @ID QMI_QCMAP_MSGR_GET_WLAN_CONFIG
  qcmap_msgr_get_wlan_config_req_msg    QMI_QCMAP_MSGR_GET_WLAN_CONFIG_REQ,
  qcmap_msgr_get_wlan_config_resp_msg   QMI_QCMAP_MSGR_GET_WLAN_CONFIG_RESP;

  //0x0067
  //! @ID QMI_QCMAP_MSGR_ENABLE_IPV4
  qcmap_msgr_enable_ipv4_req_msg            QMI_QCMAP_MSGR_ENABLE_IPV4_REQ,
  qcmap_msgr_enable_ipv4_resp_msg           QMI_QCMAP_MSGR_ENABLE_IPV4_RESP;

  // 0x0068
  //! @ID QMI_QCMAP_MSGR_DISABLE_IPV4
  qcmap_msgr_disable_ipv4_req_msg           QMI_QCMAP_MSGR_DISABLE_IPV4_REQ,
  qcmap_msgr_disable_ipv4_resp_msg          QMI_QCMAP_MSGR_DISABLE_IPV4_RESP;

  //0x0069
  //! @ID QMI_QCMAP_MSGR_GET_IPV4_STATE
  qcmap_msgr_get_ipv4_state_req_msg       QMI_QCMAP_MSGR_GET_IPV4_STATE_REQ,
  qcmap_msgr_get_ipv4_state_resp_msg      QMI_QCMAP_MSGR_GET_IPV4_STATE_RESP;

  //0x006A
  //! @ID QMI_QCMAP_MSGR_GET_DATA_BITRATE
  qcmap_msgr_get_data_bitrate_req_msg              QMI_QCMAP_MSGR_GET_DATA_BITRATE_REQ,
  qcmap_msgr_get_data_bitrate_resp_msg             QMI_QCMAP_MSGR_GET_DATA_BITRATE_RESP;

  //0x006B
  //! @ID QMI_QCMAP_MSGR_GET_UPNP_NOTIFY_INTERVAL
  qcmap_msgr_get_upnp_notify_interval_req_msg              QMI_QCMAP_MSGR_GET_UPNP_NOTIFY_INTERVAL_REQ,
  qcmap_msgr_get_upnp_notify_interval_resp_msg             QMI_QCMAP_MSGR_GET_UPNP_NOTIFY_INTERVAL_RESP;

  //0x006C
  //! @ID QMI_QCMAP_MSGR_SET_UPNP_NOTIFY_INTERVAL
  qcmap_msgr_set_upnp_notify_interval_req_msg              QMI_QCMAP_MSGR_SET_UPNP_NOTIFY_INTERVAL_REQ,
  qcmap_msgr_set_upnp_notify_interval_resp_msg             QMI_QCMAP_MSGR_SET_UPNP_NOTIFY_INTERVAL_RESP;

  //0x006D
  //! @ID QMI_QCMAP_MSGR_GET_DLNA_NOTIFY_INTERVAL
  qcmap_msgr_get_dlna_notify_interval_req_msg              QMI_QCMAP_MSGR_GET_DLNA_NOTIFY_INTERVAL_REQ,
  qcmap_msgr_get_dlna_notify_interval_resp_msg             QMI_QCMAP_MSGR_GET_DLNA_NOTIFY_INTERVAL_RESP;

  //0x006E
  //! @ID QMI_QCMAP_MSGR_SET_DLNA_NOTIFY_INTERVAL
  qcmap_msgr_set_dlna_notify_interval_req_msg              QMI_QCMAP_MSGR_SET_DLNA_NOTIFY_INTERVAL_REQ,
  qcmap_msgr_set_dlna_notify_interval_resp_msg             QMI_QCMAP_MSGR_SET_DLNA_NOTIFY_INTERVAL_RESP;

  // 0x006F
  //! @ID QMI_QCMAP_MSGR_ADD_DHCP_RESERVATION_RECORD
  qcmap_msgr_add_dhcp_reservation_record_req_msg    QMI_QCMAP_MSGR_ADD_DHCP_RESERVATION_RECORD_REQ,
  qcmap_msgr_add_dhcp_reservation_record_resp_msg    QMI_QCMAP_MSGR_ADD_DHCP_RESERVATION_RECORD_RESP;

  // 0x0070
  //! @ID QMI_QCMAP_MSGR_GET_DHCP_RESERVATION_RECORDS
  qcmap_msgr_get_dhcp_reservation_records_req_msg    QMI_QCMAP_MSGR_GET_DHCP_RESERVATION_RECORDS_REQ,
  qcmap_msgr_get_dhcp_reservation_records_resp_msg    QMI_QCMAP_MSGR_GET_DHCP_RESERVATION_RECORDS_RESP;

  // 0x0071
  //! @ID QMI_QCMAP_MSGR_EDIT_DHCP_RESERVATION_RECORD
  qcmap_msgr_edit_dhcp_reservation_record_req_msg    QMI_QCMAP_MSGR_EDIT_DHCP_RESERVATION_RECORD_REQ,
  qcmap_msgr_edit_dhcp_reservation_record_resp_msg    QMI_QCMAP_MSGR_EDIT_DHCP_RESERVATION_RECORD_RESP;

  // 0x0072
  //! @ID QMI_QCMAP_MSGR_DELETE_DHCP_RESERVATION_RECORD
  qcmap_msgr_delete_dhcp_reservation_record_req_msg    QMI_QCMAP_MSGR_DELETE_DHCP_RESERVATION_RECORD_REQ,
  qcmap_msgr_delete_dhcp_reservation_record_resp_msg    QMI_QCMAP_MSGR_DELETE_DHCP_RESERVATION_RECORD_RESP;

    // 0x0073
  //! @ID QMI_QCMAP_MSGR_ACTIVATE_HOSTAPD_CONFIG
  qcmap_msgr_activate_hostapd_config_req_msg      QMI_QCMAP_MSGR_ACTIVATE_HOSTAPD_CONFIG_REQ,
  qcmap_msgr_activate_hostapd_config_resp_msg     QMI_QCMAP_MSGR_ACTIVATE_HOSTAPD_CONFIG_RESP;

    // 0x0074
  //! @ID QMI_QCMAP_MSGR_ACTIVATE_SUPPLICANT_CONFIG
  qcmap_msgr_activate_supplicant_config_req_msg      QMI_QCMAP_MSGR_ACTIVATE_SUPPLICANT_CONFIG_REQ,
  qcmap_msgr_activate_supplicant_config_resp_msg     QMI_QCMAP_MSGR_ACTIVATE_SUPPLICANT_CONFIG_RESP;

  //0x0075
  //! @ID QMI_QCMAP_MSGR_ENABLE_ALG
  qcmap_msgr_enable_alg_req_msg                            QMI_QCMAP_MSGR_ENABLE_ALG_REQ,
  qcmap_msgr_enable_alg_resp_msg                           QMI_QCMAP_MSGR_ENABLE_ALG_RESP;

  // 0x0076
  //! @ID QMI_QCMAP_MSGR_DISABLE_ALG
  qcmap_msgr_disable_alg_req_msg                           QMI_QCMAP_MSGR_DISABLE_ALG_REQ,
  qcmap_msgr_disable_alg_resp_msg                          QMI_QCMAP_MSGR_DISABLE_ALG_RESP;

  // 0x0077
  //! @ID QMI_QCMAP_MSGR_GET_WEBSERVER_WWAN_ACCESS
  qcmap_msgr_get_webserver_wwan_access_req_msg   QMI_QCMAP_MSGR_GET_WEBSERVER_WWAN_ACCESS_REQ,
  qcmap_msgr_get_webserver_wwan_access_resp_msg  QMI_QCMAP_MSGR_GET_WEBSERVER_WWAN_ACCESS_RESP;

  // 0x0078
  //! @ID QMI_QCMAP_MSGR_SET_WEBSERVER_WWAN_ACCESS
  qcmap_msgr_set_webserver_wwan_access_req_msg   QMI_QCMAP_MSGR_SET_WEBSERVER_WWAN_ACCESS_REQ,
  qcmap_msgr_set_webserver_wwan_access_resp_msg  QMI_QCMAP_MSGR_SET_WEBSERVER_WWAN_ACCESS_RESP;

  //0x0079
  //! @ID QMI_QCMAP_MSGR_SET_SIP_SERVER_INFO
  qcmap_msgr_set_sip_server_info_req_msg               QMI_QCMAP_MSGR_SET_SIP_SERVER_INFO_REQ,
  qcmap_msgr_set_sip_server_info_resp_msg              QMI_QCMAP_MSGR_SET_SIP_SERVER_INFO_RESP;

  //0x007A
  //! @ID QMI_QCMAP_MSGR_GET_SIP_SERVER_INFO
  qcmap_msgr_get_sip_server_info_req_msg               QMI_QCMAP_MSGR_GET_SIP_SERVER_INFO_REQ,
  qcmap_msgr_get_sip_server_info_resp_msg              QMI_QCMAP_MSGR_GET_SIP_SERVER_INFO_RESP;

  //0x007B
  //! @ID QMI_QCMAP_MSGR_RESTORE_FACTORY_CONFIG
  qcmap_msgr_restore_factory_config_req_msg            QMI_QCMAP_MSGR_RESTORE_FACTORY_CONFIG_REQ,
  qcmap_msgr_restore_factory_config_resp_msg           QMI_QCMAP_MSGR_RESTORE_FACTORY_CONFIG_RESP;

  //0x007C
  //! @ID QMI_QCMAP_MSGR_SET_ODU_MODE
  qcmap_msgr_set_odu_mode_req_msg                QMI_QCMAP_MSGR_SET_ODU_MODE_REQ,
  qcmap_msgr_set_odu_mode_resp_msg               QMI_QCMAP_MSGR_SET_ODU_MODE_RESP;

  //0x007D
  //! @ID QMI_QCMAP_MSGR_GET_ODU_MODE
  qcmap_msgr_get_odu_mode_req_msg                QMI_QCMAP_MSGR_GET_ODU_MODE_REQ,
  qcmap_msgr_get_odu_mode_resp_msg               QMI_QCMAP_MSGR_GET_ODU_MODE_RESP;

  //0x007E
  //! @ID QMI_QCMAP_MSGR_SET_ODU_PSWD
  qcmap_msgr_set_odu_pswd_req_msg                QMI_QCMAP_MSGR_SET_ODU_PSWD_REQ,
  qcmap_msgr_set_odu_pswd_resp_msg               QMI_QCMAP_MSGR_SET_ODU_PSWD_RESP;

  //0x007F
  //! @ID QMI_QCMAP_MSGR_GET_CONNECTED_DEVICES_INFO
  qcmap_msgr_get_connected_devices_info_req_msg        QMI_QCMAP_MSGR_GET_CONNECTED_DEVICES_INFO_REQ,
  qcmap_msgr_get_connected_devices_info_resp_msg       QMI_QCMAP_MSGR_GET_CONNECTED_DEVICES_INFO_RESP;

  // 0x0080
  //! @ID QMI_QCMAP_MSGR_SET_LOOPBACK_FLAG
  qcmap_msgr_set_loopback_flag_req_msg                QMI_QCMAP_MSGR_SET_LOOPBACK_FLAG_REQ,
  qcmap_msgr_set_loopback_flag_resp_msg               QMI_QCMAP_MSGR_SET_LOOPBACK_FLAG_RESP;

  // 0x0081
  //! @ID QMI_QCMAP_MSGR_GET_LOOPBACK_FLAG
  qcmap_msgr_get_loopback_flag_req_msg                QMI_QCMAP_MSGR_GET_LOOPBACK_FLAG_REQ,
  qcmap_msgr_get_loopback_flag_resp_msg               QMI_QCMAP_MSGR_GET_LOOPBACK_FLAG_RESP;

  //0x0082
  //! @ID QMI_QCMAP_MSGR_GET_IPV6_SIP_SERVER_INFO
  qcmap_msgr_get_ipv6_sip_server_info_req_msg          QMI_QCMAP_MSGR_GET_IPV6_SIP_SERVER_INFO_REQ,
  qcmap_msgr_get_ipv6_sip_server_info_resp_msg         QMI_QCMAP_MSGR_GET_IPV6_SIP_SERVER_INFO_RESP;

  // 0x0083
  //! @ID QMI_QCMAP_MSGR_SET_SUPPLICANT_CONFIG
  qcmap_msgr_set_supplicant_config_req_msg                QMI_QCMAP_MSGR_SET_SUPPLICANT_CONFIG_REQ,
  qcmap_msgr_set_supplicant_config_resp_msg               QMI_QCMAP_MSGR_SET_SUPPLICANT_CONFIG_RESP;

  // 0x0084
  //! @ID QMI_QCMAP_MSGR_GET_CRADLE_MODE
  qcmap_msgr_get_cradle_mode_req_msg                QMI_QCMAP_MSGR_GET_CRADLE_MODE_REQ,
  qcmap_msgr_get_cradle_mode_resp_msg               QMI_QCMAP_MSGR_GET_CRADLE_MODE_RESP;

  //0x0085
  //! @ID QMI_QCMAP_MSGR_SET_CRADLE_MODE
  qcmap_msgr_set_cradle_mode_req_msg                QMI_QCMAP_MSGR_SET_CRADLE_MODE_REQ,
  qcmap_msgr_set_cradle_mode_resp_msg               QMI_QCMAP_MSGR_SET_CRADLE_MODE_RESP;

  // 0x0086
  //! @ID QMI_QCMAP_MSGR_CRADLE_MODE_STATUS_IND
  qcmap_msgr_cradle_mode_status_ind_msg    QMI_QCMAP_MSGR_CRADLE_MODE_STATUS_IND;

  //0x0087
  //! @ID QMI_QCMAP_MSGR_GET_PREFIX_DELEGATION_CONFIG
  qcmap_msgr_get_prefix_delegation_config_req_msg    QMI_QCMAP_MSGR_GET_PREFIX_DELEGATION_CONFIG_REQ,
  qcmap_msgr_get_prefix_delegation_config_resp_msg   QMI_QCMAP_MSGR_GET_PREFIX_DELEGATION_CONFIG_RESP;

  //0x0088
  //! @ID QMI_QCMAP_MSGR_SET_PREFIX_DELEGATION_CONFIG
  qcmap_msgr_set_prefix_delegation_config_req_msg    QMI_QCMAP_MSGR_SET_PREFIX_DELEGATION_CONFIG_REQ,
  qcmap_msgr_set_prefix_delegation_config_resp_msg   QMI_QCMAP_MSGR_SET_PREFIX_DELEGATION_CONFIG_RESP;

  //0x0089
  //! @ID QMI_QCMAP_MSGR_GET_PREFIX_DELEGATION_STATUS
  qcmap_msgr_get_prefix_delegation_status_req_msg    QMI_QCMAP_MSGR_GET_PREFIX_DELEGATION_STATUS_REQ,
  qcmap_msgr_get_prefix_delegation_status_resp_msg   QMI_QCMAP_MSGR_GET_PREFIX_DELEGATION_STATUS_RESP;
} = 0x0400;

//============================================================================
// End of Module
//============================================================================
