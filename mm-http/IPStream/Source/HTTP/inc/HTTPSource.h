#ifndef __HTTPSOURCE_H__
#define __HTTPSOURCE_H__
/************************************************************************* */
/**
 * HTTPSource.h
 * @brief Header file for iHTTPSource interface definition.
 *
 * COPYRIGHT 2011-2013 Qualcomm Technologies, Inc.
 * All rights reserved. Qualcomm Technologies proprietary and confidential.
 *
 ************************************************************************* */
/* =======================================================================
                             Edit History

$Header: //source/qcom/qct/multimedia2/Video/Source/IPStream/Source/HTTP/dev/DASH/inc/HTTPSource.h#4 $
$DateTime: 2012/03/20 07:46:30 $
$Change: 2284651 $

========================================================================== */
/* =======================================================================
**               Include files for HTTPSource.h
** ======================================================================= */
#include <SourceBase.h>
#include "HTTPBase.h"

namespace video {
/* -----------------------------------------------------------------------
** Constant / Macro Declarations
** ----------------------------------------------------------------------- */

/* -----------------------------------------------------------------------
** Global Data Declarations
** ----------------------------------------------------------------------- */

/* -----------------------------------------------------------------------
** Forward Declarations
** ----------------------------------------------------------------------- */

/* =======================================================================
**                        Class & Function Declarations
** ======================================================================= */

/**
iHTTPSource
The iHTTPSource interface is a HTTP specific media interface used internally
by the Audio Source Media Module to control the ongoing HTTP session and to
get asynchronous event notifications.
*/
class iHTTPSource : public iHTTPBase,
                    public iSourceBase
{
public:
  /** iHTTPSource interface ID
  */
  static const AEEIID HTTPSOURCE_IID                                  = 0x010732DF;

  /** Source events
  These events are generated by the HTTP source and are handled by the
  Source Media Module and translated (if appropriate).
  */
  /** HTTP source event: OPEN_COMPLETE
  This event is set upon successfully opening the media.
  */
  static const HTTPSourceEvent HTTP_SOURCE_EVENT_OPEN_COMPLETE        = 0x0103FEBB;

  /** HTTP source event: OPEN_FAILED
  This event is set when opening the media fails.
  */
  static const HTTPSourceEvent HTTP_SOURCE_EVENT_OPEN_FAILED          = 0x0103FEBC;

  /** HTTP source event: CLOSE_COMPLETE
  This event is set after closing the media.
  */
  static const HTTPSourceEvent HTTP_SOURCE_EVENT_CLOSE_COMPLETE       = 0x0103FEBE;

  //When jobs are complete, clients are notified via this interface.
  //Clients are expected to subclass from this class and override
  //ReceiveResult().
  class iResultRecipient
  {
  public:
    virtual ~iResultRecipient() {};
     virtual void NotifyHTTPEvent(const HTTPSourceEvent eventID) = 0;
  };

  /**
  Register HTTP event notification callback.
  */
  virtual bool RegisterNotificationCallback(/*in*/ iResultRecipient* const pResultRecipient) = 0;

  /**
  Opens media using a URL string. This involves connecting to the remote server
  and starting the download of media data. OPEN_COMPLETE event is sent upon
  successful completion.
  */
  virtual bool OpenSession(/*in*/ const char* pURL) = 0;

  /**
  Closes the network connection and cleans up. CLOSE_COMPLETE event is sent
  upon completion.
  */
  virtual bool CloseSession() = 0;
};

} /* namespace video */
#endif /* __HTTPSOURCE_H__ */
