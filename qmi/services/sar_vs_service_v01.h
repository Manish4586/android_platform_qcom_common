#ifndef SVS_SERVICE_H
#define SVS_SERVICE_H
/*====*====*====*====*====*====*====*====*====*====*====*====*====*====*====*

                        S A R _ V S _ S E R V I C E _ V 0 1  . H

GENERAL DESCRIPTION
  This is the public header file which defines the svs service Data structures.

  Copyright (c) 2011 Qualcomm Technologies, Inc.  All Rights Reserved. 
 Qualcomm Technologies Proprietary and Confidential.

  $Header$
 *====*====*====*====*====*====*====*====*====*====*====*====*====*====*====*/
/*====*====*====*====*====*====*====*====*====*====*====*====*====*====*====* 
 *THIS IS AN AUTO GENERATED FILE. DO NOT ALTER IN ANY WAY 
 *====*====*====*====*====*====*====*====*====*====*====*====*====*====*====*/

/*
 * This header file defines the types and structures that were defined in 
 * svs. It contains the constant values defined, enums, structures,
 * messages, and service message IDs (in that order) Structures that were 
 * defined in the IDL as messages contain mandatory elements, optional 
 * elements, a combination of mandatory and optional elements (mandatory 
 * always come before optionals in the structure), or nothing (null message)
 *  
 * An optional element in a message is preceded by a uint8_t value that must be
 * set to true if the element is going to be included. When decoding a received
 * message, the uint8_t values will be set to true or false by the decode
 * routine, and should be checked before accessing the values that they
 * correspond to. 
 *  
 * Variable sized arrays are defined as static sized arrays with an unsigned
 * integer (32 bit) preceding it that must be set to the number of elements
 * in the array that are valid. For Example:
 *  
 * uint32_t test_opaque_len;
 * uint8_t test_opaque[16];
 *  
 * If only 4 elements are added to test_opaque[] then test_opaque_len must be
 * set to 4 before sending the message.  When decoding, the _len value is set 
 * by the decode routine and should be checked so that the correct number of 
 * elements in the array will be accessed. 
 */

/* This file was generated with Tool version 02.04 
   It was generated on: Thu Mar 24 2011
   From IDL File: sar_vs_service_v01.idl */

#include <stdint.h>
#include "qmi_idl_lib.h"
#include "common_v01.h"


#ifdef __cplusplus
extern "C" {
#endif


/* Version Number of the IDL used to generate this file */
#define SVS_V01_IDL_MAJOR_VERS 01
#define SVS_V01_IDL_MINOR_VERS 01
#define SVS_V01_IDL_TOOL_VERS 02

typedef enum {
  QMI_SAR_VS_RF_SAR_STATE_ENUM_TYPE_MIN_ENUM_VAL_V01 = -2147483647, /*To force a 32 bit signed enum.  Do not change or use*/
  QMI_RF_SAR_STATE_DEFAULT_V01 = 0,
  QMI_RF_SAR_STATE_1_V01 = 1,
  QMI_RF_SAR_STATE_2_V01 = 2,
  QMI_RF_SAR_STATE_3_V01 = 3,
  QMI_RF_SAR_STATE_4_V01 = 4,
  QMI_RF_SAR_STATE_5_V01 = 5,
  QMI_RF_SAR_STATE_6_V01 = 6,
  QMI_RF_SAR_STATE_7_V01 = 7,
  QMI_RF_SAR_STATE_8_V01 = 8,
  QMI_RF_SAR_STATE_MAX_V01 = 9,
  QMI_SAR_VS_RF_SAR_STATE_ENUM_TYPE_MAX_ENUM_VAL_V01 = 2147483647 /*To force a 32 bit signed enum.  Do not change or use*/
}qmi_sar_vs_rf_sar_state_enum_type_v01;

typedef struct {

  /* Mandatory */
  /*  SAR RF State */
  qmi_sar_vs_rf_sar_state_enum_type_v01 sar_rf_state;
  /*  
     SAR RF state must be specified
   */
}sar_vs_rf_sar_state_req_msg_v01;  /* Message */

typedef struct {

  /* Mandatory */
  /*  Result Code */
  qmi_response_type_v01 resp;
  /*   Standard response type.  */
}sar_vs_rf_sar_state_resp_msg_v01;  /* Message */

/*Service Message Definition*/
#define QMI_SAR_VS_RF_SAR_STATE_REQ_MSG_V01 0x0001
#define QMI_SAR_VS_RF_SAR_STATE_RESP_MSG_V01 0x0001

/* Service Object Accessor */
/* This function is used internally by the autogenerated code.  Clients should use the
   macro defined below that takes in no arguments. */
qmi_idl_service_object_type svs_get_service_object_internal_v01
 ( int32_t idl_maj_version, int32_t idl_min_version, int32_t library_version );
 
/* This macro should be used to get the service object */
#define svs_get_service_object_v01( ) \
          svs_get_service_object_internal_v01( \
            SVS_V01_IDL_MAJOR_VERS, SVS_V01_IDL_MINOR_VERS, \
            SVS_V01_IDL_TOOL_VERS )


#ifdef __cplusplus
}
#endif
#endif

