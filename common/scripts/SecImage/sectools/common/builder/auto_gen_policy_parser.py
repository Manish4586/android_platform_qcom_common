#!/usr/bin/env python
# -*- coding: utf-8 -*- 

#
# Generated  by generateDS.py version 2.7b.
#

import sys
import getopt
import re as re_

etree_ = None
Verbose_import_ = False
(   XMLParser_import_none, XMLParser_import_lxml,
    XMLParser_import_elementtree
    ) = range(3)
XMLParser_import_library = None
try:
    # lxml
    from lxml import etree as etree_
    XMLParser_import_library = XMLParser_import_lxml
    if Verbose_import_:
        print("running with lxml.etree")
except ImportError:
    try:
        # cElementTree from Python 2.5+
        import xml.etree.cElementTree as etree_
        XMLParser_import_library = XMLParser_import_elementtree
        if Verbose_import_:
            print("running with cElementTree on Python 2.5+")
    except ImportError:
        try:
            # ElementTree from Python 2.5+
            import xml.etree.ElementTree as etree_
            XMLParser_import_library = XMLParser_import_elementtree
            if Verbose_import_:
                print("running with ElementTree on Python 2.5+")
        except ImportError:
            try:
                # normal cElementTree install
                import cElementTree as etree_
                XMLParser_import_library = XMLParser_import_elementtree
                if Verbose_import_:
                    print("running with cElementTree")
            except ImportError:
                try:
                    # normal ElementTree install
                    import elementtree.ElementTree as etree_
                    XMLParser_import_library = XMLParser_import_elementtree
                    if Verbose_import_:
                        print("running with ElementTree")
                except ImportError:
                    raise ImportError("Failed to import ElementTree from any known place")

def parsexml_(*args, **kwargs):
    if (XMLParser_import_library == XMLParser_import_lxml and
        'parser' not in kwargs):
        # Use the lxml ElementTree compatible parser so that, e.g.,
        #   we ignore comments.
        kwargs['parser'] = etree_.ETCompatXMLParser()
    doc = etree_.parse(*args, **kwargs)
    return doc

#
# User methods
#
# Calls to the methods in these classes are generated by generateDS.py.
# You can replace these methods by re-implementing the following class
#   in a module named generatedssuper.py.

try:
    from generatedssuper import GeneratedsSuper
except ImportError, exp:

    class GeneratedsSuper(object):
        def gds_format_string(self, input_data, input_name=''):
            return input_data
        def gds_validate_string(self, input_data, node, input_name=''):
            return input_data
        def gds_format_integer(self, input_data, input_name=''):
            return '%d' % input_data
        def gds_validate_integer(self, input_data, node, input_name=''):
            return input_data
        def gds_format_integer_list(self, input_data, input_name=''):
            return '%s' % input_data
        def gds_validate_integer_list(self, input_data, node, input_name=''):
            values = input_data.split()
            for value in values:
                try:
                    fvalue = float(value)
                except (TypeError, ValueError), exp:
                    raise_parse_error(node, 'Requires sequence of integers')
            return input_data
        def gds_format_float(self, input_data, input_name=''):
            return '%f' % input_data
        def gds_validate_float(self, input_data, node, input_name=''):
            return input_data
        def gds_format_float_list(self, input_data, input_name=''):
            return '%s' % input_data
        def gds_validate_float_list(self, input_data, node, input_name=''):
            values = input_data.split()
            for value in values:
                try:
                    fvalue = float(value)
                except (TypeError, ValueError), exp:
                    raise_parse_error(node, 'Requires sequence of floats')
            return input_data
        def gds_format_double(self, input_data, input_name=''):
            return '%e' % input_data
        def gds_validate_double(self, input_data, node, input_name=''):
            return input_data
        def gds_format_double_list(self, input_data, input_name=''):
            return '%s' % input_data
        def gds_validate_double_list(self, input_data, node, input_name=''):
            values = input_data.split()
            for value in values:
                try:
                    fvalue = float(value)
                except (TypeError, ValueError), exp:
                    raise_parse_error(node, 'Requires sequence of doubles')
            return input_data
        def gds_format_boolean(self, input_data, input_name=''):
            return '%s' % input_data
        def gds_validate_boolean(self, input_data, node, input_name=''):
            return input_data
        def gds_format_boolean_list(self, input_data, input_name=''):
            return '%s' % input_data
        def gds_validate_boolean_list(self, input_data, node, input_name=''):
            values = input_data.split()
            for value in values:
                if value not in ('true', '1', 'false', '0', ):
                    raise_parse_error(node, 'Requires sequence of booleans ("true", "1", "false", "0")')
            return input_data
        def gds_str_lower(self, instring):
            return instring.lower()
        def get_path_(self, node):
            path_list = []
            self.get_path_list_(node, path_list)
            path_list.reverse()
            path = '/'.join(path_list)
            return path
        Tag_strip_pattern_ = re_.compile(r'\{.*\}')
        def get_path_list_(self, node, path_list):
            if node is None:
                return
            tag = GeneratedsSuper.Tag_strip_pattern_.sub('', node.tag)
            if tag:
                path_list.append(tag)
            self.get_path_list_(node.getparent(), path_list)
        def get_class_obj_(self, node, default_class=None):
            class_obj1 = default_class
            if 'xsi' in node.nsmap:
                classname = node.get('{%s}type' % node.nsmap['xsi'])
                if classname is not None:
                    names = classname.split(':')
                    if len(names) == 2:
                        classname = names[1]
                    class_obj2 = globals().get(classname)
                    if class_obj2 is not None:
                        class_obj1 = class_obj2
            return class_obj1
        def gds_build_any(self, node, type_name=None):
            return None


#
# If you have installed IPython you can uncomment and use the following.
# IPython is available from http://ipython.scipy.org/.
#

## from IPython.Shell import IPShellEmbed
## args = ''
## ipshell = IPShellEmbed(args,
##     banner = 'Dropping into IPython',
##     exit_msg = 'Leaving Interpreter, back to program.')

# Then use the following line where and when you want to drop into the
# IPython shell:
#    ipshell('<some message> -- Entering ipshell.\nHit Ctrl-D to exit')

#
# Globals
#

ExternalEncoding = 'ascii'
Tag_pattern_ = re_.compile(r'({.*})?(.*)')
String_cleanup_pat_ = re_.compile(r"[\n\r\s]+")
Namespace_extract_pat_ = re_.compile(r'{(.*)}(.*)')

#
# Support/utility functions.
#

def showIndent(outfile, level):
    for idx in range(level):
        outfile.write('    ')

def quote_xml(inStr):
    if not inStr:
        return ''
    s1 = (isinstance(inStr, basestring) and inStr or
          '%s' % inStr)
    s1 = s1.replace('&', '&amp;')
    s1 = s1.replace('<', '&lt;')
    s1 = s1.replace('>', '&gt;')
    return s1

def quote_attrib(inStr):
    s1 = (isinstance(inStr, basestring) and inStr or
          '%s' % inStr)
    s1 = s1.replace('&', '&amp;')
    s1 = s1.replace('<', '&lt;')
    s1 = s1.replace('>', '&gt;')
    if '"' in s1:
        if "'" in s1:
            s1 = '"%s"' % s1.replace('"', "&quot;")
        else:
            s1 = "'%s'" % s1
    else:
        s1 = '"%s"' % s1
    return s1

def quote_python(inStr):
    s1 = inStr
    if s1.find("'") == -1:
        if s1.find('\n') == -1:
            return "'%s'" % s1
        else:
            return "'''%s'''" % s1
    else:
        if s1.find('"') != -1:
            s1 = s1.replace('"', '\\"')
        if s1.find('\n') == -1:
            return '"%s"' % s1
        else:
            return '"""%s"""' % s1

def get_all_text_(node):
    if node.text is not None:
        text = node.text
    else:
        text = ''
    for child in node:
        if child.tail is not None:
            text += child.tail
    return text

def find_attr_value_(attr_name, node):
    attrs = node.attrib
    attr_parts = attr_name.split(':')
    value = None
    if len(attr_parts) == 1:
        value = attrs.get(attr_name)
    elif len(attr_parts) == 2:
        prefix, name = attr_parts
        namespace = node.nsmap.get(prefix)
        if namespace is not None:
            value = attrs.get('{%s}%s' % (namespace, name, ))
    return value


class GDSParseError(Exception):
    pass

def raise_parse_error(node, msg):
    if XMLParser_import_library == XMLParser_import_lxml:
        msg = '%s (element %s/line %d)' % (msg, node.tag, node.sourceline, )
    else:
        msg = '%s (element %s)' % (msg, node.tag, )
    raise GDSParseError(msg)


class MixedContainer:
    # Constants for category:
    CategoryNone = 0
    CategoryText = 1
    CategorySimple = 2
    CategoryComplex = 3
    # Constants for content_type:
    TypeNone = 0
    TypeText = 1
    TypeString = 2
    TypeInteger = 3
    TypeFloat = 4
    TypeDecimal = 5
    TypeDouble = 6
    TypeBoolean = 7
    def __init__(self, category, content_type, name, value):
        self.category = category
        self.content_type = content_type
        self.name = name
        self.value = value
    def getCategory(self):
        return self.category
    def getContenttype(self, content_type):
        return self.content_type
    def getValue(self):
        return self.value
    def getName(self):
        return self.name
    def export(self, outfile, level, name, namespace):
        if self.category == MixedContainer.CategoryText:
            # Prevent exporting empty content as empty lines.
            if self.value.strip(): 
                outfile.write(self.value)
        elif self.category == MixedContainer.CategorySimple:
            self.exportSimple(outfile, level, name)
        else:    # category == MixedContainer.CategoryComplex
            self.value.export(outfile, level, namespace,name)
    def exportSimple(self, outfile, level, name):
        if self.content_type == MixedContainer.TypeString:
            outfile.write('<%s>%s</%s>' % (self.name, self.value, self.name))
        elif self.content_type == MixedContainer.TypeInteger or \
                self.content_type == MixedContainer.TypeBoolean:
            outfile.write('<%s>%d</%s>' % (self.name, self.value, self.name))
        elif self.content_type == MixedContainer.TypeFloat or \
                self.content_type == MixedContainer.TypeDecimal:
            outfile.write('<%s>%f</%s>' % (self.name, self.value, self.name))
        elif self.content_type == MixedContainer.TypeDouble:
            outfile.write('<%s>%g</%s>' % (self.name, self.value, self.name))
    def exportLiteral(self, outfile, level, name):
        if self.category == MixedContainer.CategoryText:
            showIndent(outfile, level)
            outfile.write('model_.MixedContainer(%d, %d, "%s", "%s"),\n' % \
                (self.category, self.content_type, self.name, self.value))
        elif self.category == MixedContainer.CategorySimple:
            showIndent(outfile, level)
            outfile.write('model_.MixedContainer(%d, %d, "%s", "%s"),\n' % \
                (self.category, self.content_type, self.name, self.value))
        else:    # category == MixedContainer.CategoryComplex
            showIndent(outfile, level)
            outfile.write('model_.MixedContainer(%d, %d, "%s",\n' % \
                (self.category, self.content_type, self.name,))
            self.value.exportLiteral(outfile, level + 1)
            showIndent(outfile, level)
            outfile.write(')\n')


class MemberSpec_(object):
    def __init__(self, name='', data_type='', container=0):
        self.name = name
        self.data_type = data_type
        self.container = container
    def set_name(self, name): self.name = name
    def get_name(self): return self.name
    def set_data_type(self, data_type): self.data_type = data_type
    def get_data_type_chain(self): return self.data_type
    def get_data_type(self):
        if isinstance(self.data_type, list):
            if len(self.data_type) > 0:
                return self.data_type[-1]
            else:
                return 'xs:string'
        else:
            return self.data_type
    def set_container(self, container): self.container = container
    def get_container(self): return self.container

def _cast(typ, value):
    if typ is None or value is None:
        return value
    return typ(value)

#
# Data representation classes.
#

class sectools_policy(GeneratedsSuper):
    subclass = None
    superclass = None
    def __init__(self, sec_image_policy=None, install_policy=None, build_policy=None):
        self.sec_image_policy = sec_image_policy
        self.install_policy = install_policy
        self.build_policy = build_policy
    def factory(*args_, **kwargs_):
        if sectools_policy.subclass:
            return sectools_policy.subclass(*args_, **kwargs_)
        else:
            return sectools_policy(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_sec_image_policy(self): return self.sec_image_policy
    def set_sec_image_policy(self, sec_image_policy): self.sec_image_policy = sec_image_policy
    def get_install_policy(self): return self.install_policy
    def set_install_policy(self, install_policy): self.install_policy = install_policy
    def get_build_policy(self): return self.build_policy
    def set_build_policy(self, build_policy): self.build_policy = build_policy
    def export(self, outfile, level, namespace_='tns:', name_='sectools_policy', namespacedef_=''):
        showIndent(outfile, level)
        outfile.write('<%s%s%s' % (namespace_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = []
        self.exportAttributes(outfile, level, already_processed, namespace_, name_='sectools_policy')
        if self.hasContent_():
            outfile.write('>\n')
            self.exportChildren(outfile, level + 1, namespace_, name_)
            showIndent(outfile, level)
            outfile.write('</%s%s>\n' % (namespace_, name_))
        else:
            outfile.write('/>\n')
    def exportAttributes(self, outfile, level, already_processed, namespace_='tns:', name_='sectools_policy'):
        pass
    def exportChildren(self, outfile, level, namespace_='tns:', name_='sectools_policy', fromsubclass_=False):
        if self.sec_image_policy is not None:
            self.sec_image_policy.export(outfile, level, namespace_, name_='sec_image_policy', )
        if self.install_policy is not None:
            self.install_policy.export(outfile, level, namespace_, name_='install_policy')
        if self.build_policy is not None:
            self.build_policy.export(outfile, level, namespace_, name_='build_policy')
    def hasContent_(self):
        if (
            self.sec_image_policy is not None or
            self.install_policy is not None or
            self.build_policy is not None
            ):
            return True
        else:
            return False
    def exportLiteral(self, outfile, level, name_='sectools_policy'):
        level += 1
        self.exportLiteralAttributes(outfile, level, [], name_)
        if self.hasContent_():
            self.exportLiteralChildren(outfile, level, name_)
    def exportLiteralAttributes(self, outfile, level, already_processed, name_):
        pass
    def exportLiteralChildren(self, outfile, level, name_):
        if self.sec_image_policy is not None:
            showIndent(outfile, level)
            outfile.write('sec_image_policy=model_.complex_sec_image_policy(\n')
            self.sec_image_policy.exportLiteral(outfile, level, name_='sec_image_policy')
            showIndent(outfile, level)
            outfile.write('),\n')
        if self.install_policy is not None:
            showIndent(outfile, level)
            outfile.write('install_policy=model_.complex_install_policy(\n')
            self.install_policy.exportLiteral(outfile, level, name_='install_policy')
            showIndent(outfile, level)
            outfile.write('),\n')
        if self.build_policy is not None:
            showIndent(outfile, level)
            outfile.write('build_policy=model_.complex_build_policy(\n')
            self.build_policy.exportLiteral(outfile, level, name_='build_policy')
            showIndent(outfile, level)
            outfile.write('),\n')
    def build(self, node):
        self.buildAttributes(node, node.attrib, [])
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        if nodeName_ == 'sec_image_policy':
            obj_ = complex_sec_image_policy.factory()
            obj_.build(child_)
            self.set_sec_image_policy(obj_)
        elif nodeName_ == 'install_policy':
            obj_ = complex_install_policy.factory()
            obj_.build(child_)
            self.set_install_policy(obj_)
        elif nodeName_ == 'build_policy':
            obj_ = complex_build_policy.factory()
            obj_.build(child_)
            self.set_build_policy(obj_)
# end class sectools_policy


class complex_sec_image_policy(GeneratedsSuper):
    subclass = None
    superclass = None
    def __init__(self, policy=None):
        if policy is None:
            self.policy = []
        else:
            self.policy = policy
    def factory(*args_, **kwargs_):
        if complex_sec_image_policy.subclass:
            return complex_sec_image_policy.subclass(*args_, **kwargs_)
        else:
            return complex_sec_image_policy(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_policy(self): return self.policy
    def set_policy(self, policy): self.policy = policy
    def add_policy(self, value): self.policy.append(value)
    def insert_policy(self, index, value): self.policy[index] = value
    def export(self, outfile, level, namespace_='tns:', name_='complex_sec_image_policy', namespacedef_=''):
        showIndent(outfile, level)
        outfile.write('<%s%s%s' % (namespace_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = []
        self.exportAttributes(outfile, level, already_processed, namespace_, name_='complex_sec_image_policy')
        if self.hasContent_():
            outfile.write('>\n')
            self.exportChildren(outfile, level + 1, namespace_, name_)
            showIndent(outfile, level)
            outfile.write('</%s%s>\n' % (namespace_, name_))
        else:
            outfile.write('/>\n')
    def exportAttributes(self, outfile, level, already_processed, namespace_='tns:', name_='complex_sec_image_policy'):
        pass
    def exportChildren(self, outfile, level, namespace_='tns:', name_='complex_sec_image_policy', fromsubclass_=False):
        for policy_ in self.policy:
            policy_.export(outfile, level, namespace_, name_='policy')
    def hasContent_(self):
        if (
            self.policy
            ):
            return True
        else:
            return False
    def exportLiteral(self, outfile, level, name_='complex_sec_image_policy'):
        level += 1
        self.exportLiteralAttributes(outfile, level, [], name_)
        if self.hasContent_():
            self.exportLiteralChildren(outfile, level, name_)
    def exportLiteralAttributes(self, outfile, level, already_processed, name_):
        pass
    def exportLiteralChildren(self, outfile, level, name_):
        showIndent(outfile, level)
        outfile.write('policy=[\n')
        level += 1
        for policy_ in self.policy:
            showIndent(outfile, level)
            outfile.write('model_.complex_sec_image_policy_entry(\n')
            policy_.exportLiteral(outfile, level, name_='complex_sec_image_policy_entry')
            showIndent(outfile, level)
            outfile.write('),\n')
        level -= 1
        showIndent(outfile, level)
        outfile.write('],\n')
    def build(self, node):
        self.buildAttributes(node, node.attrib, [])
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        if nodeName_ == 'policy':
            obj_ = complex_sec_image_policy_entry.factory()
            obj_.build(child_)
            self.policy.append(obj_)
# end class complex_sec_image_policy


class complex_sec_image_policy_entry(GeneratedsSuper):
    subclass = None
    superclass = None
    def __init__(self, feature_flag=None, cmd_options=None, id=None, exclude=None):
        self.feature_flag = _cast(None, feature_flag)
        self.cmd_options = _cast(None, cmd_options)
        self.id = _cast(None, id)
        if exclude is None:
            self.exclude = []
        else:
            self.exclude = exclude
    def factory(*args_, **kwargs_):
        if complex_sec_image_policy_entry.subclass:
            return complex_sec_image_policy_entry.subclass(*args_, **kwargs_)
        else:
            return complex_sec_image_policy_entry(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_exclude(self): return self.exclude
    def set_exclude(self, exclude): self.exclude = exclude
    def add_exclude(self, value): self.exclude.append(value)
    def insert_exclude(self, index, value): self.exclude[index] = value
    def get_feature_flag(self): return self.feature_flag
    def set_feature_flag(self, feature_flag): self.feature_flag = feature_flag
    def get_cmd_options(self): return self.cmd_options
    def set_cmd_options(self, cmd_options): self.cmd_options = cmd_options
    def get_id(self): return self.id
    def set_id(self, id): self.id = id
    def export(self, outfile, level, namespace_='tns:', name_='complex_sec_image_policy_entry', namespacedef_=''):
        showIndent(outfile, level)
        outfile.write('<%s%s%s' % (namespace_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = []
        self.exportAttributes(outfile, level, already_processed, namespace_, name_='complex_sec_image_policy_entry')
        if self.hasContent_():
            outfile.write('>\n')
            self.exportChildren(outfile, level + 1, namespace_, name_)
            showIndent(outfile, level)
            outfile.write('</%s%s>\n' % (namespace_, name_))
        else:
            outfile.write('/>\n')
    def exportAttributes(self, outfile, level, already_processed, namespace_='tns:', name_='complex_sec_image_policy_entry'):
        if self.feature_flag is not None and 'feature_flag' not in already_processed:
            already_processed.append('feature_flag')
            outfile.write(' feature_flag=%s' % (self.gds_format_string(quote_attrib(self.feature_flag).encode(ExternalEncoding), input_name='feature_flag'), ))
        if self.cmd_options is not None and 'cmd_options' not in already_processed:
            already_processed.append('cmd_options')
            outfile.write(' cmd_options=%s' % (self.gds_format_string(quote_attrib(self.cmd_options).encode(ExternalEncoding), input_name='cmd_options'), ))
        if self.id is not None and 'id' not in already_processed:
            already_processed.append('id')
            outfile.write(' id=%s' % (self.gds_format_string(quote_attrib(self.id).encode(ExternalEncoding), input_name='id'), ))
    def exportChildren(self, outfile, level, namespace_='tns:', name_='complex_sec_image_policy_entry', fromsubclass_=False):
        for exclude_ in self.exclude:
            exclude_.export(outfile, level, namespace_, name_='exclude')
    def hasContent_(self):
        if (
            self.exclude
            ):
            return True
        else:
            return False
    def exportLiteral(self, outfile, level, name_='complex_sec_image_policy_entry'):
        level += 1
        self.exportLiteralAttributes(outfile, level, [], name_)
        if self.hasContent_():
            self.exportLiteralChildren(outfile, level, name_)
    def exportLiteralAttributes(self, outfile, level, already_processed, name_):
        if self.feature_flag is not None and 'feature_flag' not in already_processed:
            already_processed.append('feature_flag')
            showIndent(outfile, level)
            outfile.write('feature_flag = "%s",\n' % (self.feature_flag,))
        if self.cmd_options is not None and 'cmd_options' not in already_processed:
            already_processed.append('cmd_options')
            showIndent(outfile, level)
            outfile.write('cmd_options = "%s",\n' % (self.cmd_options,))
        if self.id is not None and 'id' not in already_processed:
            already_processed.append('id')
            showIndent(outfile, level)
            outfile.write('id = "%s",\n' % (self.id,))
    def exportLiteralChildren(self, outfile, level, name_):
        showIndent(outfile, level)
        outfile.write('exclude=[\n')
        level += 1
        for exclude_ in self.exclude:
            showIndent(outfile, level)
            outfile.write('model_.complex_exclude(\n')
            exclude_.exportLiteral(outfile, level, name_='complex_exclude')
            showIndent(outfile, level)
            outfile.write('),\n')
        level -= 1
        showIndent(outfile, level)
        outfile.write('],\n')
    def build(self, node):
        self.buildAttributes(node, node.attrib, [])
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
    def buildAttributes(self, node, attrs, already_processed):
        value = find_attr_value_('feature_flag', node)
        if value is not None and 'feature_flag' not in already_processed:
            already_processed.append('feature_flag')
            self.feature_flag = value
        value = find_attr_value_('cmd_options', node)
        if value is not None and 'cmd_options' not in already_processed:
            already_processed.append('cmd_options')
            self.cmd_options = value
        value = find_attr_value_('id', node)
        if value is not None and 'id' not in already_processed:
            already_processed.append('id')
            self.id = value
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        if nodeName_ == 'exclude':
            obj_ = complex_exclude.factory()
            obj_.build(child_)
            self.exclude.append(obj_)
# end class complex_sec_image_policy_entry


class complex_exclude(GeneratedsSuper):
    subclass = None
    superclass = None
    def __init__(self, selected_encryptor=None, sign_id=None):
        self.selected_encryptor = _cast(None, selected_encryptor)
        if sign_id is None:
            self.sign_id = []
        else:
            self.sign_id = sign_id
    def factory(*args_, **kwargs_):
        if complex_exclude.subclass:
            return complex_exclude.subclass(*args_, **kwargs_)
        else:
            return complex_exclude(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_sign_id(self): return self.sign_id
    def set_sign_id(self, sign_id): self.sign_id = sign_id
    def add_sign_id(self, value): self.sign_id.append(value)
    def insert_sign_id(self, index, value): self.sign_id[index] = value
    def get_selected_encryptor(self): return self.selected_encryptor
    def set_selected_encryptor(self, selected_encryptor): self.selected_encryptor = selected_encryptor
    def export(self, outfile, level, namespace_='tns:', name_='complex_exclude', namespacedef_=''):
        showIndent(outfile, level)
        outfile.write('<%s%s%s' % (namespace_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = []
        self.exportAttributes(outfile, level, already_processed, namespace_, name_='complex_exclude')
        if self.hasContent_():
            outfile.write('>\n')
            self.exportChildren(outfile, level + 1, namespace_, name_)
            showIndent(outfile, level)
            outfile.write('</%s%s>\n' % (namespace_, name_))
        else:
            outfile.write('/>\n')
    def exportAttributes(self, outfile, level, already_processed, namespace_='tns:', name_='complex_exclude'):
        if self.selected_encryptor is not None and 'selected_encryptor' not in already_processed:
            already_processed.append('selected_encryptor')
            outfile.write(' selected_encryptor=%s' % (self.gds_format_string(quote_attrib(self.selected_encryptor).encode(ExternalEncoding), input_name='selected_encryptor'), ))
    def exportChildren(self, outfile, level, namespace_='tns:', name_='complex_exclude', fromsubclass_=False):
        for sign_id_ in self.sign_id:
            showIndent(outfile, level)
            outfile.write('<%ssign_id>%s</%ssign_id>\n' % (namespace_, self.gds_format_string(quote_xml(sign_id_).encode(ExternalEncoding), input_name='sign_id'), namespace_))
    def hasContent_(self):
        if (
            self.sign_id
            ):
            return True
        else:
            return False
    def exportLiteral(self, outfile, level, name_='complex_exclude'):
        level += 1
        self.exportLiteralAttributes(outfile, level, [], name_)
        if self.hasContent_():
            self.exportLiteralChildren(outfile, level, name_)
    def exportLiteralAttributes(self, outfile, level, already_processed, name_):
        if self.selected_encryptor is not None and 'selected_encryptor' not in already_processed:
            already_processed.append('selected_encryptor')
            showIndent(outfile, level)
            outfile.write('selected_encryptor = "%s",\n' % (self.selected_encryptor,))
    def exportLiteralChildren(self, outfile, level, name_):
        showIndent(outfile, level)
        outfile.write('sign_id=[\n')
        level += 1
        for sign_id_ in self.sign_id:
            showIndent(outfile, level)
            outfile.write('%s,\n' % quote_python(sign_id_).encode(ExternalEncoding))
        level -= 1
        showIndent(outfile, level)
        outfile.write('],\n')
    def build(self, node):
        self.buildAttributes(node, node.attrib, [])
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
    def buildAttributes(self, node, attrs, already_processed):
        value = find_attr_value_('selected_encryptor', node)
        if value is not None and 'selected_encryptor' not in already_processed:
            already_processed.append('selected_encryptor')
            self.selected_encryptor = value
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        if nodeName_ == 'sign_id':
            sign_id_ = child_.text
            sign_id_ = self.gds_validate_string(sign_id_, node, 'sign_id')
            self.sign_id.append(sign_id_)
# end class complex_exclude


class complex_install_policy(GeneratedsSuper):
    subclass = None
    superclass = None
    def __init__(self, policy=None):
        if policy is None:
            self.policy = []
        else:
            self.policy = policy
    def factory(*args_, **kwargs_):
        if complex_install_policy.subclass:
            return complex_install_policy.subclass(*args_, **kwargs_)
        else:
            return complex_install_policy(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_policy(self): return self.policy
    def set_policy(self, policy): self.policy = policy
    def add_policy(self, value): self.policy.append(value)
    def insert_policy(self, index, value): self.policy[index] = value
    def export(self, outfile, level, namespace_='tns:', name_='complex_install_policy', namespacedef_=''):
        showIndent(outfile, level)
        outfile.write('<%s%s%s' % (namespace_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = []
        self.exportAttributes(outfile, level, already_processed, namespace_, name_='complex_install_policy')
        if self.hasContent_():
            outfile.write('>\n')
            self.exportChildren(outfile, level + 1, namespace_, name_)
            showIndent(outfile, level)
            outfile.write('</%s%s>\n' % (namespace_, name_))
        else:
            outfile.write('/>\n')
    def exportAttributes(self, outfile, level, already_processed, namespace_='tns:', name_='complex_install_policy'):
        pass
    def exportChildren(self, outfile, level, namespace_='tns:', name_='complex_install_policy', fromsubclass_=False):
        for policy_ in self.policy:
            policy_.export(outfile, level, namespace_, name_='policy')
    def hasContent_(self):
        if (
            self.policy
            ):
            return True
        else:
            return False
    def exportLiteral(self, outfile, level, name_='complex_install_policy'):
        level += 1
        self.exportLiteralAttributes(outfile, level, [], name_)
        if self.hasContent_():
            self.exportLiteralChildren(outfile, level, name_)
    def exportLiteralAttributes(self, outfile, level, already_processed, name_):
        pass
    def exportLiteralChildren(self, outfile, level, name_):
        showIndent(outfile, level)
        outfile.write('policy=[\n')
        level += 1
        for policy_ in self.policy:
            showIndent(outfile, level)
            outfile.write('model_.complex_install_policy_entry(\n')
            policy_.exportLiteral(outfile, level, name_='complex_install_policy_entry')
            showIndent(outfile, level)
            outfile.write('),\n')
        level -= 1
        showIndent(outfile, level)
        outfile.write('],\n')
    def build(self, node):
        self.buildAttributes(node, node.attrib, [])
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        if nodeName_ == 'policy':
            obj_ = complex_install_policy_entry.factory()
            obj_.build(child_)
            self.policy.append(obj_)
# end class complex_install_policy


class complex_install_policy_entry(GeneratedsSuper):
    subclass = None
    superclass = None
    def __init__(self, feature_flag=None, id=None, directory=None):
        self.feature_flag = _cast(None, feature_flag)
        self.id = _cast(None, id)
        if directory is None:
            self.directory = []
        else:
            self.directory = directory
    def factory(*args_, **kwargs_):
        if complex_install_policy_entry.subclass:
            return complex_install_policy_entry.subclass(*args_, **kwargs_)
        else:
            return complex_install_policy_entry(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_directory(self): return self.directory
    def set_directory(self, directory): self.directory = directory
    def add_directory(self, value): self.directory.append(value)
    def insert_directory(self, index, value): self.directory[index] = value
    def get_feature_flag(self): return self.feature_flag
    def set_feature_flag(self, feature_flag): self.feature_flag = feature_flag
    def get_id(self): return self.id
    def set_id(self, id): self.id = id
    def export(self, outfile, level, namespace_='tns:', name_='complex_install_policy_entry', namespacedef_=''):
        showIndent(outfile, level)
        outfile.write('<%s%s%s' % (namespace_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = []
        self.exportAttributes(outfile, level, already_processed, namespace_, name_='complex_install_policy_entry')
        if self.hasContent_():
            outfile.write('>\n')
            self.exportChildren(outfile, level + 1, namespace_, name_)
            showIndent(outfile, level)
            outfile.write('</%s%s>\n' % (namespace_, name_))
        else:
            outfile.write('/>\n')
    def exportAttributes(self, outfile, level, already_processed, namespace_='tns:', name_='complex_install_policy_entry'):
        if self.feature_flag is not None and 'feature_flag' not in already_processed:
            already_processed.append('feature_flag')
            outfile.write(' feature_flag=%s' % (self.gds_format_string(quote_attrib(self.feature_flag).encode(ExternalEncoding), input_name='feature_flag'), ))
        if self.id is not None and 'id' not in already_processed:
            already_processed.append('id')
            outfile.write(' id=%s' % (self.gds_format_string(quote_attrib(self.id).encode(ExternalEncoding), input_name='id'), ))
    def exportChildren(self, outfile, level, namespace_='tns:', name_='complex_install_policy_entry', fromsubclass_=False):
        for directory_ in self.directory:
            directory_.export(outfile, level, namespace_, name_='directory')
    def hasContent_(self):
        if (
            self.directory
            ):
            return True
        else:
            return False
    def exportLiteral(self, outfile, level, name_='complex_install_policy_entry'):
        level += 1
        self.exportLiteralAttributes(outfile, level, [], name_)
        if self.hasContent_():
            self.exportLiteralChildren(outfile, level, name_)
    def exportLiteralAttributes(self, outfile, level, already_processed, name_):
        if self.feature_flag is not None and 'feature_flag' not in already_processed:
            already_processed.append('feature_flag')
            showIndent(outfile, level)
            outfile.write('feature_flag = "%s",\n' % (self.feature_flag,))
        if self.id is not None and 'id' not in already_processed:
            already_processed.append('id')
            showIndent(outfile, level)
            outfile.write('id = "%s",\n' % (self.id,))
    def exportLiteralChildren(self, outfile, level, name_):
        showIndent(outfile, level)
        outfile.write('directory=[\n')
        level += 1
        for directory_ in self.directory:
            showIndent(outfile, level)
            outfile.write('model_.complex_directory(\n')
            directory_.exportLiteral(outfile, level, name_='complex_directory')
            showIndent(outfile, level)
            outfile.write('),\n')
        level -= 1
        showIndent(outfile, level)
        outfile.write('],\n')
    def build(self, node):
        self.buildAttributes(node, node.attrib, [])
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
    def buildAttributes(self, node, attrs, already_processed):
        value = find_attr_value_('feature_flag', node)
        if value is not None and 'feature_flag' not in already_processed:
            already_processed.append('feature_flag')
            self.feature_flag = value
        value = find_attr_value_('id', node)
        if value is not None and 'id' not in already_processed:
            already_processed.append('id')
            self.id = value
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        if nodeName_ == 'directory':
            obj_ = complex_directory.factory()
            obj_.build(child_)
            self.directory.append(obj_)
# end class complex_install_policy_entry


class complex_directory(GeneratedsSuper):
    subclass = None
    superclass = None
    def __init__(self, sec_image_policy=None, value=None):
        self.sec_image_policy = _cast(None, sec_image_policy)
        self.value = value
    def factory(*args_, **kwargs_):
        if complex_directory.subclass:
            return complex_directory.subclass(*args_, **kwargs_)
        else:
            return complex_directory(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_value(self): return self.value
    def set_value(self, value): self.value = value
    def get_sec_image_policy(self): return self.sec_image_policy
    def set_sec_image_policy(self, sec_image_policy): self.sec_image_policy = sec_image_policy
    def export(self, outfile, level, namespace_='tns:', name_='complex_directory', namespacedef_=''):
        showIndent(outfile, level)
        outfile.write('<%s%s%s' % (namespace_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = []
        self.exportAttributes(outfile, level, already_processed, namespace_, name_='complex_directory')
        if self.hasContent_():
            outfile.write('>\n')
            self.exportChildren(outfile, level + 1, namespace_, name_)
            showIndent(outfile, level)
            outfile.write('</%s%s>\n' % (namespace_, name_))
        else:
            outfile.write('/>\n')
    def exportAttributes(self, outfile, level, already_processed, namespace_='tns:', name_='complex_directory'):
        if self.sec_image_policy is not None and 'sec_image_policy' not in already_processed:
            already_processed.append('sec_image_policy')
            outfile.write(' sec_image_policy=%s' % (self.gds_format_string(quote_attrib(self.sec_image_policy).encode(ExternalEncoding), input_name='sec_image_policy'), ))
    def exportChildren(self, outfile, level, namespace_='tns:', name_='complex_directory', fromsubclass_=False):
        if self.value is not None:
            showIndent(outfile, level)
            outfile.write('<%svalue>%s</%svalue>\n' % (namespace_, self.gds_format_string(quote_xml(self.value).encode(ExternalEncoding), input_name='value'), namespace_))
    def hasContent_(self):
        if (
            self.value is not None
            ):
            return True
        else:
            return False
    def exportLiteral(self, outfile, level, name_='complex_directory'):
        level += 1
        self.exportLiteralAttributes(outfile, level, [], name_)
        if self.hasContent_():
            self.exportLiteralChildren(outfile, level, name_)
    def exportLiteralAttributes(self, outfile, level, already_processed, name_):
        if self.sec_image_policy is not None and 'sec_image_policy' not in already_processed:
            already_processed.append('sec_image_policy')
            showIndent(outfile, level)
            outfile.write('sec_image_policy = "%s",\n' % (self.sec_image_policy,))
    def exportLiteralChildren(self, outfile, level, name_):
        if self.value is not None:
            showIndent(outfile, level)
            outfile.write('value=%s,\n' % quote_python(self.value).encode(ExternalEncoding))
    def build(self, node):
        self.buildAttributes(node, node.attrib, [])
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
    def buildAttributes(self, node, attrs, already_processed):
        value = find_attr_value_('sec_image_policy', node)
        if value is not None and 'sec_image_policy' not in already_processed:
            already_processed.append('sec_image_policy')
            self.sec_image_policy = value
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        if nodeName_ == 'value':
            value_ = child_.text
            value_ = self.gds_validate_string(value_, node, 'value')
            self.value = value_
# end class complex_directory


class complex_build_policy(GeneratedsSuper):
    subclass = None
    superclass = None
    def __init__(self, policy_enable=None):
        if policy_enable is None:
            self.policy_enable = []
        else:
            self.policy_enable = policy_enable
    def factory(*args_, **kwargs_):
        if complex_build_policy.subclass:
            return complex_build_policy.subclass(*args_, **kwargs_)
        else:
            return complex_build_policy(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_policy_enable(self): return self.policy_enable
    def set_policy_enable(self, policy_enable): self.policy_enable = policy_enable
    def add_policy_enable(self, value): self.policy_enable.append(value)
    def insert_policy_enable(self, index, value): self.policy_enable[index] = value
    def export(self, outfile, level, namespace_='tns:', name_='complex_build_policy', namespacedef_=''):
        showIndent(outfile, level)
        outfile.write('<%s%s%s' % (namespace_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = []
        self.exportAttributes(outfile, level, already_processed, namespace_, name_='complex_build_policy')
        if self.hasContent_():
            outfile.write('>\n')
            self.exportChildren(outfile, level + 1, namespace_, name_)
            showIndent(outfile, level)
            outfile.write('</%s%s>\n' % (namespace_, name_))
        else:
            outfile.write('/>\n')
    def exportAttributes(self, outfile, level, already_processed, namespace_='tns:', name_='complex_build_policy'):
        pass
    def exportChildren(self, outfile, level, namespace_='tns:', name_='complex_build_policy', fromsubclass_=False):
        for policy_enable_ in self.policy_enable:
            policy_enable_.export(outfile, level, namespace_, name_='policy_enable')
    def hasContent_(self):
        if (
            self.policy_enable
            ):
            return True
        else:
            return False
    def exportLiteral(self, outfile, level, name_='complex_build_policy'):
        level += 1
        self.exportLiteralAttributes(outfile, level, [], name_)
        if self.hasContent_():
            self.exportLiteralChildren(outfile, level, name_)
    def exportLiteralAttributes(self, outfile, level, already_processed, name_):
        pass
    def exportLiteralChildren(self, outfile, level, name_):
        showIndent(outfile, level)
        outfile.write('policy_enable=[\n')
        level += 1
        for policy_enable_ in self.policy_enable:
            showIndent(outfile, level)
            outfile.write('model_.complex_policy_enable(\n')
            policy_enable_.exportLiteral(outfile, level, name_='complex_policy_enable')
            showIndent(outfile, level)
            outfile.write('),\n')
        level -= 1
        showIndent(outfile, level)
        outfile.write('],\n')
    def build(self, node):
        self.buildAttributes(node, node.attrib, [])
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        if nodeName_ == 'policy_enable':
            obj_ = complex_policy_enable.factory()
            obj_.build(child_)
            self.policy_enable.append(obj_)
# end class complex_build_policy


class complex_policy_enable(GeneratedsSuper):
    subclass = None
    superclass = None
    def __init__(self, feature_flag=None, id=None, sec_image_policy=None, install_policy=None):
        self.feature_flag = _cast(None, feature_flag)
        self.id = _cast(None, id)
        if sec_image_policy is None:
            self.sec_image_policy = []
        else:
            self.sec_image_policy = sec_image_policy
        if install_policy is None:
            self.install_policy = []
        else:
            self.install_policy = install_policy
    def factory(*args_, **kwargs_):
        if complex_policy_enable.subclass:
            return complex_policy_enable.subclass(*args_, **kwargs_)
        else:
            return complex_policy_enable(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_sec_image_policy(self): return self.sec_image_policy
    def set_sec_image_policy(self, sec_image_policy): self.sec_image_policy = sec_image_policy
    def add_sec_image_policy(self, value): self.sec_image_policy.append(value)
    def insert_sec_image_policy(self, index, value): self.sec_image_policy[index] = value
    def get_install_policy(self): return self.install_policy
    def set_install_policy(self, install_policy): self.install_policy = install_policy
    def add_install_policy(self, value): self.install_policy.append(value)
    def insert_install_policy(self, index, value): self.install_policy[index] = value
    def get_feature_flag(self): return self.feature_flag
    def set_feature_flag(self, feature_flag): self.feature_flag = feature_flag
    def get_id(self): return self.id
    def set_id(self, id): self.id = id
    def export(self, outfile, level, namespace_='tns:', name_='complex_policy_enable', namespacedef_=''):
        showIndent(outfile, level)
        outfile.write('<%s%s%s' % (namespace_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = []
        self.exportAttributes(outfile, level, already_processed, namespace_, name_='complex_policy_enable')
        if self.hasContent_():
            outfile.write('>\n')
            self.exportChildren(outfile, level + 1, namespace_, name_)
            showIndent(outfile, level)
            outfile.write('</%s%s>\n' % (namespace_, name_))
        else:
            outfile.write('/>\n')
    def exportAttributes(self, outfile, level, already_processed, namespace_='tns:', name_='complex_policy_enable'):
        if self.feature_flag is not None and 'feature_flag' not in already_processed:
            already_processed.append('feature_flag')
            outfile.write(' feature_flag=%s' % (self.gds_format_string(quote_attrib(self.feature_flag).encode(ExternalEncoding), input_name='feature_flag'), ))
        if self.id is not None and 'id' not in already_processed:
            already_processed.append('id')
            outfile.write(' id=%s' % (self.gds_format_string(quote_attrib(self.id).encode(ExternalEncoding), input_name='id'), ))
    def exportChildren(self, outfile, level, namespace_='tns:', name_='complex_policy_enable', fromsubclass_=False):
        for sec_image_policy_ in self.sec_image_policy:
            showIndent(outfile, level)
            outfile.write('<%ssec_image_policy>%s</%ssec_image_policy>\n' % (namespace_, self.gds_format_string(quote_xml(sec_image_policy_).encode(ExternalEncoding), input_name='sec_image_policy'), namespace_))
        for install_policy_ in self.install_policy:
            showIndent(outfile, level)
            outfile.write('<%sinstall_policy>%s</%sinstall_policy>\n' % (namespace_, self.gds_format_string(quote_xml(install_policy_).encode(ExternalEncoding), input_name='install_policy'), namespace_))
    def hasContent_(self):
        if (
            self.sec_image_policy or
            self.install_policy
            ):
            return True
        else:
            return False
    def exportLiteral(self, outfile, level, name_='complex_policy_enable'):
        level += 1
        self.exportLiteralAttributes(outfile, level, [], name_)
        if self.hasContent_():
            self.exportLiteralChildren(outfile, level, name_)
    def exportLiteralAttributes(self, outfile, level, already_processed, name_):
        if self.feature_flag is not None and 'feature_flag' not in already_processed:
            already_processed.append('feature_flag')
            showIndent(outfile, level)
            outfile.write('feature_flag = "%s",\n' % (self.feature_flag,))
        if self.id is not None and 'id' not in already_processed:
            already_processed.append('id')
            showIndent(outfile, level)
            outfile.write('id = "%s",\n' % (self.id,))
    def exportLiteralChildren(self, outfile, level, name_):
        showIndent(outfile, level)
        outfile.write('sec_image_policy=[\n')
        level += 1
        for sec_image_policy_ in self.sec_image_policy:
            showIndent(outfile, level)
            outfile.write('%s,\n' % quote_python(sec_image_policy_).encode(ExternalEncoding))
        level -= 1
        showIndent(outfile, level)
        outfile.write('],\n')
        showIndent(outfile, level)
        outfile.write('install_policy=[\n')
        level += 1
        for install_policy_ in self.install_policy:
            showIndent(outfile, level)
            outfile.write('%s,\n' % quote_python(install_policy_).encode(ExternalEncoding))
        level -= 1
        showIndent(outfile, level)
        outfile.write('],\n')
    def build(self, node):
        self.buildAttributes(node, node.attrib, [])
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
    def buildAttributes(self, node, attrs, already_processed):
        value = find_attr_value_('feature_flag', node)
        if value is not None and 'feature_flag' not in already_processed:
            already_processed.append('feature_flag')
            self.feature_flag = value
        value = find_attr_value_('id', node)
        if value is not None and 'id' not in already_processed:
            already_processed.append('id')
            self.id = value
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        if nodeName_ == 'sec_image_policy':
            sec_image_policy_ = child_.text
            sec_image_policy_ = self.gds_validate_string(sec_image_policy_, node, 'sec_image_policy')
            self.sec_image_policy.append(sec_image_policy_)
        elif nodeName_ == 'install_policy':
            install_policy_ = child_.text
            install_policy_ = self.gds_validate_string(install_policy_, node, 'install_policy')
            self.install_policy.append(install_policy_)
# end class complex_policy_enable


USAGE_TEXT = """
Usage: python <Parser>.py [ -s ] <in_xml_file>
"""

def usage():
    print USAGE_TEXT
    sys.exit(1)


def get_root_tag(node):
    tag = Tag_pattern_.match(node.tag).groups()[-1]
    rootClass = globals().get(tag)
    return tag, rootClass


def parse(inFileName):
    doc = parsexml_(inFileName)
    rootNode = doc.getroot()
    rootTag, rootClass = get_root_tag(rootNode)
    if rootClass is None:
        rootTag = 'sectools_policy'
        rootClass = sectools_policy
    rootObj = rootClass.factory()
    rootObj.build(rootNode)
    # Enable Python to collect the space used by the DOM.
    doc = None
    sys.stdout.write('<?xml version="1.0" ?>\n')
    rootObj.export(sys.stdout, 0, name_=rootTag, 
        namespacedef_='xmlns:tns="http://www.qualcomm.com/sectools_policy"')
    return rootObj


def parseString(inString):
    from StringIO import StringIO
    doc = parsexml_(StringIO(inString))
    rootNode = doc.getroot()
    rootTag, rootClass = get_root_tag(rootNode)
    if rootClass is None:
        rootTag = 'sectools_policy'
        rootClass = sectools_policy
    rootObj = rootClass.factory()
    rootObj.build(rootNode)
    # Enable Python to collect the space used by the DOM.
    doc = None
    sys.stdout.write('<?xml version="1.0" ?>\n')
    rootObj.export(sys.stdout, 0, name_="sectools_policy",
        namespacedef_='xmlns:tns="http://www.qualcomm.com/sectools_policy"')
    return rootObj


def parseLiteral(inFileName):
    doc = parsexml_(inFileName)
    rootNode = doc.getroot()
    rootTag, rootClass = get_root_tag(rootNode)
    if rootClass is None:
        rootTag = 'sectools_policy'
        rootClass = sectools_policy
    rootObj = rootClass.factory()
    rootObj.build(rootNode)
    # Enable Python to collect the space used by the DOM.
    doc = None
    sys.stdout.write('#from auto_gen_policy_parser import *\n\n')
    sys.stdout.write('import auto_gen_policy_parser as model_\n\n')
    sys.stdout.write('rootObj = model_.rootTag(\n')
    rootObj.exportLiteral(sys.stdout, 0, name_=rootTag)
    sys.stdout.write(')\n')
    return rootObj


def main():
    args = sys.argv[1:]
    if len(args) == 1:
        parse(args[0])
    else:
        usage()


if __name__ == '__main__':
    #import pdb; pdb.set_trace()
    main()


__all__ = [
    "complex_build_policy",
    "complex_directory",
    "complex_exclude",
    "complex_install_policy",
    "complex_install_policy_entry",
    "complex_policy_enable",
    "complex_sec_image_policy",
    "complex_sec_image_policy_entry",
    "sectools_policy"
    ]
