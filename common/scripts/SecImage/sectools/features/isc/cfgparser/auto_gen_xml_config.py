#!/usr/bin/env python
# -*- coding: utf-8 -*- 

#
# Generated  by generateDS.py version 2.7b.
#

import sys
import getopt
import re as re_

etree_ = None
Verbose_import_ = False
(   XMLParser_import_none, XMLParser_import_lxml,
    XMLParser_import_elementtree
    ) = range(3)
XMLParser_import_library = None
try:
    # lxml
    from lxml import etree as etree_
    XMLParser_import_library = XMLParser_import_lxml
    if Verbose_import_:
        print("running with lxml.etree")
except ImportError:
    try:
        # cElementTree from Python 2.5+
        import xml.etree.cElementTree as etree_
        XMLParser_import_library = XMLParser_import_elementtree
        if Verbose_import_:
            print("running with cElementTree on Python 2.5+")
    except ImportError:
        try:
            # ElementTree from Python 2.5+
            import xml.etree.ElementTree as etree_
            XMLParser_import_library = XMLParser_import_elementtree
            if Verbose_import_:
                print("running with ElementTree on Python 2.5+")
        except ImportError:
            try:
                # normal cElementTree install
                import cElementTree as etree_
                XMLParser_import_library = XMLParser_import_elementtree
                if Verbose_import_:
                    print("running with cElementTree")
            except ImportError:
                try:
                    # normal ElementTree install
                    import elementtree.ElementTree as etree_
                    XMLParser_import_library = XMLParser_import_elementtree
                    if Verbose_import_:
                        print("running with ElementTree")
                except ImportError:
                    raise ImportError("Failed to import ElementTree from any known place")

def parsexml_(*args, **kwargs):
    if (XMLParser_import_library == XMLParser_import_lxml and
        'parser' not in kwargs):
        # Use the lxml ElementTree compatible parser so that, e.g.,
        #   we ignore comments.
        kwargs['parser'] = etree_.ETCompatXMLParser()
    doc = etree_.parse(*args, **kwargs)
    return doc

#
# User methods
#
# Calls to the methods in these classes are generated by generateDS.py.
# You can replace these methods by re-implementing the following class
#   in a module named generatedssuper.py.

try:
    from generatedssuper import GeneratedsSuper
except ImportError, exp:

    class GeneratedsSuper(object):
        def gds_format_string(self, input_data, input_name=''):
            return input_data
        def gds_validate_string(self, input_data, node, input_name=''):
            return input_data
        def gds_format_integer(self, input_data, input_name=''):
            return '%d' % input_data
        def gds_validate_integer(self, input_data, node, input_name=''):
            return input_data
        def gds_format_integer_list(self, input_data, input_name=''):
            return '%s' % input_data
        def gds_validate_integer_list(self, input_data, node, input_name=''):
            values = input_data.split()
            for value in values:
                try:
                    fvalue = float(value)
                except (TypeError, ValueError), exp:
                    raise_parse_error(node, 'Requires sequence of integers')
            return input_data
        def gds_format_float(self, input_data, input_name=''):
            return '%f' % input_data
        def gds_validate_float(self, input_data, node, input_name=''):
            return input_data
        def gds_format_float_list(self, input_data, input_name=''):
            return '%s' % input_data
        def gds_validate_float_list(self, input_data, node, input_name=''):
            values = input_data.split()
            for value in values:
                try:
                    fvalue = float(value)
                except (TypeError, ValueError), exp:
                    raise_parse_error(node, 'Requires sequence of floats')
            return input_data
        def gds_format_double(self, input_data, input_name=''):
            return '%e' % input_data
        def gds_validate_double(self, input_data, node, input_name=''):
            return input_data
        def gds_format_double_list(self, input_data, input_name=''):
            return '%s' % input_data
        def gds_validate_double_list(self, input_data, node, input_name=''):
            values = input_data.split()
            for value in values:
                try:
                    fvalue = float(value)
                except (TypeError, ValueError), exp:
                    raise_parse_error(node, 'Requires sequence of doubles')
            return input_data
        def gds_format_boolean(self, input_data, input_name=''):
            return '%s' % input_data
        def gds_validate_boolean(self, input_data, node, input_name=''):
            return input_data
        def gds_format_boolean_list(self, input_data, input_name=''):
            return '%s' % input_data
        def gds_validate_boolean_list(self, input_data, node, input_name=''):
            values = input_data.split()
            for value in values:
                if value not in ('true', '1', 'false', '0', ):
                    raise_parse_error(node, 'Requires sequence of booleans ("true", "1", "false", "0")')
            return input_data
        def gds_str_lower(self, instring):
            return instring.lower()
        def get_path_(self, node):
            path_list = []
            self.get_path_list_(node, path_list)
            path_list.reverse()
            path = '/'.join(path_list)
            return path
        Tag_strip_pattern_ = re_.compile(r'\{.*\}')
        def get_path_list_(self, node, path_list):
            if node is None:
                return
            tag = GeneratedsSuper.Tag_strip_pattern_.sub('', node.tag)
            if tag:
                path_list.append(tag)
            self.get_path_list_(node.getparent(), path_list)
        def get_class_obj_(self, node, default_class=None):
            class_obj1 = default_class
            if 'xsi' in node.nsmap:
                classname = node.get('{%s}type' % node.nsmap['xsi'])
                if classname is not None:
                    names = classname.split(':')
                    if len(names) == 2:
                        classname = names[1]
                    class_obj2 = globals().get(classname)
                    if class_obj2 is not None:
                        class_obj1 = class_obj2
            return class_obj1
        def gds_build_any(self, node, type_name=None):
            return None


#
# If you have installed IPython you can uncomment and use the following.
# IPython is available from http://ipython.scipy.org/.
#

## from IPython.Shell import IPShellEmbed
## args = ''
## ipshell = IPShellEmbed(args,
##     banner = 'Dropping into IPython',
##     exit_msg = 'Leaving Interpreter, back to program.')

# Then use the following line where and when you want to drop into the
# IPython shell:
#    ipshell('<some message> -- Entering ipshell.\nHit Ctrl-D to exit')

#
# Globals
#

ExternalEncoding = 'ascii'
Tag_pattern_ = re_.compile(r'({.*})?(.*)')
String_cleanup_pat_ = re_.compile(r"[\n\r\s]+")
Namespace_extract_pat_ = re_.compile(r'{(.*)}(.*)')

#
# Support/utility functions.
#

def showIndent(outfile, level):
    for idx in range(level):
        outfile.write('    ')

def quote_xml(inStr):
    if not inStr:
        return ''
    s1 = (isinstance(inStr, basestring) and inStr or
          '%s' % inStr)
    s1 = s1.replace('&', '&amp;')
    s1 = s1.replace('<', '&lt;')
    s1 = s1.replace('>', '&gt;')
    return s1

def quote_attrib(inStr):
    s1 = (isinstance(inStr, basestring) and inStr or
          '%s' % inStr)
    s1 = s1.replace('&', '&amp;')
    s1 = s1.replace('<', '&lt;')
    s1 = s1.replace('>', '&gt;')
    if '"' in s1:
        if "'" in s1:
            s1 = '"%s"' % s1.replace('"', "&quot;")
        else:
            s1 = "'%s'" % s1
    else:
        s1 = '"%s"' % s1
    return s1

def quote_python(inStr):
    s1 = inStr
    if s1.find("'") == -1:
        if s1.find('\n') == -1:
            return "'%s'" % s1
        else:
            return "'''%s'''" % s1
    else:
        if s1.find('"') != -1:
            s1 = s1.replace('"', '\\"')
        if s1.find('\n') == -1:
            return '"%s"' % s1
        else:
            return '"""%s"""' % s1

def get_all_text_(node):
    if node.text is not None:
        text = node.text
    else:
        text = ''
    for child in node:
        if child.tail is not None:
            text += child.tail
    return text

def find_attr_value_(attr_name, node):
    attrs = node.attrib
    attr_parts = attr_name.split(':')
    value = None
    if len(attr_parts) == 1:
        value = attrs.get(attr_name)
    elif len(attr_parts) == 2:
        prefix, name = attr_parts
        namespace = node.nsmap.get(prefix)
        if namespace is not None:
            value = attrs.get('{%s}%s' % (namespace, name, ))
    return value


class GDSParseError(Exception):
    pass

def raise_parse_error(node, msg):
    if XMLParser_import_library == XMLParser_import_lxml:
        msg = '%s (element %s/line %d)' % (msg, node.tag, node.sourceline, )
    else:
        msg = '%s (element %s)' % (msg, node.tag, )
    raise GDSParseError(msg)


class MixedContainer:
    # Constants for category:
    CategoryNone = 0
    CategoryText = 1
    CategorySimple = 2
    CategoryComplex = 3
    # Constants for content_type:
    TypeNone = 0
    TypeText = 1
    TypeString = 2
    TypeInteger = 3
    TypeFloat = 4
    TypeDecimal = 5
    TypeDouble = 6
    TypeBoolean = 7
    def __init__(self, category, content_type, name, value):
        self.category = category
        self.content_type = content_type
        self.name = name
        self.value = value
    def getCategory(self):
        return self.category
    def getContenttype(self, content_type):
        return self.content_type
    def getValue(self):
        return self.value
    def getName(self):
        return self.name
    def export(self, outfile, level, name, namespace):
        if self.category == MixedContainer.CategoryText:
            # Prevent exporting empty content as empty lines.
            if self.value.strip(): 
                outfile.write(self.value)
        elif self.category == MixedContainer.CategorySimple:
            self.exportSimple(outfile, level, name)
        else:    # category == MixedContainer.CategoryComplex
            self.value.export(outfile, level, namespace,name)
    def exportSimple(self, outfile, level, name):
        if self.content_type == MixedContainer.TypeString:
            outfile.write('<%s>%s</%s>' % (self.name, self.value, self.name))
        elif self.content_type == MixedContainer.TypeInteger or \
                self.content_type == MixedContainer.TypeBoolean:
            outfile.write('<%s>%d</%s>' % (self.name, self.value, self.name))
        elif self.content_type == MixedContainer.TypeFloat or \
                self.content_type == MixedContainer.TypeDecimal:
            outfile.write('<%s>%f</%s>' % (self.name, self.value, self.name))
        elif self.content_type == MixedContainer.TypeDouble:
            outfile.write('<%s>%g</%s>' % (self.name, self.value, self.name))
    def exportLiteral(self, outfile, level, name):
        if self.category == MixedContainer.CategoryText:
            showIndent(outfile, level)
            outfile.write('model_.MixedContainer(%d, %d, "%s", "%s"),\n' % \
                (self.category, self.content_type, self.name, self.value))
        elif self.category == MixedContainer.CategorySimple:
            showIndent(outfile, level)
            outfile.write('model_.MixedContainer(%d, %d, "%s", "%s"),\n' % \
                (self.category, self.content_type, self.name, self.value))
        else:    # category == MixedContainer.CategoryComplex
            showIndent(outfile, level)
            outfile.write('model_.MixedContainer(%d, %d, "%s",\n' % \
                (self.category, self.content_type, self.name,))
            self.value.exportLiteral(outfile, level + 1)
            showIndent(outfile, level)
            outfile.write(')\n')


class MemberSpec_(object):
    def __init__(self, name='', data_type='', container=0):
        self.name = name
        self.data_type = data_type
        self.container = container
    def set_name(self, name): self.name = name
    def get_name(self): return self.name
    def set_data_type(self, data_type): self.data_type = data_type
    def get_data_type_chain(self): return self.data_type
    def get_data_type(self):
        if isinstance(self.data_type, list):
            if len(self.data_type) > 0:
                return self.data_type[-1]
            else:
                return 'xs:string'
        else:
            return self.data_type
    def set_container(self, container): self.container = container
    def get_container(self): return self.container

def _cast(typ, value):
    if typ is None or value is None:
        return value
    return typ(value)

#
# Data representation classes.
#

class secimage(GeneratedsSuper):
    subclass = None
    superclass = None
    def __init__(self, metadata=None, general_properties=None, parsegen=None, signing=None, encryption=None, post_process=None, images_list=None):
        self.metadata = metadata
        self.general_properties = general_properties
        self.parsegen = parsegen
        self.signing = signing
        self.encryption = encryption
        self.post_process = post_process
        self.images_list = images_list
    def factory(*args_, **kwargs_):
        if secimage.subclass:
            return secimage.subclass(*args_, **kwargs_)
        else:
            return secimage(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_metadata(self): return self.metadata
    def set_metadata(self, metadata): self.metadata = metadata
    def get_general_properties(self): return self.general_properties
    def set_general_properties(self, general_properties): self.general_properties = general_properties
    def get_parsegen(self): return self.parsegen
    def set_parsegen(self, parsegen): self.parsegen = parsegen
    def get_signing(self): return self.signing
    def set_signing(self, signing): self.signing = signing
    def get_encryption(self): return self.encryption
    def set_encryption(self, encryption): self.encryption = encryption
    def get_post_process(self): return self.post_process
    def set_post_process(self, post_process): self.post_process = post_process
    def get_images_list(self): return self.images_list
    def set_images_list(self, images_list): self.images_list = images_list
    def export(self, outfile, level, namespace_='tns:', name_='secimage', namespacedef_=''):
        showIndent(outfile, level)
        outfile.write('<%s%s%s' % (namespace_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = []
        self.exportAttributes(outfile, level, already_processed, namespace_, name_='secimage')
        if self.hasContent_():
            outfile.write('>\n')
            self.exportChildren(outfile, level + 1, namespace_, name_)
            showIndent(outfile, level)
            outfile.write('</%s%s>\n' % (namespace_, name_))
        else:
            outfile.write('/>\n')
    def exportAttributes(self, outfile, level, already_processed, namespace_='tns:', name_='secimage'):
        pass
    def exportChildren(self, outfile, level, namespace_='tns:', name_='secimage', fromsubclass_=False):
        if self.metadata is not None:
            self.metadata.export(outfile, level, namespace_, name_='metadata', )
        if self.general_properties is not None:
            self.general_properties.export(outfile, level, namespace_, name_='general_properties', )
        if self.parsegen is not None:
            self.parsegen.export(outfile, level, namespace_, name_='parsegen', )
        if self.signing is not None:
            self.signing.export(outfile, level, namespace_, name_='signing', )
        if self.encryption is not None:
            self.encryption.export(outfile, level, namespace_, name_='encryption', )
        if self.post_process is not None:
            self.post_process.export(outfile, level, namespace_, name_='post_process', )
        if self.images_list is not None:
            self.images_list.export(outfile, level, namespace_, name_='images_list', )
    def hasContent_(self):
        if (
            self.metadata is not None or
            self.general_properties is not None or
            self.parsegen is not None or
            self.signing is not None or
            self.encryption is not None or
            self.post_process is not None or
            self.images_list is not None
            ):
            return True
        else:
            return False
    def exportLiteral(self, outfile, level, name_='secimage'):
        level += 1
        self.exportLiteralAttributes(outfile, level, [], name_)
        if self.hasContent_():
            self.exportLiteralChildren(outfile, level, name_)
    def exportLiteralAttributes(self, outfile, level, already_processed, name_):
        pass
    def exportLiteralChildren(self, outfile, level, name_):
        if self.metadata is not None:
            showIndent(outfile, level)
            outfile.write('metadata=model_.complex_metadata(\n')
            self.metadata.exportLiteral(outfile, level, name_='metadata')
            showIndent(outfile, level)
            outfile.write('),\n')
        if self.general_properties is not None:
            showIndent(outfile, level)
            outfile.write('general_properties=model_.complex_general_properties(\n')
            self.general_properties.exportLiteral(outfile, level, name_='general_properties')
            showIndent(outfile, level)
            outfile.write('),\n')
        if self.parsegen is not None:
            showIndent(outfile, level)
            outfile.write('parsegen=model_.complex_parsegen(\n')
            self.parsegen.exportLiteral(outfile, level, name_='parsegen')
            showIndent(outfile, level)
            outfile.write('),\n')
        if self.signing is not None:
            showIndent(outfile, level)
            outfile.write('signing=model_.complex_signing(\n')
            self.signing.exportLiteral(outfile, level, name_='signing')
            showIndent(outfile, level)
            outfile.write('),\n')
        if self.encryption is not None:
            showIndent(outfile, level)
            outfile.write('encryption=model_.complex_encryption(\n')
            self.encryption.exportLiteral(outfile, level, name_='encryption')
            showIndent(outfile, level)
            outfile.write('),\n')
        if self.post_process is not None:
            showIndent(outfile, level)
            outfile.write('post_process=model_.complex_post_process(\n')
            self.post_process.exportLiteral(outfile, level, name_='post_process')
            showIndent(outfile, level)
            outfile.write('),\n')
        if self.images_list is not None:
            showIndent(outfile, level)
            outfile.write('images_list=model_.complex_images_list(\n')
            self.images_list.exportLiteral(outfile, level, name_='images_list')
            showIndent(outfile, level)
            outfile.write('),\n')
    def build(self, node):
        self.buildAttributes(node, node.attrib, [])
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        if nodeName_ == 'metadata':
            obj_ = complex_metadata.factory()
            obj_.build(child_)
            self.set_metadata(obj_)
        elif nodeName_ == 'general_properties':
            obj_ = complex_general_properties.factory()
            obj_.build(child_)
            self.set_general_properties(obj_)
        elif nodeName_ == 'parsegen':
            obj_ = complex_parsegen.factory()
            obj_.build(child_)
            self.set_parsegen(obj_)
        elif nodeName_ == 'signing':
            obj_ = complex_signing.factory()
            obj_.build(child_)
            self.set_signing(obj_)
        elif nodeName_ == 'encryption':
            obj_ = complex_encryption.factory()
            obj_.build(child_)
            self.set_encryption(obj_)
        elif nodeName_ == 'post_process':
            obj_ = complex_post_process.factory()
            obj_.build(child_)
            self.set_post_process(obj_)
        elif nodeName_ == 'images_list':
            obj_ = complex_images_list.factory()
            obj_.build(child_)
            self.set_images_list(obj_)
# end class secimage


class complex_metadata(GeneratedsSuper):
    subclass = None
    superclass = None
    def __init__(self, chipset=None, version=None):
        self.chipset = chipset
        self.version = version
    def factory(*args_, **kwargs_):
        if complex_metadata.subclass:
            return complex_metadata.subclass(*args_, **kwargs_)
        else:
            return complex_metadata(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_chipset(self): return self.chipset
    def set_chipset(self, chipset): self.chipset = chipset
    def get_version(self): return self.version
    def set_version(self, version): self.version = version
    def export(self, outfile, level, namespace_='tns:', name_='complex_metadata', namespacedef_=''):
        showIndent(outfile, level)
        outfile.write('<%s%s%s' % (namespace_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = []
        self.exportAttributes(outfile, level, already_processed, namespace_, name_='complex_metadata')
        if self.hasContent_():
            outfile.write('>\n')
            self.exportChildren(outfile, level + 1, namespace_, name_)
            showIndent(outfile, level)
            outfile.write('</%s%s>\n' % (namespace_, name_))
        else:
            outfile.write('/>\n')
    def exportAttributes(self, outfile, level, already_processed, namespace_='tns:', name_='complex_metadata'):
        pass
    def exportChildren(self, outfile, level, namespace_='tns:', name_='complex_metadata', fromsubclass_=False):
        if self.chipset is not None:
            showIndent(outfile, level)
            outfile.write('<%schipset>%s</%schipset>\n' % (namespace_, self.gds_format_string(quote_xml(self.chipset).encode(ExternalEncoding), input_name='chipset'), namespace_))
        if self.version is not None:
            showIndent(outfile, level)
            outfile.write('<%sversion>%s</%sversion>\n' % (namespace_, self.gds_format_string(quote_xml(self.version).encode(ExternalEncoding), input_name='version'), namespace_))
    def hasContent_(self):
        if (
            self.chipset is not None or
            self.version is not None
            ):
            return True
        else:
            return False
    def exportLiteral(self, outfile, level, name_='complex_metadata'):
        level += 1
        self.exportLiteralAttributes(outfile, level, [], name_)
        if self.hasContent_():
            self.exportLiteralChildren(outfile, level, name_)
    def exportLiteralAttributes(self, outfile, level, already_processed, name_):
        pass
    def exportLiteralChildren(self, outfile, level, name_):
        if self.chipset is not None:
            showIndent(outfile, level)
            outfile.write('chipset=%s,\n' % quote_python(self.chipset).encode(ExternalEncoding))
        if self.version is not None:
            showIndent(outfile, level)
            outfile.write('version=%s,\n' % quote_python(self.version).encode(ExternalEncoding))
    def build(self, node):
        self.buildAttributes(node, node.attrib, [])
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        if nodeName_ == 'chipset':
            chipset_ = child_.text
            chipset_ = self.gds_validate_string(chipset_, node, 'chipset')
            self.chipset = chipset_
        elif nodeName_ == 'version':
            version_ = child_.text
            version_ = self.gds_validate_string(version_, node, 'version')
            self.version = version_
# end class complex_metadata


class complex_general_properties(GeneratedsSuper):
    subclass = None
    superclass = None
    def __init__(self, max_cert_size=None, key_size=None, num_certs_in_certchain=None, num_root_certs=None, testsig_serialnum=None):
        self.max_cert_size = max_cert_size
        self.key_size = key_size
        self.num_certs_in_certchain = num_certs_in_certchain
        self.num_root_certs = num_root_certs
        self.testsig_serialnum = testsig_serialnum
    def factory(*args_, **kwargs_):
        if complex_general_properties.subclass:
            return complex_general_properties.subclass(*args_, **kwargs_)
        else:
            return complex_general_properties(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_max_cert_size(self): return self.max_cert_size
    def set_max_cert_size(self, max_cert_size): self.max_cert_size = max_cert_size
    def get_key_size(self): return self.key_size
    def set_key_size(self, key_size): self.key_size = key_size
    def get_num_certs_in_certchain(self): return self.num_certs_in_certchain
    def set_num_certs_in_certchain(self, num_certs_in_certchain): self.num_certs_in_certchain = num_certs_in_certchain
    def get_num_root_certs(self): return self.num_root_certs
    def set_num_root_certs(self, num_root_certs): self.num_root_certs = num_root_certs
    def get_testsig_serialnum(self): return self.testsig_serialnum
    def set_testsig_serialnum(self, testsig_serialnum): self.testsig_serialnum = testsig_serialnum
    def export(self, outfile, level, namespace_='tns:', name_='complex_general_properties', namespacedef_=''):
        showIndent(outfile, level)
        outfile.write('<%s%s%s' % (namespace_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = []
        self.exportAttributes(outfile, level, already_processed, namespace_, name_='complex_general_properties')
        if self.hasContent_():
            outfile.write('>\n')
            self.exportChildren(outfile, level + 1, namespace_, name_)
            showIndent(outfile, level)
            outfile.write('</%s%s>\n' % (namespace_, name_))
        else:
            outfile.write('/>\n')
    def exportAttributes(self, outfile, level, already_processed, namespace_='tns:', name_='complex_general_properties'):
        pass
    def exportChildren(self, outfile, level, namespace_='tns:', name_='complex_general_properties', fromsubclass_=False):
        if self.max_cert_size is not None:
            showIndent(outfile, level)
            outfile.write('<%smax_cert_size>%s</%smax_cert_size>\n' % (namespace_, self.gds_format_integer(self.max_cert_size, input_name='max_cert_size'), namespace_))
        if self.key_size is not None:
            showIndent(outfile, level)
            outfile.write('<%skey_size>%s</%skey_size>\n' % (namespace_, self.gds_format_integer(self.key_size, input_name='key_size'), namespace_))
        if self.num_certs_in_certchain is not None:
            showIndent(outfile, level)
            outfile.write('<%snum_certs_in_certchain>%s</%snum_certs_in_certchain>\n' % (namespace_, self.gds_format_integer(self.num_certs_in_certchain, input_name='num_certs_in_certchain'), namespace_))
        if self.num_root_certs is not None:
            showIndent(outfile, level)
            outfile.write('<%snum_root_certs>%s</%snum_root_certs>\n' % (namespace_, self.gds_format_integer(self.num_root_certs, input_name='num_root_certs'), namespace_))
        if self.testsig_serialnum is not None:
            showIndent(outfile, level)
            outfile.write('<%stestsig_serialnum>%s</%stestsig_serialnum>\n' % (namespace_, self.gds_format_string(quote_xml(self.testsig_serialnum).encode(ExternalEncoding), input_name='testsig_serialnum'), namespace_))
    def hasContent_(self):
        if (
            self.max_cert_size is not None or
            self.key_size is not None or
            self.num_certs_in_certchain is not None or
            self.num_root_certs is not None or
            self.testsig_serialnum is not None
            ):
            return True
        else:
            return False
    def exportLiteral(self, outfile, level, name_='complex_general_properties'):
        level += 1
        self.exportLiteralAttributes(outfile, level, [], name_)
        if self.hasContent_():
            self.exportLiteralChildren(outfile, level, name_)
    def exportLiteralAttributes(self, outfile, level, already_processed, name_):
        pass
    def exportLiteralChildren(self, outfile, level, name_):
        if self.max_cert_size is not None:
            showIndent(outfile, level)
            outfile.write('max_cert_size=%d,\n' % self.max_cert_size)
        if self.key_size is not None:
            showIndent(outfile, level)
            outfile.write('key_size=%d,\n' % self.key_size)
        if self.num_certs_in_certchain is not None:
            showIndent(outfile, level)
            outfile.write('num_certs_in_certchain=%d,\n' % self.num_certs_in_certchain)
        if self.num_root_certs is not None:
            showIndent(outfile, level)
            outfile.write('num_root_certs=%d,\n' % self.num_root_certs)
        if self.testsig_serialnum is not None:
            showIndent(outfile, level)
            outfile.write('testsig_serialnum=%s,\n' % quote_python(self.testsig_serialnum).encode(ExternalEncoding))
    def build(self, node):
        self.buildAttributes(node, node.attrib, [])
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        if nodeName_ == 'max_cert_size':
            sval_ = child_.text
            try:
                ival_ = int(sval_)
            except (TypeError, ValueError), exp:
                raise_parse_error(child_, 'requires integer: %s' % exp)
            ival_ = self.gds_validate_integer(ival_, node, 'max_cert_size')
            self.max_cert_size = ival_
        elif nodeName_ == 'key_size':
            sval_ = child_.text
            try:
                ival_ = int(sval_)
            except (TypeError, ValueError), exp:
                raise_parse_error(child_, 'requires integer: %s' % exp)
            ival_ = self.gds_validate_integer(ival_, node, 'key_size')
            self.key_size = ival_
        elif nodeName_ == 'num_certs_in_certchain':
            sval_ = child_.text
            try:
                ival_ = int(sval_)
            except (TypeError, ValueError), exp:
                raise_parse_error(child_, 'requires integer: %s' % exp)
            ival_ = self.gds_validate_integer(ival_, node, 'num_certs_in_certchain')
            self.num_certs_in_certchain = ival_
        elif nodeName_ == 'num_root_certs':
            sval_ = child_.text
            try:
                ival_ = int(sval_)
            except (TypeError, ValueError), exp:
                raise_parse_error(child_, 'requires integer: %s' % exp)
            ival_ = self.gds_validate_integer(ival_, node, 'num_root_certs')
            self.num_root_certs = ival_
        elif nodeName_ == 'testsig_serialnum':
            testsig_serialnum_ = child_.text
            testsig_serialnum_ = self.gds_validate_string(testsig_serialnum_, node, 'testsig_serialnum')
            self.testsig_serialnum = testsig_serialnum_
# end class complex_general_properties


class complex_parsegen(GeneratedsSuper):
    subclass = None
    superclass = None
    def __init__(self, image_types_list=None):
        self.image_types_list = image_types_list
    def factory(*args_, **kwargs_):
        if complex_parsegen.subclass:
            return complex_parsegen.subclass(*args_, **kwargs_)
        else:
            return complex_parsegen(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_image_types_list(self): return self.image_types_list
    def set_image_types_list(self, image_types_list): self.image_types_list = image_types_list
    def export(self, outfile, level, namespace_='tns:', name_='complex_parsegen', namespacedef_=''):
        showIndent(outfile, level)
        outfile.write('<%s%s%s' % (namespace_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = []
        self.exportAttributes(outfile, level, already_processed, namespace_, name_='complex_parsegen')
        if self.hasContent_():
            outfile.write('>\n')
            self.exportChildren(outfile, level + 1, namespace_, name_)
            showIndent(outfile, level)
            outfile.write('</%s%s>\n' % (namespace_, name_))
        else:
            outfile.write('/>\n')
    def exportAttributes(self, outfile, level, already_processed, namespace_='tns:', name_='complex_parsegen'):
        pass
    def exportChildren(self, outfile, level, namespace_='tns:', name_='complex_parsegen', fromsubclass_=False):
        if self.image_types_list is not None:
            self.image_types_list.export(outfile, level, namespace_, name_='image_types_list', )
    def hasContent_(self):
        if (
            self.image_types_list is not None
            ):
            return True
        else:
            return False
    def exportLiteral(self, outfile, level, name_='complex_parsegen'):
        level += 1
        self.exportLiteralAttributes(outfile, level, [], name_)
        if self.hasContent_():
            self.exportLiteralChildren(outfile, level, name_)
    def exportLiteralAttributes(self, outfile, level, already_processed, name_):
        pass
    def exportLiteralChildren(self, outfile, level, name_):
        if self.image_types_list is not None:
            showIndent(outfile, level)
            outfile.write('image_types_list=model_.complex_image_types_list(\n')
            self.image_types_list.exportLiteral(outfile, level, name_='image_types_list')
            showIndent(outfile, level)
            outfile.write('),\n')
    def build(self, node):
        self.buildAttributes(node, node.attrib, [])
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        if nodeName_ == 'image_types_list':
            obj_ = complex_image_types_list.factory()
            obj_.build(child_)
            self.set_image_types_list(obj_)
# end class complex_parsegen


class complex_image_types_list(GeneratedsSuper):
    subclass = None
    superclass = None
    def __init__(self, image_type=None):
        if image_type is None:
            self.image_type = []
        else:
            self.image_type = image_type
    def factory(*args_, **kwargs_):
        if complex_image_types_list.subclass:
            return complex_image_types_list.subclass(*args_, **kwargs_)
        else:
            return complex_image_types_list(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_image_type(self): return self.image_type
    def set_image_type(self, image_type): self.image_type = image_type
    def add_image_type(self, value): self.image_type.append(value)
    def insert_image_type(self, index, value): self.image_type[index] = value
    def export(self, outfile, level, namespace_='tns:', name_='complex_image_types_list', namespacedef_=''):
        showIndent(outfile, level)
        outfile.write('<%s%s%s' % (namespace_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = []
        self.exportAttributes(outfile, level, already_processed, namespace_, name_='complex_image_types_list')
        if self.hasContent_():
            outfile.write('>\n')
            self.exportChildren(outfile, level + 1, namespace_, name_)
            showIndent(outfile, level)
            outfile.write('</%s%s>\n' % (namespace_, name_))
        else:
            outfile.write('/>\n')
    def exportAttributes(self, outfile, level, already_processed, namespace_='tns:', name_='complex_image_types_list'):
        pass
    def exportChildren(self, outfile, level, namespace_='tns:', name_='complex_image_types_list', fromsubclass_=False):
        for image_type_ in self.image_type:
            image_type_.export(outfile, level, namespace_, name_='image_type')
    def hasContent_(self):
        if (
            self.image_type
            ):
            return True
        else:
            return False
    def exportLiteral(self, outfile, level, name_='complex_image_types_list'):
        level += 1
        self.exportLiteralAttributes(outfile, level, [], name_)
        if self.hasContent_():
            self.exportLiteralChildren(outfile, level, name_)
    def exportLiteralAttributes(self, outfile, level, already_processed, name_):
        pass
    def exportLiteralChildren(self, outfile, level, name_):
        showIndent(outfile, level)
        outfile.write('image_type=[\n')
        level += 1
        for image_type_ in self.image_type:
            showIndent(outfile, level)
            outfile.write('model_.complex_image_type(\n')
            image_type_.exportLiteral(outfile, level, name_='complex_image_type')
            showIndent(outfile, level)
            outfile.write('),\n')
        level -= 1
        showIndent(outfile, level)
        outfile.write('],\n')
    def build(self, node):
        self.buildAttributes(node, node.attrib, [])
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        if nodeName_ == 'image_type':
            obj_ = complex_image_type.factory()
            obj_.build(child_)
            self.image_type.append(obj_)
# end class complex_image_types_list


class complex_image_type(GeneratedsSuper):
    subclass = None
    superclass = None
    def __init__(self, id=None, file_type=None, mbn_properties=None, elf_properties=None, ewm_properties=None):
        self.id = _cast(None, id)
        self.file_type = file_type
        self.mbn_properties = mbn_properties
        self.elf_properties = elf_properties
        self.ewm_properties = ewm_properties
    def factory(*args_, **kwargs_):
        if complex_image_type.subclass:
            return complex_image_type.subclass(*args_, **kwargs_)
        else:
            return complex_image_type(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_file_type(self): return self.file_type
    def set_file_type(self, file_type): self.file_type = file_type
    def get_mbn_properties(self): return self.mbn_properties
    def set_mbn_properties(self, mbn_properties): self.mbn_properties = mbn_properties
    def get_elf_properties(self): return self.elf_properties
    def set_elf_properties(self, elf_properties): self.elf_properties = elf_properties
    def get_ewm_properties(self): return self.ewm_properties
    def set_ewm_properties(self, ewm_properties): self.ewm_properties = ewm_properties
    def get_id(self): return self.id
    def set_id(self, id): self.id = id
    def export(self, outfile, level, namespace_='tns:', name_='complex_image_type', namespacedef_=''):
        showIndent(outfile, level)
        outfile.write('<%s%s%s' % (namespace_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = []
        self.exportAttributes(outfile, level, already_processed, namespace_, name_='complex_image_type')
        if self.hasContent_():
            outfile.write('>\n')
            self.exportChildren(outfile, level + 1, namespace_, name_)
            showIndent(outfile, level)
            outfile.write('</%s%s>\n' % (namespace_, name_))
        else:
            outfile.write('/>\n')
    def exportAttributes(self, outfile, level, already_processed, namespace_='tns:', name_='complex_image_type'):
        if self.id is not None and 'id' not in already_processed:
            already_processed.append('id')
            outfile.write(' id=%s' % (self.gds_format_string(quote_attrib(self.id).encode(ExternalEncoding), input_name='id'), ))
    def exportChildren(self, outfile, level, namespace_='tns:', name_='complex_image_type', fromsubclass_=False):
        if self.file_type is not None:
            showIndent(outfile, level)
            outfile.write('<%sfile_type>%s</%sfile_type>\n' % (namespace_, self.gds_format_string(quote_xml(self.file_type).encode(ExternalEncoding), input_name='file_type'), namespace_))
        if self.mbn_properties is not None:
            self.mbn_properties.export(outfile, level, namespace_, name_='mbn_properties')
        if self.elf_properties is not None:
            self.elf_properties.export(outfile, level, namespace_, name_='elf_properties')
        if self.ewm_properties is not None:
            self.ewm_properties.export(outfile, level, namespace_, name_='ewm_properties')
    def hasContent_(self):
        if (
            self.file_type is not None or
            self.mbn_properties is not None or
            self.elf_properties is not None or
            self.ewm_properties is not None
            ):
            return True
        else:
            return False
    def exportLiteral(self, outfile, level, name_='complex_image_type'):
        level += 1
        self.exportLiteralAttributes(outfile, level, [], name_)
        if self.hasContent_():
            self.exportLiteralChildren(outfile, level, name_)
    def exportLiteralAttributes(self, outfile, level, already_processed, name_):
        if self.id is not None and 'id' not in already_processed:
            already_processed.append('id')
            showIndent(outfile, level)
            outfile.write('id = "%s",\n' % (self.id,))
    def exportLiteralChildren(self, outfile, level, name_):
        if self.file_type is not None:
            showIndent(outfile, level)
            outfile.write('file_type=%s,\n' % quote_python(self.file_type).encode(ExternalEncoding))
        if self.mbn_properties is not None:
            showIndent(outfile, level)
            outfile.write('mbn_properties=model_.complex_mbn_properties(\n')
            self.mbn_properties.exportLiteral(outfile, level, name_='mbn_properties')
            showIndent(outfile, level)
            outfile.write('),\n')
        if self.elf_properties is not None:
            showIndent(outfile, level)
            outfile.write('elf_properties=model_.complex_elf_properties(\n')
            self.elf_properties.exportLiteral(outfile, level, name_='elf_properties')
            showIndent(outfile, level)
            outfile.write('),\n')
        if self.ewm_properties is not None:
            showIndent(outfile, level)
            outfile.write('ewm_properties=model_.complex_ewm_properties(\n')
            self.ewm_properties.exportLiteral(outfile, level, name_='ewm_properties')
            showIndent(outfile, level)
            outfile.write('),\n')
    def build(self, node):
        self.buildAttributes(node, node.attrib, [])
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
    def buildAttributes(self, node, attrs, already_processed):
        value = find_attr_value_('id', node)
        if value is not None and 'id' not in already_processed:
            already_processed.append('id')
            self.id = value
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        if nodeName_ == 'file_type':
            file_type_ = child_.text
            file_type_ = self.gds_validate_string(file_type_, node, 'file_type')
            self.file_type = file_type_
        elif nodeName_ == 'mbn_properties':
            obj_ = complex_mbn_properties.factory()
            obj_.build(child_)
            self.set_mbn_properties(obj_)
        elif nodeName_ == 'elf_properties':
            obj_ = complex_elf_properties.factory()
            obj_.build(child_)
            self.set_elf_properties(obj_)
        elif nodeName_ == 'ewm_properties':
            obj_ = complex_ewm_properties.factory()
            obj_.build(child_)
            self.set_ewm_properties(obj_)
# end class complex_image_type


class complex_mbn_properties(GeneratedsSuper):
    subclass = None
    superclass = None
    def __init__(self, header_size=None, preamble_size=None, has_magic_num=None, ota_enabled=None, page_size=None, num_of_pages=None, min_size_with_pad=None):
        self.header_size = header_size
        self.preamble_size = preamble_size
        self.has_magic_num = has_magic_num
        self.ota_enabled = ota_enabled
        self.page_size = page_size
        self.num_of_pages = num_of_pages
        self.min_size_with_pad = min_size_with_pad
    def factory(*args_, **kwargs_):
        if complex_mbn_properties.subclass:
            return complex_mbn_properties.subclass(*args_, **kwargs_)
        else:
            return complex_mbn_properties(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_header_size(self): return self.header_size
    def set_header_size(self, header_size): self.header_size = header_size
    def get_preamble_size(self): return self.preamble_size
    def set_preamble_size(self, preamble_size): self.preamble_size = preamble_size
    def get_has_magic_num(self): return self.has_magic_num
    def set_has_magic_num(self, has_magic_num): self.has_magic_num = has_magic_num
    def get_ota_enabled(self): return self.ota_enabled
    def set_ota_enabled(self, ota_enabled): self.ota_enabled = ota_enabled
    def get_page_size(self): return self.page_size
    def set_page_size(self, page_size): self.page_size = page_size
    def get_num_of_pages(self): return self.num_of_pages
    def set_num_of_pages(self, num_of_pages): self.num_of_pages = num_of_pages
    def get_min_size_with_pad(self): return self.min_size_with_pad
    def set_min_size_with_pad(self, min_size_with_pad): self.min_size_with_pad = min_size_with_pad
    def export(self, outfile, level, namespace_='tns:', name_='complex_mbn_properties', namespacedef_=''):
        showIndent(outfile, level)
        outfile.write('<%s%s%s' % (namespace_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = []
        self.exportAttributes(outfile, level, already_processed, namespace_, name_='complex_mbn_properties')
        if self.hasContent_():
            outfile.write('>\n')
            self.exportChildren(outfile, level + 1, namespace_, name_)
            showIndent(outfile, level)
            outfile.write('</%s%s>\n' % (namespace_, name_))
        else:
            outfile.write('/>\n')
    def exportAttributes(self, outfile, level, already_processed, namespace_='tns:', name_='complex_mbn_properties'):
        pass
    def exportChildren(self, outfile, level, namespace_='tns:', name_='complex_mbn_properties', fromsubclass_=False):
        if self.header_size is not None:
            showIndent(outfile, level)
            outfile.write('<%sheader_size>%s</%sheader_size>\n' % (namespace_, self.gds_format_integer(self.header_size, input_name='header_size'), namespace_))
        if self.preamble_size is not None:
            showIndent(outfile, level)
            outfile.write('<%spreamble_size>%s</%spreamble_size>\n' % (namespace_, self.gds_format_integer(self.preamble_size, input_name='preamble_size'), namespace_))
        if self.has_magic_num is not None:
            showIndent(outfile, level)
            outfile.write('<%shas_magic_num>%s</%shas_magic_num>\n' % (namespace_, self.gds_format_boolean(self.gds_str_lower(str(self.has_magic_num)), input_name='has_magic_num'), namespace_))
        if self.ota_enabled is not None:
            showIndent(outfile, level)
            outfile.write('<%sota_enabled>%s</%sota_enabled>\n' % (namespace_, self.gds_format_boolean(self.gds_str_lower(str(self.ota_enabled)), input_name='ota_enabled'), namespace_))
        if self.page_size is not None:
            showIndent(outfile, level)
            outfile.write('<%spage_size>%s</%spage_size>\n' % (namespace_, self.gds_format_integer(self.page_size, input_name='page_size'), namespace_))
        if self.num_of_pages is not None:
            showIndent(outfile, level)
            outfile.write('<%snum_of_pages>%s</%snum_of_pages>\n' % (namespace_, self.gds_format_integer(self.num_of_pages, input_name='num_of_pages'), namespace_))
        if self.min_size_with_pad is not None:
            showIndent(outfile, level)
            outfile.write('<%smin_size_with_pad>%s</%smin_size_with_pad>\n' % (namespace_, self.gds_format_integer(self.min_size_with_pad, input_name='min_size_with_pad'), namespace_))
    def hasContent_(self):
        if (
            self.header_size is not None or
            self.preamble_size is not None or
            self.has_magic_num is not None or
            self.ota_enabled is not None or
            self.page_size is not None or
            self.num_of_pages is not None or
            self.min_size_with_pad is not None
            ):
            return True
        else:
            return False
    def exportLiteral(self, outfile, level, name_='complex_mbn_properties'):
        level += 1
        self.exportLiteralAttributes(outfile, level, [], name_)
        if self.hasContent_():
            self.exportLiteralChildren(outfile, level, name_)
    def exportLiteralAttributes(self, outfile, level, already_processed, name_):
        pass
    def exportLiteralChildren(self, outfile, level, name_):
        if self.header_size is not None:
            showIndent(outfile, level)
            outfile.write('header_size=%d,\n' % self.header_size)
        if self.preamble_size is not None:
            showIndent(outfile, level)
            outfile.write('preamble_size=%d,\n' % self.preamble_size)
        if self.has_magic_num is not None:
            showIndent(outfile, level)
            outfile.write('has_magic_num=%s,\n' % self.has_magic_num)
        if self.ota_enabled is not None:
            showIndent(outfile, level)
            outfile.write('ota_enabled=%s,\n' % self.ota_enabled)
        if self.page_size is not None:
            showIndent(outfile, level)
            outfile.write('page_size=%d,\n' % self.page_size)
        if self.num_of_pages is not None:
            showIndent(outfile, level)
            outfile.write('num_of_pages=%d,\n' % self.num_of_pages)
        if self.min_size_with_pad is not None:
            showIndent(outfile, level)
            outfile.write('min_size_with_pad=%d,\n' % self.min_size_with_pad)
    def build(self, node):
        self.buildAttributes(node, node.attrib, [])
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        if nodeName_ == 'header_size':
            sval_ = child_.text
            try:
                ival_ = int(sval_)
            except (TypeError, ValueError), exp:
                raise_parse_error(child_, 'requires integer: %s' % exp)
            ival_ = self.gds_validate_integer(ival_, node, 'header_size')
            self.header_size = ival_
        elif nodeName_ == 'preamble_size':
            sval_ = child_.text
            try:
                ival_ = int(sval_)
            except (TypeError, ValueError), exp:
                raise_parse_error(child_, 'requires integer: %s' % exp)
            ival_ = self.gds_validate_integer(ival_, node, 'preamble_size')
            self.preamble_size = ival_
        elif nodeName_ == 'has_magic_num':
            sval_ = child_.text
            if sval_ in ('true', '1'):
                ival_ = True
            elif sval_ in ('false', '0'):
                ival_ = False
            else:
                raise_parse_error(child_, 'requires boolean')
            ival_ = self.gds_validate_boolean(ival_, node, 'has_magic_num')
            self.has_magic_num = ival_
        elif nodeName_ == 'ota_enabled':
            sval_ = child_.text
            if sval_ in ('true', '1'):
                ival_ = True
            elif sval_ in ('false', '0'):
                ival_ = False
            else:
                raise_parse_error(child_, 'requires boolean')
            ival_ = self.gds_validate_boolean(ival_, node, 'ota_enabled')
            self.ota_enabled = ival_
        elif nodeName_ == 'page_size':
            sval_ = child_.text
            try:
                ival_ = int(sval_)
            except (TypeError, ValueError), exp:
                raise_parse_error(child_, 'requires integer: %s' % exp)
            ival_ = self.gds_validate_integer(ival_, node, 'page_size')
            self.page_size = ival_
        elif nodeName_ == 'num_of_pages':
            sval_ = child_.text
            try:
                ival_ = int(sval_)
            except (TypeError, ValueError), exp:
                raise_parse_error(child_, 'requires integer: %s' % exp)
            ival_ = self.gds_validate_integer(ival_, node, 'num_of_pages')
            self.num_of_pages = ival_
        elif nodeName_ == 'min_size_with_pad':
            sval_ = child_.text
            try:
                ival_ = int(sval_)
            except (TypeError, ValueError), exp:
                raise_parse_error(child_, 'requires integer: %s' % exp)
            ival_ = self.gds_validate_integer(ival_, node, 'min_size_with_pad')
            self.min_size_with_pad = ival_
# end class complex_mbn_properties


class complex_elf_properties(GeneratedsSuper):
    subclass = None
    superclass = None
    def __init__(self, image_type=None):
        self.image_type = image_type
    def factory(*args_, **kwargs_):
        if complex_elf_properties.subclass:
            return complex_elf_properties.subclass(*args_, **kwargs_)
        else:
            return complex_elf_properties(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_image_type(self): return self.image_type
    def set_image_type(self, image_type): self.image_type = image_type
    def export(self, outfile, level, namespace_='tns:', name_='complex_elf_properties', namespacedef_=''):
        showIndent(outfile, level)
        outfile.write('<%s%s%s' % (namespace_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = []
        self.exportAttributes(outfile, level, already_processed, namespace_, name_='complex_elf_properties')
        if self.hasContent_():
            outfile.write('>\n')
            self.exportChildren(outfile, level + 1, namespace_, name_)
            showIndent(outfile, level)
            outfile.write('</%s%s>\n' % (namespace_, name_))
        else:
            outfile.write('/>\n')
    def exportAttributes(self, outfile, level, already_processed, namespace_='tns:', name_='complex_elf_properties'):
        pass
    def exportChildren(self, outfile, level, namespace_='tns:', name_='complex_elf_properties', fromsubclass_=False):
        if self.image_type is not None:
            showIndent(outfile, level)
            outfile.write('<%simage_type>%s</%simage_type>\n' % (namespace_, self.gds_format_integer(self.image_type, input_name='image_type'), namespace_))
    def hasContent_(self):
        if (
            self.image_type is not None
            ):
            return True
        else:
            return False
    def exportLiteral(self, outfile, level, name_='complex_elf_properties'):
        level += 1
        self.exportLiteralAttributes(outfile, level, [], name_)
        if self.hasContent_():
            self.exportLiteralChildren(outfile, level, name_)
    def exportLiteralAttributes(self, outfile, level, already_processed, name_):
        pass
    def exportLiteralChildren(self, outfile, level, name_):
        if self.image_type is not None:
            showIndent(outfile, level)
            outfile.write('image_type=%d,\n' % self.image_type)
    def build(self, node):
        self.buildAttributes(node, node.attrib, [])
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        if nodeName_ == 'image_type':
            sval_ = child_.text
            try:
                ival_ = int(sval_)
            except (TypeError, ValueError), exp:
                raise_parse_error(child_, 'requires integer: %s' % exp)
            ival_ = self.gds_validate_integer(ival_, node, 'image_type')
            self.image_type = ival_
# end class complex_elf_properties


class complex_ewm_properties(GeneratedsSuper):
    subclass = None
    superclass = None
    def __init__(self, image_entry=None, relocatable=None):
        self.image_entry = image_entry
        self.relocatable = relocatable
    def factory(*args_, **kwargs_):
        if complex_ewm_properties.subclass:
            return complex_ewm_properties.subclass(*args_, **kwargs_)
        else:
            return complex_ewm_properties(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_image_entry(self): return self.image_entry
    def set_image_entry(self, image_entry): self.image_entry = image_entry
    def get_relocatable(self): return self.relocatable
    def set_relocatable(self, relocatable): self.relocatable = relocatable
    def export(self, outfile, level, namespace_='tns:', name_='complex_ewm_properties', namespacedef_=''):
        showIndent(outfile, level)
        outfile.write('<%s%s%s' % (namespace_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = []
        self.exportAttributes(outfile, level, already_processed, namespace_, name_='complex_ewm_properties')
        if self.hasContent_():
            outfile.write('>\n')
            self.exportChildren(outfile, level + 1, namespace_, name_)
            showIndent(outfile, level)
            outfile.write('</%s%s>\n' % (namespace_, name_))
        else:
            outfile.write('/>\n')
    def exportAttributes(self, outfile, level, already_processed, namespace_='tns:', name_='complex_ewm_properties'):
        pass
    def exportChildren(self, outfile, level, namespace_='tns:', name_='complex_ewm_properties', fromsubclass_=False):
        if self.image_entry is not None:
            showIndent(outfile, level)
            outfile.write('<%simage_entry>%s</%simage_entry>\n' % (namespace_, self.gds_format_string(quote_xml(self.image_entry).encode(ExternalEncoding), input_name='image_entry'), namespace_))
        if self.relocatable is not None:
            showIndent(outfile, level)
            outfile.write('<%srelocatable>%s</%srelocatable>\n' % (namespace_, self.gds_format_boolean(self.gds_str_lower(str(self.relocatable)), input_name='relocatable'), namespace_))
    def hasContent_(self):
        if (
            self.image_entry is not None or
            self.relocatable is not None
            ):
            return True
        else:
            return False
    def exportLiteral(self, outfile, level, name_='complex_ewm_properties'):
        level += 1
        self.exportLiteralAttributes(outfile, level, [], name_)
        if self.hasContent_():
            self.exportLiteralChildren(outfile, level, name_)
    def exportLiteralAttributes(self, outfile, level, already_processed, name_):
        pass
    def exportLiteralChildren(self, outfile, level, name_):
        if self.image_entry is not None:
            showIndent(outfile, level)
            outfile.write('image_entry=%s,\n' % quote_python(self.image_entry).encode(ExternalEncoding))
        if self.relocatable is not None:
            showIndent(outfile, level)
            outfile.write('relocatable=%s,\n' % self.relocatable)
    def build(self, node):
        self.buildAttributes(node, node.attrib, [])
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        if nodeName_ == 'image_entry':
            image_entry_ = child_.text
            image_entry_ = self.gds_validate_string(image_entry_, node, 'image_entry')
            self.image_entry = image_entry_
        elif nodeName_ == 'relocatable':
            sval_ = child_.text
            if sval_ in ('true', '1'):
                ival_ = True
            elif sval_ in ('false', '0'):
                ival_ = False
            else:
                raise_parse_error(child_, 'requires boolean')
            ival_ = self.gds_validate_boolean(ival_, node, 'relocatable')
            self.relocatable = ival_
# end class complex_ewm_properties


class complex_signing(GeneratedsSuper):
    subclass = None
    superclass = None
    def __init__(self, default_attributes=None, signer_attributes=None, selected_signer=None):
        self.default_attributes = default_attributes
        self.signer_attributes = signer_attributes
        self.selected_signer = selected_signer
    def factory(*args_, **kwargs_):
        if complex_signing.subclass:
            return complex_signing.subclass(*args_, **kwargs_)
        else:
            return complex_signing(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_default_attributes(self): return self.default_attributes
    def set_default_attributes(self, default_attributes): self.default_attributes = default_attributes
    def get_signer_attributes(self): return self.signer_attributes
    def set_signer_attributes(self, signer_attributes): self.signer_attributes = signer_attributes
    def get_selected_signer(self): return self.selected_signer
    def set_selected_signer(self, selected_signer): self.selected_signer = selected_signer
    def export(self, outfile, level, namespace_='tns:', name_='complex_signing', namespacedef_=''):
        showIndent(outfile, level)
        outfile.write('<%s%s%s' % (namespace_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = []
        self.exportAttributes(outfile, level, already_processed, namespace_, name_='complex_signing')
        if self.hasContent_():
            outfile.write('>\n')
            self.exportChildren(outfile, level + 1, namespace_, name_)
            showIndent(outfile, level)
            outfile.write('</%s%s>\n' % (namespace_, name_))
        else:
            outfile.write('/>\n')
    def exportAttributes(self, outfile, level, already_processed, namespace_='tns:', name_='complex_signing'):
        pass
    def exportChildren(self, outfile, level, namespace_='tns:', name_='complex_signing', fromsubclass_=False):
        if self.default_attributes is not None:
            self.default_attributes.export(outfile, level, namespace_, name_='default_attributes', )
        if self.signer_attributes is not None:
            self.signer_attributes.export(outfile, level, namespace_, name_='signer_attributes', )
        if self.selected_signer is not None:
            showIndent(outfile, level)
            outfile.write('<%sselected_signer>%s</%sselected_signer>\n' % (namespace_, self.gds_format_string(quote_xml(self.selected_signer).encode(ExternalEncoding), input_name='selected_signer'), namespace_))
    def hasContent_(self):
        if (
            self.default_attributes is not None or
            self.signer_attributes is not None or
            self.selected_signer is not None
            ):
            return True
        else:
            return False
    def exportLiteral(self, outfile, level, name_='complex_signing'):
        level += 1
        self.exportLiteralAttributes(outfile, level, [], name_)
        if self.hasContent_():
            self.exportLiteralChildren(outfile, level, name_)
    def exportLiteralAttributes(self, outfile, level, already_processed, name_):
        pass
    def exportLiteralChildren(self, outfile, level, name_):
        if self.default_attributes is not None:
            showIndent(outfile, level)
            outfile.write('default_attributes=model_.complex_default_attributes(\n')
            self.default_attributes.exportLiteral(outfile, level, name_='default_attributes')
            showIndent(outfile, level)
            outfile.write('),\n')
        if self.signer_attributes is not None:
            showIndent(outfile, level)
            outfile.write('signer_attributes=model_.complex_signer_attributes(\n')
            self.signer_attributes.exportLiteral(outfile, level, name_='signer_attributes')
            showIndent(outfile, level)
            outfile.write('),\n')
        if self.selected_signer is not None:
            showIndent(outfile, level)
            outfile.write('selected_signer=%s,\n' % quote_python(self.selected_signer).encode(ExternalEncoding))
    def build(self, node):
        self.buildAttributes(node, node.attrib, [])
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        if nodeName_ == 'default_attributes':
            obj_ = complex_default_attributes.factory()
            obj_.build(child_)
            self.set_default_attributes(obj_)
        elif nodeName_ == 'signer_attributes':
            obj_ = complex_signer_attributes.factory()
            obj_.build(child_)
            self.set_signer_attributes(obj_)
        elif nodeName_ == 'selected_signer':
            selected_signer_ = child_.text
            selected_signer_ = self.gds_validate_string(selected_signer_, node, 'selected_signer')
            self.selected_signer = selected_signer_
# end class complex_signing


class selected_signer(GeneratedsSuper):
    subclass = None
    superclass = None
    def __init__(self, valueOf_=None):
        self.valueOf_ = valueOf_
    def factory(*args_, **kwargs_):
        if selected_signer.subclass:
            return selected_signer.subclass(*args_, **kwargs_)
        else:
            return selected_signer(*args_, **kwargs_)
    factory = staticmethod(factory)
    def export(self, outfile, level, namespace_='tns:', name_='selected_signer', namespacedef_=''):
        showIndent(outfile, level)
        outfile.write('<%s%s%s' % (namespace_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = []
        self.exportAttributes(outfile, level, already_processed, namespace_, name_='selected_signer')
        if self.hasContent_():
            outfile.write('>\n')
            self.exportChildren(outfile, level + 1, namespace_, name_)
            outfile.write('</%s%s>\n' % (namespace_, name_))
        else:
            outfile.write('/>\n')
    def exportAttributes(self, outfile, level, already_processed, namespace_='tns:', name_='selected_signer'):
        pass
    def exportChildren(self, outfile, level, namespace_='tns:', name_='selected_signer', fromsubclass_=False):
        pass
    def hasContent_(self):
        if (

            ):
            return True
        else:
            return False
    def exportLiteral(self, outfile, level, name_='selected_signer'):
        level += 1
        self.exportLiteralAttributes(outfile, level, [], name_)
        if self.hasContent_():
            self.exportLiteralChildren(outfile, level, name_)
    def exportLiteralAttributes(self, outfile, level, already_processed, name_):
        pass
    def exportLiteralChildren(self, outfile, level, name_):
        pass
    def build(self, node):
        self.buildAttributes(node, node.attrib, [])
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        pass
# end class selected_signer


class complex_default_attributes(GeneratedsSuper):
    subclass = None
    superclass = None
    def __init__(self, msm_part=None, oem_id=None, model_id=None, sw_id=None, app_id=None, crash_dump=None, rot_en=None, debug=None, exponent=None, tcg_min=None, tcg_max=None):
        self.msm_part = msm_part
        self.oem_id = oem_id
        self.model_id = model_id
        self.sw_id = sw_id
        self.app_id = app_id
        self.crash_dump = crash_dump
        self.rot_en = rot_en
        self.debug = debug
        self.exponent = exponent
        self.tcg_min = tcg_min
        self.tcg_max = tcg_max
    def factory(*args_, **kwargs_):
        if complex_default_attributes.subclass:
            return complex_default_attributes.subclass(*args_, **kwargs_)
        else:
            return complex_default_attributes(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_msm_part(self): return self.msm_part
    def set_msm_part(self, msm_part): self.msm_part = msm_part
    def get_oem_id(self): return self.oem_id
    def set_oem_id(self, oem_id): self.oem_id = oem_id
    def get_model_id(self): return self.model_id
    def set_model_id(self, model_id): self.model_id = model_id
    def get_sw_id(self): return self.sw_id
    def set_sw_id(self, sw_id): self.sw_id = sw_id
    def get_app_id(self): return self.app_id
    def set_app_id(self, app_id): self.app_id = app_id
    def get_crash_dump(self): return self.crash_dump
    def set_crash_dump(self, crash_dump): self.crash_dump = crash_dump
    def get_rot_en(self): return self.rot_en
    def set_rot_en(self, rot_en): self.rot_en = rot_en
    def get_debug(self): return self.debug
    def set_debug(self, debug): self.debug = debug
    def get_exponent(self): return self.exponent
    def set_exponent(self, exponent): self.exponent = exponent
    def get_tcg_min(self): return self.tcg_min
    def set_tcg_min(self, tcg_min): self.tcg_min = tcg_min
    def get_tcg_max(self): return self.tcg_max
    def set_tcg_max(self, tcg_max): self.tcg_max = tcg_max
    def export(self, outfile, level, namespace_='tns:', name_='complex_default_attributes', namespacedef_=''):
        showIndent(outfile, level)
        outfile.write('<%s%s%s' % (namespace_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = []
        self.exportAttributes(outfile, level, already_processed, namespace_, name_='complex_default_attributes')
        if self.hasContent_():
            outfile.write('>\n')
            self.exportChildren(outfile, level + 1, namespace_, name_)
            showIndent(outfile, level)
            outfile.write('</%s%s>\n' % (namespace_, name_))
        else:
            outfile.write('/>\n')
    def exportAttributes(self, outfile, level, already_processed, namespace_='tns:', name_='complex_default_attributes'):
        pass
    def exportChildren(self, outfile, level, namespace_='tns:', name_='complex_default_attributes', fromsubclass_=False):
        if self.msm_part is not None:
            showIndent(outfile, level)
            outfile.write('<%smsm_part>%s</%smsm_part>\n' % (namespace_, self.gds_format_string(quote_xml(self.msm_part).encode(ExternalEncoding), input_name='msm_part'), namespace_))
        if self.oem_id is not None:
            showIndent(outfile, level)
            outfile.write('<%soem_id>%s</%soem_id>\n' % (namespace_, self.gds_format_string(quote_xml(self.oem_id).encode(ExternalEncoding), input_name='oem_id'), namespace_))
        if self.model_id is not None:
            showIndent(outfile, level)
            outfile.write('<%smodel_id>%s</%smodel_id>\n' % (namespace_, self.gds_format_string(quote_xml(self.model_id).encode(ExternalEncoding), input_name='model_id'), namespace_))
        if self.sw_id is not None:
            showIndent(outfile, level)
            outfile.write('<%ssw_id>%s</%ssw_id>\n' % (namespace_, self.gds_format_string(quote_xml(self.sw_id).encode(ExternalEncoding), input_name='sw_id'), namespace_))
        if self.app_id is not None:
            showIndent(outfile, level)
            outfile.write('<%sapp_id>%s</%sapp_id>\n' % (namespace_, self.gds_format_string(quote_xml(self.app_id).encode(ExternalEncoding), input_name='app_id'), namespace_))
        if self.crash_dump is not None:
            showIndent(outfile, level)
            outfile.write('<%scrash_dump>%s</%scrash_dump>\n' % (namespace_, self.gds_format_string(quote_xml(self.crash_dump).encode(ExternalEncoding), input_name='crash_dump'), namespace_))
        if self.rot_en is not None:
            showIndent(outfile, level)
            outfile.write('<%srot_en>%s</%srot_en>\n' % (namespace_, self.gds_format_string(quote_xml(self.rot_en).encode(ExternalEncoding), input_name='rot_en'), namespace_))
        if self.debug is not None:
            showIndent(outfile, level)
            outfile.write('<%sdebug>%s</%sdebug>\n' % (namespace_, self.gds_format_string(quote_xml(self.debug).encode(ExternalEncoding), input_name='debug'), namespace_))
        if self.exponent is not None:
            showIndent(outfile, level)
            outfile.write('<%sexponent>%s</%sexponent>\n' % (namespace_, self.gds_format_integer(self.exponent, input_name='exponent'), namespace_))
        if self.tcg_min is not None:
            showIndent(outfile, level)
            outfile.write('<%stcg_min>%s</%stcg_min>\n' % (namespace_, self.gds_format_string(quote_xml(self.tcg_min).encode(ExternalEncoding), input_name='tcg_min'), namespace_))
        if self.tcg_max is not None:
            showIndent(outfile, level)
            outfile.write('<%stcg_max>%s</%stcg_max>\n' % (namespace_, self.gds_format_string(quote_xml(self.tcg_max).encode(ExternalEncoding), input_name='tcg_max'), namespace_))
    def hasContent_(self):
        if (
            self.msm_part is not None or
            self.oem_id is not None or
            self.model_id is not None or
            self.sw_id is not None or
            self.app_id is not None or
            self.crash_dump is not None or
            self.rot_en is not None or
            self.debug is not None or
            self.exponent is not None or
            self.tcg_min is not None or
            self.tcg_max is not None
            ):
            return True
        else:
            return False
    def exportLiteral(self, outfile, level, name_='complex_default_attributes'):
        level += 1
        self.exportLiteralAttributes(outfile, level, [], name_)
        if self.hasContent_():
            self.exportLiteralChildren(outfile, level, name_)
    def exportLiteralAttributes(self, outfile, level, already_processed, name_):
        pass
    def exportLiteralChildren(self, outfile, level, name_):
        if self.msm_part is not None:
            showIndent(outfile, level)
            outfile.write('msm_part=%s,\n' % quote_python(self.msm_part).encode(ExternalEncoding))
        if self.oem_id is not None:
            showIndent(outfile, level)
            outfile.write('oem_id=%s,\n' % quote_python(self.oem_id).encode(ExternalEncoding))
        if self.model_id is not None:
            showIndent(outfile, level)
            outfile.write('model_id=%s,\n' % quote_python(self.model_id).encode(ExternalEncoding))
        if self.sw_id is not None:
            showIndent(outfile, level)
            outfile.write('sw_id=%s,\n' % quote_python(self.sw_id).encode(ExternalEncoding))
        if self.app_id is not None:
            showIndent(outfile, level)
            outfile.write('app_id=%s,\n' % quote_python(self.app_id).encode(ExternalEncoding))
        if self.crash_dump is not None:
            showIndent(outfile, level)
            outfile.write('crash_dump=%s,\n' % quote_python(self.crash_dump).encode(ExternalEncoding))
        if self.rot_en is not None:
            showIndent(outfile, level)
            outfile.write('rot_en=%s,\n' % quote_python(self.rot_en).encode(ExternalEncoding))
        if self.debug is not None:
            showIndent(outfile, level)
            outfile.write('debug=%s,\n' % quote_python(self.debug).encode(ExternalEncoding))
        if self.exponent is not None:
            showIndent(outfile, level)
            outfile.write('exponent=%d,\n' % self.exponent)
        if self.tcg_min is not None:
            showIndent(outfile, level)
            outfile.write('tcg_min=%s,\n' % quote_python(self.tcg_min).encode(ExternalEncoding))
        if self.tcg_max is not None:
            showIndent(outfile, level)
            outfile.write('tcg_max=%s,\n' % quote_python(self.tcg_max).encode(ExternalEncoding))
    def build(self, node):
        self.buildAttributes(node, node.attrib, [])
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        if nodeName_ == 'msm_part':
            msm_part_ = child_.text
            msm_part_ = self.gds_validate_string(msm_part_, node, 'msm_part')
            self.msm_part = msm_part_
        elif nodeName_ == 'oem_id':
            oem_id_ = child_.text
            oem_id_ = self.gds_validate_string(oem_id_, node, 'oem_id')
            self.oem_id = oem_id_
        elif nodeName_ == 'model_id':
            model_id_ = child_.text
            model_id_ = self.gds_validate_string(model_id_, node, 'model_id')
            self.model_id = model_id_
        elif nodeName_ == 'sw_id':
            sw_id_ = child_.text
            sw_id_ = self.gds_validate_string(sw_id_, node, 'sw_id')
            self.sw_id = sw_id_
        elif nodeName_ == 'app_id':
            app_id_ = child_.text
            app_id_ = self.gds_validate_string(app_id_, node, 'app_id')
            self.app_id = app_id_
        elif nodeName_ == 'crash_dump':
            crash_dump_ = child_.text
            crash_dump_ = self.gds_validate_string(crash_dump_, node, 'crash_dump')
            self.crash_dump = crash_dump_
        elif nodeName_ == 'rot_en':
            rot_en_ = child_.text
            rot_en_ = self.gds_validate_string(rot_en_, node, 'rot_en')
            self.rot_en = rot_en_
        elif nodeName_ == 'debug':
            debug_ = child_.text
            debug_ = self.gds_validate_string(debug_, node, 'debug')
            self.debug = debug_
        elif nodeName_ == 'exponent':
            sval_ = child_.text
            try:
                ival_ = int(sval_)
            except (TypeError, ValueError), exp:
                raise_parse_error(child_, 'requires integer: %s' % exp)
            ival_ = self.gds_validate_integer(ival_, node, 'exponent')
            self.exponent = ival_
        elif nodeName_ == 'tcg_min':
            tcg_min_ = child_.text
            tcg_min_ = self.gds_validate_string(tcg_min_, node, 'tcg_min')
            self.tcg_min = tcg_min_
        elif nodeName_ == 'tcg_max':
            tcg_max_ = child_.text
            tcg_max_ = self.gds_validate_string(tcg_max_, node, 'tcg_max')
            self.tcg_max = tcg_max_
# end class complex_default_attributes


class complex_signer_attributes(GeneratedsSuper):
    subclass = None
    superclass = None
    def __init__(self, local_signer_attributes=None, cass_signer_attributes=None):
        self.local_signer_attributes = local_signer_attributes
        self.cass_signer_attributes = cass_signer_attributes
    def factory(*args_, **kwargs_):
        if complex_signer_attributes.subclass:
            return complex_signer_attributes.subclass(*args_, **kwargs_)
        else:
            return complex_signer_attributes(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_local_signer_attributes(self): return self.local_signer_attributes
    def set_local_signer_attributes(self, local_signer_attributes): self.local_signer_attributes = local_signer_attributes
    def get_cass_signer_attributes(self): return self.cass_signer_attributes
    def set_cass_signer_attributes(self, cass_signer_attributes): self.cass_signer_attributes = cass_signer_attributes
    def export(self, outfile, level, namespace_='tns:', name_='complex_signer_attributes', namespacedef_=''):
        showIndent(outfile, level)
        outfile.write('<%s%s%s' % (namespace_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = []
        self.exportAttributes(outfile, level, already_processed, namespace_, name_='complex_signer_attributes')
        if self.hasContent_():
            outfile.write('>\n')
            self.exportChildren(outfile, level + 1, namespace_, name_)
            showIndent(outfile, level)
            outfile.write('</%s%s>\n' % (namespace_, name_))
        else:
            outfile.write('/>\n')
    def exportAttributes(self, outfile, level, already_processed, namespace_='tns:', name_='complex_signer_attributes'):
        pass
    def exportChildren(self, outfile, level, namespace_='tns:', name_='complex_signer_attributes', fromsubclass_=False):
        if self.local_signer_attributes is not None:
            self.local_signer_attributes.export(outfile, level, namespace_, name_='local_signer_attributes', )
        if self.cass_signer_attributes is not None:
            self.cass_signer_attributes.export(outfile, level, namespace_, name_='cass_signer_attributes')
    def hasContent_(self):
        if (
            self.local_signer_attributes is not None or
            self.cass_signer_attributes is not None
            ):
            return True
        else:
            return False
    def exportLiteral(self, outfile, level, name_='complex_signer_attributes'):
        level += 1
        self.exportLiteralAttributes(outfile, level, [], name_)
        if self.hasContent_():
            self.exportLiteralChildren(outfile, level, name_)
    def exportLiteralAttributes(self, outfile, level, already_processed, name_):
        pass
    def exportLiteralChildren(self, outfile, level, name_):
        if self.local_signer_attributes is not None:
            showIndent(outfile, level)
            outfile.write('local_signer_attributes=model_.complex_local_signer_attributes(\n')
            self.local_signer_attributes.exportLiteral(outfile, level, name_='local_signer_attributes')
            showIndent(outfile, level)
            outfile.write('),\n')
        if self.cass_signer_attributes is not None:
            showIndent(outfile, level)
            outfile.write('cass_signer_attributes=model_.complex_cass_signer_attributes(\n')
            self.cass_signer_attributes.exportLiteral(outfile, level, name_='cass_signer_attributes')
            showIndent(outfile, level)
            outfile.write('),\n')
    def build(self, node):
        self.buildAttributes(node, node.attrib, [])
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        if nodeName_ == 'local_signer_attributes':
            obj_ = complex_local_signer_attributes.factory()
            obj_.build(child_)
            self.set_local_signer_attributes(obj_)
        elif nodeName_ == 'cass_signer_attributes':
            obj_ = complex_cass_signer_attributes.factory()
            obj_.build(child_)
            self.set_cass_signer_attributes(obj_)
# end class complex_signer_attributes


class complex_local_signer_attributes(GeneratedsSuper):
    subclass = None
    superclass = None
    def __init__(self, openssl_config_inputs=None, cert_configs_list=None):
        self.openssl_config_inputs = openssl_config_inputs
        self.cert_configs_list = cert_configs_list
    def factory(*args_, **kwargs_):
        if complex_local_signer_attributes.subclass:
            return complex_local_signer_attributes.subclass(*args_, **kwargs_)
        else:
            return complex_local_signer_attributes(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_openssl_config_inputs(self): return self.openssl_config_inputs
    def set_openssl_config_inputs(self, openssl_config_inputs): self.openssl_config_inputs = openssl_config_inputs
    def get_cert_configs_list(self): return self.cert_configs_list
    def set_cert_configs_list(self, cert_configs_list): self.cert_configs_list = cert_configs_list
    def export(self, outfile, level, namespace_='tns:', name_='complex_local_signer_attributes', namespacedef_=''):
        showIndent(outfile, level)
        outfile.write('<%s%s%s' % (namespace_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = []
        self.exportAttributes(outfile, level, already_processed, namespace_, name_='complex_local_signer_attributes')
        if self.hasContent_():
            outfile.write('>\n')
            self.exportChildren(outfile, level + 1, namespace_, name_)
            showIndent(outfile, level)
            outfile.write('</%s%s>\n' % (namespace_, name_))
        else:
            outfile.write('/>\n')
    def exportAttributes(self, outfile, level, already_processed, namespace_='tns:', name_='complex_local_signer_attributes'):
        pass
    def exportChildren(self, outfile, level, namespace_='tns:', name_='complex_local_signer_attributes', fromsubclass_=False):
        if self.openssl_config_inputs is not None:
            self.openssl_config_inputs.export(outfile, level, namespace_, name_='openssl_config_inputs', )
        if self.cert_configs_list is not None:
            self.cert_configs_list.export(outfile, level, namespace_, name_='cert_configs_list', )
    def hasContent_(self):
        if (
            self.openssl_config_inputs is not None or
            self.cert_configs_list is not None
            ):
            return True
        else:
            return False
    def exportLiteral(self, outfile, level, name_='complex_local_signer_attributes'):
        level += 1
        self.exportLiteralAttributes(outfile, level, [], name_)
        if self.hasContent_():
            self.exportLiteralChildren(outfile, level, name_)
    def exportLiteralAttributes(self, outfile, level, already_processed, name_):
        pass
    def exportLiteralChildren(self, outfile, level, name_):
        if self.openssl_config_inputs is not None:
            showIndent(outfile, level)
            outfile.write('openssl_config_inputs=model_.complex_openssl_config_inputs(\n')
            self.openssl_config_inputs.exportLiteral(outfile, level, name_='openssl_config_inputs')
            showIndent(outfile, level)
            outfile.write('),\n')
        if self.cert_configs_list is not None:
            showIndent(outfile, level)
            outfile.write('cert_configs_list=model_.complex_cert_configs_list(\n')
            self.cert_configs_list.exportLiteral(outfile, level, name_='cert_configs_list')
            showIndent(outfile, level)
            outfile.write('),\n')
    def build(self, node):
        self.buildAttributes(node, node.attrib, [])
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        if nodeName_ == 'openssl_config_inputs':
            obj_ = complex_openssl_config_inputs.factory()
            obj_.build(child_)
            self.set_openssl_config_inputs(obj_)
        elif nodeName_ == 'cert_configs_list':
            obj_ = complex_cert_configs_list.factory()
            obj_.build(child_)
            self.set_cert_configs_list(obj_)
# end class complex_local_signer_attributes


class complex_openssl_config_inputs(GeneratedsSuper):
    subclass = None
    superclass = None
    def __init__(self, openssl_configfile_path=None, ca_certificate_extensions_path=None, attestation_certificate_extensions_path=None):
        self.openssl_configfile_path = openssl_configfile_path
        self.ca_certificate_extensions_path = ca_certificate_extensions_path
        self.attestation_certificate_extensions_path = attestation_certificate_extensions_path
    def factory(*args_, **kwargs_):
        if complex_openssl_config_inputs.subclass:
            return complex_openssl_config_inputs.subclass(*args_, **kwargs_)
        else:
            return complex_openssl_config_inputs(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_openssl_configfile_path(self): return self.openssl_configfile_path
    def set_openssl_configfile_path(self, openssl_configfile_path): self.openssl_configfile_path = openssl_configfile_path
    def get_ca_certificate_extensions_path(self): return self.ca_certificate_extensions_path
    def set_ca_certificate_extensions_path(self, ca_certificate_extensions_path): self.ca_certificate_extensions_path = ca_certificate_extensions_path
    def get_attestation_certificate_extensions_path(self): return self.attestation_certificate_extensions_path
    def set_attestation_certificate_extensions_path(self, attestation_certificate_extensions_path): self.attestation_certificate_extensions_path = attestation_certificate_extensions_path
    def export(self, outfile, level, namespace_='tns:', name_='complex_openssl_config_inputs', namespacedef_=''):
        showIndent(outfile, level)
        outfile.write('<%s%s%s' % (namespace_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = []
        self.exportAttributes(outfile, level, already_processed, namespace_, name_='complex_openssl_config_inputs')
        if self.hasContent_():
            outfile.write('>\n')
            self.exportChildren(outfile, level + 1, namespace_, name_)
            showIndent(outfile, level)
            outfile.write('</%s%s>\n' % (namespace_, name_))
        else:
            outfile.write('/>\n')
    def exportAttributes(self, outfile, level, already_processed, namespace_='tns:', name_='complex_openssl_config_inputs'):
        pass
    def exportChildren(self, outfile, level, namespace_='tns:', name_='complex_openssl_config_inputs', fromsubclass_=False):
        if self.openssl_configfile_path is not None:
            showIndent(outfile, level)
            outfile.write('<%sopenssl_configfile_path>%s</%sopenssl_configfile_path>\n' % (namespace_, self.gds_format_string(quote_xml(self.openssl_configfile_path).encode(ExternalEncoding), input_name='openssl_configfile_path'), namespace_))
        if self.ca_certificate_extensions_path is not None:
            showIndent(outfile, level)
            outfile.write('<%sca_certificate_extensions_path>%s</%sca_certificate_extensions_path>\n' % (namespace_, self.gds_format_string(quote_xml(self.ca_certificate_extensions_path).encode(ExternalEncoding), input_name='ca_certificate_extensions_path'), namespace_))
        if self.attestation_certificate_extensions_path is not None:
            showIndent(outfile, level)
            outfile.write('<%sattestation_certificate_extensions_path>%s</%sattestation_certificate_extensions_path>\n' % (namespace_, self.gds_format_string(quote_xml(self.attestation_certificate_extensions_path).encode(ExternalEncoding), input_name='attestation_certificate_extensions_path'), namespace_))
    def hasContent_(self):
        if (
            self.openssl_configfile_path is not None or
            self.ca_certificate_extensions_path is not None or
            self.attestation_certificate_extensions_path is not None
            ):
            return True
        else:
            return False
    def exportLiteral(self, outfile, level, name_='complex_openssl_config_inputs'):
        level += 1
        self.exportLiteralAttributes(outfile, level, [], name_)
        if self.hasContent_():
            self.exportLiteralChildren(outfile, level, name_)
    def exportLiteralAttributes(self, outfile, level, already_processed, name_):
        pass
    def exportLiteralChildren(self, outfile, level, name_):
        if self.openssl_configfile_path is not None:
            showIndent(outfile, level)
            outfile.write('openssl_configfile_path=%s,\n' % quote_python(self.openssl_configfile_path).encode(ExternalEncoding))
        if self.ca_certificate_extensions_path is not None:
            showIndent(outfile, level)
            outfile.write('ca_certificate_extensions_path=%s,\n' % quote_python(self.ca_certificate_extensions_path).encode(ExternalEncoding))
        if self.attestation_certificate_extensions_path is not None:
            showIndent(outfile, level)
            outfile.write('attestation_certificate_extensions_path=%s,\n' % quote_python(self.attestation_certificate_extensions_path).encode(ExternalEncoding))
    def build(self, node):
        self.buildAttributes(node, node.attrib, [])
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        if nodeName_ == 'openssl_configfile_path':
            openssl_configfile_path_ = child_.text
            openssl_configfile_path_ = self.gds_validate_string(openssl_configfile_path_, node, 'openssl_configfile_path')
            self.openssl_configfile_path = openssl_configfile_path_
        elif nodeName_ == 'ca_certificate_extensions_path':
            ca_certificate_extensions_path_ = child_.text
            ca_certificate_extensions_path_ = self.gds_validate_string(ca_certificate_extensions_path_, node, 'ca_certificate_extensions_path')
            self.ca_certificate_extensions_path = ca_certificate_extensions_path_
        elif nodeName_ == 'attestation_certificate_extensions_path':
            attestation_certificate_extensions_path_ = child_.text
            attestation_certificate_extensions_path_ = self.gds_validate_string(attestation_certificate_extensions_path_, node, 'attestation_certificate_extensions_path')
            self.attestation_certificate_extensions_path = attestation_certificate_extensions_path_
# end class complex_openssl_config_inputs


class complex_cert_configs_list(GeneratedsSuper):
    subclass = None
    superclass = None
    def __init__(self, selected_cert_config=None, cert_config=None):
        self.selected_cert_config = selected_cert_config
        if cert_config is None:
            self.cert_config = []
        else:
            self.cert_config = cert_config
    def factory(*args_, **kwargs_):
        if complex_cert_configs_list.subclass:
            return complex_cert_configs_list.subclass(*args_, **kwargs_)
        else:
            return complex_cert_configs_list(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_selected_cert_config(self): return self.selected_cert_config
    def set_selected_cert_config(self, selected_cert_config): self.selected_cert_config = selected_cert_config
    def get_cert_config(self): return self.cert_config
    def set_cert_config(self, cert_config): self.cert_config = cert_config
    def add_cert_config(self, value): self.cert_config.append(value)
    def insert_cert_config(self, index, value): self.cert_config[index] = value
    def export(self, outfile, level, namespace_='tns:', name_='complex_cert_configs_list', namespacedef_=''):
        showIndent(outfile, level)
        outfile.write('<%s%s%s' % (namespace_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = []
        self.exportAttributes(outfile, level, already_processed, namespace_, name_='complex_cert_configs_list')
        if self.hasContent_():
            outfile.write('>\n')
            self.exportChildren(outfile, level + 1, namespace_, name_)
            showIndent(outfile, level)
            outfile.write('</%s%s>\n' % (namespace_, name_))
        else:
            outfile.write('/>\n')
    def exportAttributes(self, outfile, level, already_processed, namespace_='tns:', name_='complex_cert_configs_list'):
        pass
    def exportChildren(self, outfile, level, namespace_='tns:', name_='complex_cert_configs_list', fromsubclass_=False):
        if self.selected_cert_config is not None:
            showIndent(outfile, level)
            outfile.write('<%sselected_cert_config>%s</%sselected_cert_config>\n' % (namespace_, self.gds_format_string(quote_xml(self.selected_cert_config).encode(ExternalEncoding), input_name='selected_cert_config'), namespace_))
        for cert_config_ in self.cert_config:
            cert_config_.export(outfile, level, namespace_, name_='cert_config')
    def hasContent_(self):
        if (
            self.selected_cert_config is not None or
            self.cert_config
            ):
            return True
        else:
            return False
    def exportLiteral(self, outfile, level, name_='complex_cert_configs_list'):
        level += 1
        self.exportLiteralAttributes(outfile, level, [], name_)
        if self.hasContent_():
            self.exportLiteralChildren(outfile, level, name_)
    def exportLiteralAttributes(self, outfile, level, already_processed, name_):
        pass
    def exportLiteralChildren(self, outfile, level, name_):
        if self.selected_cert_config is not None:
            showIndent(outfile, level)
            outfile.write('selected_cert_config=%s,\n' % quote_python(self.selected_cert_config).encode(ExternalEncoding))
        showIndent(outfile, level)
        outfile.write('cert_config=[\n')
        level += 1
        for cert_config_ in self.cert_config:
            showIndent(outfile, level)
            outfile.write('model_.complex_cert_config(\n')
            cert_config_.exportLiteral(outfile, level, name_='complex_cert_config')
            showIndent(outfile, level)
            outfile.write('),\n')
        level -= 1
        showIndent(outfile, level)
        outfile.write('],\n')
    def build(self, node):
        self.buildAttributes(node, node.attrib, [])
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        if nodeName_ == 'selected_cert_config':
            selected_cert_config_ = child_.text
            selected_cert_config_ = self.gds_validate_string(selected_cert_config_, node, 'selected_cert_config')
            self.selected_cert_config = selected_cert_config_
        elif nodeName_ == 'cert_config':
            obj_ = complex_cert_config.factory()
            obj_.build(child_)
            self.cert_config.append(obj_)
# end class complex_cert_configs_list


class complex_cert_config(GeneratedsSuper):
    subclass = None
    superclass = None
    def __init__(self, id=None, multirootcert=None, root_cert=None, attest_ca_cert=None, attest_cert=None):
        self.id = _cast(None, id)
        self.multirootcert = multirootcert
        self.root_cert = root_cert
        self.attest_ca_cert = attest_ca_cert
        self.attest_cert = attest_cert
    def factory(*args_, **kwargs_):
        if complex_cert_config.subclass:
            return complex_cert_config.subclass(*args_, **kwargs_)
        else:
            return complex_cert_config(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_multirootcert(self): return self.multirootcert
    def set_multirootcert(self, multirootcert): self.multirootcert = multirootcert
    def get_root_cert(self): return self.root_cert
    def set_root_cert(self, root_cert): self.root_cert = root_cert
    def get_attest_ca_cert(self): return self.attest_ca_cert
    def set_attest_ca_cert(self, attest_ca_cert): self.attest_ca_cert = attest_ca_cert
    def get_attest_cert(self): return self.attest_cert
    def set_attest_cert(self, attest_cert): self.attest_cert = attest_cert
    def get_id(self): return self.id
    def set_id(self, id): self.id = id
    def export(self, outfile, level, namespace_='tns:', name_='complex_cert_config', namespacedef_=''):
        showIndent(outfile, level)
        outfile.write('<%s%s%s' % (namespace_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = []
        self.exportAttributes(outfile, level, already_processed, namespace_, name_='complex_cert_config')
        if self.hasContent_():
            outfile.write('>\n')
            self.exportChildren(outfile, level + 1, namespace_, name_)
            showIndent(outfile, level)
            outfile.write('</%s%s>\n' % (namespace_, name_))
        else:
            outfile.write('/>\n')
    def exportAttributes(self, outfile, level, already_processed, namespace_='tns:', name_='complex_cert_config'):
        if self.id is not None and 'id' not in already_processed:
            already_processed.append('id')
            outfile.write(' id=%s' % (self.gds_format_string(quote_attrib(self.id).encode(ExternalEncoding), input_name='id'), ))
    def exportChildren(self, outfile, level, namespace_='tns:', name_='complex_cert_config', fromsubclass_=False):
        if self.multirootcert is not None:
            self.multirootcert.export(outfile, level, namespace_, name_='multirootcert', )
        if self.root_cert is not None:
            self.root_cert.export(outfile, level, namespace_, name_='root_cert', )
        if self.attest_ca_cert is not None:
            self.attest_ca_cert.export(outfile, level, namespace_, name_='attest_ca_cert')
        if self.attest_cert is not None:
            self.attest_cert.export(outfile, level, namespace_, name_='attest_cert', )
    def hasContent_(self):
        if (
            self.multirootcert is not None or
            self.root_cert is not None or
            self.attest_ca_cert is not None or
            self.attest_cert is not None
            ):
            return True
        else:
            return False
    def exportLiteral(self, outfile, level, name_='complex_cert_config'):
        level += 1
        self.exportLiteralAttributes(outfile, level, [], name_)
        if self.hasContent_():
            self.exportLiteralChildren(outfile, level, name_)
    def exportLiteralAttributes(self, outfile, level, already_processed, name_):
        if self.id is not None and 'id' not in already_processed:
            already_processed.append('id')
            showIndent(outfile, level)
            outfile.write('id = "%s",\n' % (self.id,))
    def exportLiteralChildren(self, outfile, level, name_):
        if self.multirootcert is not None:
            showIndent(outfile, level)
            outfile.write('multirootcert=model_.complex_multirootcert(\n')
            self.multirootcert.exportLiteral(outfile, level, name_='multirootcert')
            showIndent(outfile, level)
            outfile.write('),\n')
        if self.root_cert is not None:
            showIndent(outfile, level)
            outfile.write('root_cert=model_.complex_root_cert(\n')
            self.root_cert.exportLiteral(outfile, level, name_='root_cert')
            showIndent(outfile, level)
            outfile.write('),\n')
        if self.attest_ca_cert is not None:
            showIndent(outfile, level)
            outfile.write('attest_ca_cert=model_.complex_attest_ca_cert(\n')
            self.attest_ca_cert.exportLiteral(outfile, level, name_='attest_ca_cert')
            showIndent(outfile, level)
            outfile.write('),\n')
        if self.attest_cert is not None:
            showIndent(outfile, level)
            outfile.write('attest_cert=model_.complex_attest_cert(\n')
            self.attest_cert.exportLiteral(outfile, level, name_='attest_cert')
            showIndent(outfile, level)
            outfile.write('),\n')
    def build(self, node):
        self.buildAttributes(node, node.attrib, [])
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
    def buildAttributes(self, node, attrs, already_processed):
        value = find_attr_value_('id', node)
        if value is not None and 'id' not in already_processed:
            already_processed.append('id')
            self.id = value
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        if nodeName_ == 'multirootcert':
            obj_ = complex_multirootcert.factory()
            obj_.build(child_)
            self.set_multirootcert(obj_)
        elif nodeName_ == 'root_cert':
            obj_ = complex_root_cert.factory()
            obj_.build(child_)
            self.set_root_cert(obj_)
        elif nodeName_ == 'attest_ca_cert':
            obj_ = complex_attest_ca_cert.factory()
            obj_.build(child_)
            self.set_attest_ca_cert(obj_)
        elif nodeName_ == 'attest_cert':
            obj_ = complex_attest_cert.factory()
            obj_.build(child_)
            self.set_attest_cert(obj_)
# end class complex_cert_config


class complex_multirootcert(GeneratedsSuper):
    subclass = None
    superclass = None
    def __init__(self, directory=None, index=None, root_cert_name=None, root_key_name=None, attest_ca_cert_name=None, attest_ca_key_name=None):
        self.directory = directory
        self.index = index
        self.root_cert_name = root_cert_name
        self.root_key_name = root_key_name
        self.attest_ca_cert_name = attest_ca_cert_name
        self.attest_ca_key_name = attest_ca_key_name
    def factory(*args_, **kwargs_):
        if complex_multirootcert.subclass:
            return complex_multirootcert.subclass(*args_, **kwargs_)
        else:
            return complex_multirootcert(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_directory(self): return self.directory
    def set_directory(self, directory): self.directory = directory
    def get_index(self): return self.index
    def set_index(self, index): self.index = index
    def get_root_cert_name(self): return self.root_cert_name
    def set_root_cert_name(self, root_cert_name): self.root_cert_name = root_cert_name
    def get_root_key_name(self): return self.root_key_name
    def set_root_key_name(self, root_key_name): self.root_key_name = root_key_name
    def get_attest_ca_cert_name(self): return self.attest_ca_cert_name
    def set_attest_ca_cert_name(self, attest_ca_cert_name): self.attest_ca_cert_name = attest_ca_cert_name
    def get_attest_ca_key_name(self): return self.attest_ca_key_name
    def set_attest_ca_key_name(self, attest_ca_key_name): self.attest_ca_key_name = attest_ca_key_name
    def export(self, outfile, level, namespace_='tns:', name_='complex_multirootcert', namespacedef_=''):
        showIndent(outfile, level)
        outfile.write('<%s%s%s' % (namespace_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = []
        self.exportAttributes(outfile, level, already_processed, namespace_, name_='complex_multirootcert')
        if self.hasContent_():
            outfile.write('>\n')
            self.exportChildren(outfile, level + 1, namespace_, name_)
            showIndent(outfile, level)
            outfile.write('</%s%s>\n' % (namespace_, name_))
        else:
            outfile.write('/>\n')
    def exportAttributes(self, outfile, level, already_processed, namespace_='tns:', name_='complex_multirootcert'):
        pass
    def exportChildren(self, outfile, level, namespace_='tns:', name_='complex_multirootcert', fromsubclass_=False):
        if self.directory is not None:
            showIndent(outfile, level)
            outfile.write('<%sdirectory>%s</%sdirectory>\n' % (namespace_, self.gds_format_string(quote_xml(self.directory).encode(ExternalEncoding), input_name='directory'), namespace_))
        if self.index is not None:
            showIndent(outfile, level)
            outfile.write('<%sindex>%s</%sindex>\n' % (namespace_, self.gds_format_integer(self.index, input_name='index'), namespace_))
        if self.root_cert_name is not None:
            showIndent(outfile, level)
            outfile.write('<%sroot_cert_name>%s</%sroot_cert_name>\n' % (namespace_, self.gds_format_string(quote_xml(self.root_cert_name).encode(ExternalEncoding), input_name='root_cert_name'), namespace_))
        if self.root_key_name is not None:
            showIndent(outfile, level)
            outfile.write('<%sroot_key_name>%s</%sroot_key_name>\n' % (namespace_, self.gds_format_string(quote_xml(self.root_key_name).encode(ExternalEncoding), input_name='root_key_name'), namespace_))
        if self.attest_ca_cert_name is not None:
            showIndent(outfile, level)
            outfile.write('<%sattest_ca_cert_name>%s</%sattest_ca_cert_name>\n' % (namespace_, self.gds_format_string(quote_xml(self.attest_ca_cert_name).encode(ExternalEncoding), input_name='attest_ca_cert_name'), namespace_))
        if self.attest_ca_key_name is not None:
            showIndent(outfile, level)
            outfile.write('<%sattest_ca_key_name>%s</%sattest_ca_key_name>\n' % (namespace_, self.gds_format_string(quote_xml(self.attest_ca_key_name).encode(ExternalEncoding), input_name='attest_ca_key_name'), namespace_))
    def hasContent_(self):
        if (
            self.directory is not None or
            self.index is not None or
            self.root_cert_name is not None or
            self.root_key_name is not None or
            self.attest_ca_cert_name is not None or
            self.attest_ca_key_name is not None
            ):
            return True
        else:
            return False
    def exportLiteral(self, outfile, level, name_='complex_multirootcert'):
        level += 1
        self.exportLiteralAttributes(outfile, level, [], name_)
        if self.hasContent_():
            self.exportLiteralChildren(outfile, level, name_)
    def exportLiteralAttributes(self, outfile, level, already_processed, name_):
        pass
    def exportLiteralChildren(self, outfile, level, name_):
        if self.directory is not None:
            showIndent(outfile, level)
            outfile.write('directory=%s,\n' % quote_python(self.directory).encode(ExternalEncoding))
        if self.index is not None:
            showIndent(outfile, level)
            outfile.write('index=%d,\n' % self.index)
        if self.root_cert_name is not None:
            showIndent(outfile, level)
            outfile.write('root_cert_name=%s,\n' % quote_python(self.root_cert_name).encode(ExternalEncoding))
        if self.root_key_name is not None:
            showIndent(outfile, level)
            outfile.write('root_key_name=%s,\n' % quote_python(self.root_key_name).encode(ExternalEncoding))
        if self.attest_ca_cert_name is not None:
            showIndent(outfile, level)
            outfile.write('attest_ca_cert_name=%s,\n' % quote_python(self.attest_ca_cert_name).encode(ExternalEncoding))
        if self.attest_ca_key_name is not None:
            showIndent(outfile, level)
            outfile.write('attest_ca_key_name=%s,\n' % quote_python(self.attest_ca_key_name).encode(ExternalEncoding))
    def build(self, node):
        self.buildAttributes(node, node.attrib, [])
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        if nodeName_ == 'directory':
            directory_ = child_.text
            directory_ = self.gds_validate_string(directory_, node, 'directory')
            self.directory = directory_
        elif nodeName_ == 'index':
            sval_ = child_.text
            try:
                ival_ = int(sval_)
            except (TypeError, ValueError), exp:
                raise_parse_error(child_, 'requires integer: %s' % exp)
            ival_ = self.gds_validate_integer(ival_, node, 'index')
            self.index = ival_
        elif nodeName_ == 'root_cert_name':
            root_cert_name_ = child_.text
            root_cert_name_ = self.gds_validate_string(root_cert_name_, node, 'root_cert_name')
            self.root_cert_name = root_cert_name_
        elif nodeName_ == 'root_key_name':
            root_key_name_ = child_.text
            root_key_name_ = self.gds_validate_string(root_key_name_, node, 'root_key_name')
            self.root_key_name = root_key_name_
        elif nodeName_ == 'attest_ca_cert_name':
            attest_ca_cert_name_ = child_.text
            attest_ca_cert_name_ = self.gds_validate_string(attest_ca_cert_name_, node, 'attest_ca_cert_name')
            self.attest_ca_cert_name = attest_ca_cert_name_
        elif nodeName_ == 'attest_ca_key_name':
            attest_ca_key_name_ = child_.text
            attest_ca_key_name_ = self.gds_validate_string(attest_ca_key_name_, node, 'attest_ca_key_name')
            self.attest_ca_key_name = attest_ca_key_name_
# end class complex_multirootcert


class complex_root_cert(GeneratedsSuper):
    subclass = None
    superclass = None
    def __init__(self, use_preexisting_cert=None, params_list=None, preexisting_cert=None):
        self.use_preexisting_cert = use_preexisting_cert
        self.params_list = params_list
        self.preexisting_cert = preexisting_cert
    def factory(*args_, **kwargs_):
        if complex_root_cert.subclass:
            return complex_root_cert.subclass(*args_, **kwargs_)
        else:
            return complex_root_cert(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_use_preexisting_cert(self): return self.use_preexisting_cert
    def set_use_preexisting_cert(self, use_preexisting_cert): self.use_preexisting_cert = use_preexisting_cert
    def get_params_list(self): return self.params_list
    def set_params_list(self, params_list): self.params_list = params_list
    def get_preexisting_cert(self): return self.preexisting_cert
    def set_preexisting_cert(self, preexisting_cert): self.preexisting_cert = preexisting_cert
    def export(self, outfile, level, namespace_='tns:', name_='complex_root_cert', namespacedef_=''):
        showIndent(outfile, level)
        outfile.write('<%s%s%s' % (namespace_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = []
        self.exportAttributes(outfile, level, already_processed, namespace_, name_='complex_root_cert')
        if self.hasContent_():
            outfile.write('>\n')
            self.exportChildren(outfile, level + 1, namespace_, name_)
            showIndent(outfile, level)
            outfile.write('</%s%s>\n' % (namespace_, name_))
        else:
            outfile.write('/>\n')
    def exportAttributes(self, outfile, level, already_processed, namespace_='tns:', name_='complex_root_cert'):
        pass
    def exportChildren(self, outfile, level, namespace_='tns:', name_='complex_root_cert', fromsubclass_=False):
        if self.use_preexisting_cert is not None:
            showIndent(outfile, level)
            outfile.write('<%suse_preexisting_cert>%s</%suse_preexisting_cert>\n' % (namespace_, self.gds_format_boolean(self.gds_str_lower(str(self.use_preexisting_cert)), input_name='use_preexisting_cert'), namespace_))
        if self.params_list is not None:
            self.params_list.export(outfile, level, namespace_, name_='params_list')
        if self.preexisting_cert is not None:
            self.preexisting_cert.export(outfile, level, namespace_, name_='preexisting_cert')
    def hasContent_(self):
        if (
            self.use_preexisting_cert is not None or
            self.params_list is not None or
            self.preexisting_cert is not None
            ):
            return True
        else:
            return False
    def exportLiteral(self, outfile, level, name_='complex_root_cert'):
        level += 1
        self.exportLiteralAttributes(outfile, level, [], name_)
        if self.hasContent_():
            self.exportLiteralChildren(outfile, level, name_)
    def exportLiteralAttributes(self, outfile, level, already_processed, name_):
        pass
    def exportLiteralChildren(self, outfile, level, name_):
        if self.use_preexisting_cert is not None:
            showIndent(outfile, level)
            outfile.write('use_preexisting_cert=%s,\n' % self.use_preexisting_cert)
        if self.params_list is not None:
            showIndent(outfile, level)
            outfile.write('params_list=model_.complex_params_list(\n')
            self.params_list.exportLiteral(outfile, level, name_='params_list')
            showIndent(outfile, level)
            outfile.write('),\n')
        if self.preexisting_cert is not None:
            showIndent(outfile, level)
            outfile.write('preexisting_cert=model_.complex_preexisting_cert(\n')
            self.preexisting_cert.exportLiteral(outfile, level, name_='preexisting_cert')
            showIndent(outfile, level)
            outfile.write('),\n')
    def build(self, node):
        self.buildAttributes(node, node.attrib, [])
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        if nodeName_ == 'use_preexisting_cert':
            sval_ = child_.text
            if sval_ in ('true', '1'):
                ival_ = True
            elif sval_ in ('false', '0'):
                ival_ = False
            else:
                raise_parse_error(child_, 'requires boolean')
            ival_ = self.gds_validate_boolean(ival_, node, 'use_preexisting_cert')
            self.use_preexisting_cert = ival_
        elif nodeName_ == 'params_list':
            obj_ = complex_params_list.factory()
            obj_.build(child_)
            self.set_params_list(obj_)
        elif nodeName_ == 'preexisting_cert':
            obj_ = complex_preexisting_cert.factory()
            obj_.build(child_)
            self.set_preexisting_cert(obj_)
# end class complex_root_cert


class complex_attest_ca_cert(GeneratedsSuper):
    subclass = None
    superclass = None
    def __init__(self, use_preexisting_cert=None, params_list=None, preexisting_cert=None):
        self.use_preexisting_cert = use_preexisting_cert
        self.params_list = params_list
        self.preexisting_cert = preexisting_cert
    def factory(*args_, **kwargs_):
        if complex_attest_ca_cert.subclass:
            return complex_attest_ca_cert.subclass(*args_, **kwargs_)
        else:
            return complex_attest_ca_cert(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_use_preexisting_cert(self): return self.use_preexisting_cert
    def set_use_preexisting_cert(self, use_preexisting_cert): self.use_preexisting_cert = use_preexisting_cert
    def get_params_list(self): return self.params_list
    def set_params_list(self, params_list): self.params_list = params_list
    def get_preexisting_cert(self): return self.preexisting_cert
    def set_preexisting_cert(self, preexisting_cert): self.preexisting_cert = preexisting_cert
    def export(self, outfile, level, namespace_='tns:', name_='complex_attest_ca_cert', namespacedef_=''):
        showIndent(outfile, level)
        outfile.write('<%s%s%s' % (namespace_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = []
        self.exportAttributes(outfile, level, already_processed, namespace_, name_='complex_attest_ca_cert')
        if self.hasContent_():
            outfile.write('>\n')
            self.exportChildren(outfile, level + 1, namespace_, name_)
            showIndent(outfile, level)
            outfile.write('</%s%s>\n' % (namespace_, name_))
        else:
            outfile.write('/>\n')
    def exportAttributes(self, outfile, level, already_processed, namespace_='tns:', name_='complex_attest_ca_cert'):
        pass
    def exportChildren(self, outfile, level, namespace_='tns:', name_='complex_attest_ca_cert', fromsubclass_=False):
        if self.use_preexisting_cert is not None:
            showIndent(outfile, level)
            outfile.write('<%suse_preexisting_cert>%s</%suse_preexisting_cert>\n' % (namespace_, self.gds_format_boolean(self.gds_str_lower(str(self.use_preexisting_cert)), input_name='use_preexisting_cert'), namespace_))
        if self.params_list is not None:
            self.params_list.export(outfile, level, namespace_, name_='params_list')
        if self.preexisting_cert is not None:
            self.preexisting_cert.export(outfile, level, namespace_, name_='preexisting_cert')
    def hasContent_(self):
        if (
            self.use_preexisting_cert is not None or
            self.params_list is not None or
            self.preexisting_cert is not None
            ):
            return True
        else:
            return False
    def exportLiteral(self, outfile, level, name_='complex_attest_ca_cert'):
        level += 1
        self.exportLiteralAttributes(outfile, level, [], name_)
        if self.hasContent_():
            self.exportLiteralChildren(outfile, level, name_)
    def exportLiteralAttributes(self, outfile, level, already_processed, name_):
        pass
    def exportLiteralChildren(self, outfile, level, name_):
        if self.use_preexisting_cert is not None:
            showIndent(outfile, level)
            outfile.write('use_preexisting_cert=%s,\n' % self.use_preexisting_cert)
        if self.params_list is not None:
            showIndent(outfile, level)
            outfile.write('params_list=model_.complex_params_list(\n')
            self.params_list.exportLiteral(outfile, level, name_='params_list')
            showIndent(outfile, level)
            outfile.write('),\n')
        if self.preexisting_cert is not None:
            showIndent(outfile, level)
            outfile.write('preexisting_cert=model_.complex_preexisting_cert(\n')
            self.preexisting_cert.exportLiteral(outfile, level, name_='preexisting_cert')
            showIndent(outfile, level)
            outfile.write('),\n')
    def build(self, node):
        self.buildAttributes(node, node.attrib, [])
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        if nodeName_ == 'use_preexisting_cert':
            sval_ = child_.text
            if sval_ in ('true', '1'):
                ival_ = True
            elif sval_ in ('false', '0'):
                ival_ = False
            else:
                raise_parse_error(child_, 'requires boolean')
            ival_ = self.gds_validate_boolean(ival_, node, 'use_preexisting_cert')
            self.use_preexisting_cert = ival_
        elif nodeName_ == 'params_list':
            obj_ = complex_params_list.factory()
            obj_.build(child_)
            self.set_params_list(obj_)
        elif nodeName_ == 'preexisting_cert':
            obj_ = complex_preexisting_cert.factory()
            obj_.build(child_)
            self.set_preexisting_cert(obj_)
# end class complex_attest_ca_cert


class complex_attest_cert(GeneratedsSuper):
    subclass = None
    superclass = None
    def __init__(self, use_preexisting_cert=None, params_list=None, preexisting_cert=None):
        self.use_preexisting_cert = use_preexisting_cert
        self.params_list = params_list
        self.preexisting_cert = preexisting_cert
    def factory(*args_, **kwargs_):
        if complex_attest_cert.subclass:
            return complex_attest_cert.subclass(*args_, **kwargs_)
        else:
            return complex_attest_cert(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_use_preexisting_cert(self): return self.use_preexisting_cert
    def set_use_preexisting_cert(self, use_preexisting_cert): self.use_preexisting_cert = use_preexisting_cert
    def get_params_list(self): return self.params_list
    def set_params_list(self, params_list): self.params_list = params_list
    def get_preexisting_cert(self): return self.preexisting_cert
    def set_preexisting_cert(self, preexisting_cert): self.preexisting_cert = preexisting_cert
    def export(self, outfile, level, namespace_='tns:', name_='complex_attest_cert', namespacedef_=''):
        showIndent(outfile, level)
        outfile.write('<%s%s%s' % (namespace_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = []
        self.exportAttributes(outfile, level, already_processed, namespace_, name_='complex_attest_cert')
        if self.hasContent_():
            outfile.write('>\n')
            self.exportChildren(outfile, level + 1, namespace_, name_)
            showIndent(outfile, level)
            outfile.write('</%s%s>\n' % (namespace_, name_))
        else:
            outfile.write('/>\n')
    def exportAttributes(self, outfile, level, already_processed, namespace_='tns:', name_='complex_attest_cert'):
        pass
    def exportChildren(self, outfile, level, namespace_='tns:', name_='complex_attest_cert', fromsubclass_=False):
        if self.use_preexisting_cert is not None:
            showIndent(outfile, level)
            outfile.write('<%suse_preexisting_cert>%s</%suse_preexisting_cert>\n' % (namespace_, self.gds_format_boolean(self.gds_str_lower(str(self.use_preexisting_cert)), input_name='use_preexisting_cert'), namespace_))
        if self.params_list is not None:
            self.params_list.export(outfile, level, namespace_, name_='params_list')
        if self.preexisting_cert is not None:
            self.preexisting_cert.export(outfile, level, namespace_, name_='preexisting_cert')
    def hasContent_(self):
        if (
            self.use_preexisting_cert is not None or
            self.params_list is not None or
            self.preexisting_cert is not None
            ):
            return True
        else:
            return False
    def exportLiteral(self, outfile, level, name_='complex_attest_cert'):
        level += 1
        self.exportLiteralAttributes(outfile, level, [], name_)
        if self.hasContent_():
            self.exportLiteralChildren(outfile, level, name_)
    def exportLiteralAttributes(self, outfile, level, already_processed, name_):
        pass
    def exportLiteralChildren(self, outfile, level, name_):
        if self.use_preexisting_cert is not None:
            showIndent(outfile, level)
            outfile.write('use_preexisting_cert=%s,\n' % self.use_preexisting_cert)
        if self.params_list is not None:
            showIndent(outfile, level)
            outfile.write('params_list=model_.complex_params_list(\n')
            self.params_list.exportLiteral(outfile, level, name_='params_list')
            showIndent(outfile, level)
            outfile.write('),\n')
        if self.preexisting_cert is not None:
            showIndent(outfile, level)
            outfile.write('preexisting_cert=model_.complex_preexisting_cert(\n')
            self.preexisting_cert.exportLiteral(outfile, level, name_='preexisting_cert')
            showIndent(outfile, level)
            outfile.write('),\n')
    def build(self, node):
        self.buildAttributes(node, node.attrib, [])
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        if nodeName_ == 'use_preexisting_cert':
            sval_ = child_.text
            if sval_ in ('true', '1'):
                ival_ = True
            elif sval_ in ('false', '0'):
                ival_ = False
            else:
                raise_parse_error(child_, 'requires boolean')
            ival_ = self.gds_validate_boolean(ival_, node, 'use_preexisting_cert')
            self.use_preexisting_cert = ival_
        elif nodeName_ == 'params_list':
            obj_ = complex_params_list.factory()
            obj_.build(child_)
            self.set_params_list(obj_)
        elif nodeName_ == 'preexisting_cert':
            obj_ = complex_preexisting_cert.factory()
            obj_.build(child_)
            self.set_preexisting_cert(obj_)
# end class complex_attest_cert


class complex_params_list(GeneratedsSuper):
    subclass = None
    superclass = None
    def __init__(self, cert_param=None):
        if cert_param is None:
            self.cert_param = []
        else:
            self.cert_param = cert_param
    def factory(*args_, **kwargs_):
        if complex_params_list.subclass:
            return complex_params_list.subclass(*args_, **kwargs_)
        else:
            return complex_params_list(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_cert_param(self): return self.cert_param
    def set_cert_param(self, cert_param): self.cert_param = cert_param
    def add_cert_param(self, value): self.cert_param.append(value)
    def insert_cert_param(self, index, value): self.cert_param[index] = value
    def export(self, outfile, level, namespace_='tns:', name_='complex_params_list', namespacedef_=''):
        showIndent(outfile, level)
        outfile.write('<%s%s%s' % (namespace_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = []
        self.exportAttributes(outfile, level, already_processed, namespace_, name_='complex_params_list')
        if self.hasContent_():
            outfile.write('>\n')
            self.exportChildren(outfile, level + 1, namespace_, name_)
            showIndent(outfile, level)
            outfile.write('</%s%s>\n' % (namespace_, name_))
        else:
            outfile.write('/>\n')
    def exportAttributes(self, outfile, level, already_processed, namespace_='tns:', name_='complex_params_list'):
        pass
    def exportChildren(self, outfile, level, namespace_='tns:', name_='complex_params_list', fromsubclass_=False):
        for cert_param_ in self.cert_param:
            showIndent(outfile, level)
            outfile.write('<%scert_param>%s</%scert_param>\n' % (namespace_, self.gds_format_string(quote_xml(cert_param_).encode(ExternalEncoding), input_name='cert_param'), namespace_))
    def hasContent_(self):
        if (
            self.cert_param
            ):
            return True
        else:
            return False
    def exportLiteral(self, outfile, level, name_='complex_params_list'):
        level += 1
        self.exportLiteralAttributes(outfile, level, [], name_)
        if self.hasContent_():
            self.exportLiteralChildren(outfile, level, name_)
    def exportLiteralAttributes(self, outfile, level, already_processed, name_):
        pass
    def exportLiteralChildren(self, outfile, level, name_):
        showIndent(outfile, level)
        outfile.write('cert_param=[\n')
        level += 1
        for cert_param_ in self.cert_param:
            showIndent(outfile, level)
            outfile.write('%s,\n' % quote_python(cert_param_).encode(ExternalEncoding))
        level -= 1
        showIndent(outfile, level)
        outfile.write('],\n')
    def build(self, node):
        self.buildAttributes(node, node.attrib, [])
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        if nodeName_ == 'cert_param':
            cert_param_ = child_.text
            cert_param_ = self.gds_validate_string(cert_param_, node, 'cert_param')
            self.cert_param.append(cert_param_)
# end class complex_params_list


class complex_preexisting_cert(GeneratedsSuper):
    subclass = None
    superclass = None
    def __init__(self, cert_path=None, private_key_path=None):
        self.cert_path = cert_path
        self.private_key_path = private_key_path
    def factory(*args_, **kwargs_):
        if complex_preexisting_cert.subclass:
            return complex_preexisting_cert.subclass(*args_, **kwargs_)
        else:
            return complex_preexisting_cert(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_cert_path(self): return self.cert_path
    def set_cert_path(self, cert_path): self.cert_path = cert_path
    def get_private_key_path(self): return self.private_key_path
    def set_private_key_path(self, private_key_path): self.private_key_path = private_key_path
    def export(self, outfile, level, namespace_='tns:', name_='complex_preexisting_cert', namespacedef_=''):
        showIndent(outfile, level)
        outfile.write('<%s%s%s' % (namespace_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = []
        self.exportAttributes(outfile, level, already_processed, namespace_, name_='complex_preexisting_cert')
        if self.hasContent_():
            outfile.write('>\n')
            self.exportChildren(outfile, level + 1, namespace_, name_)
            showIndent(outfile, level)
            outfile.write('</%s%s>\n' % (namespace_, name_))
        else:
            outfile.write('/>\n')
    def exportAttributes(self, outfile, level, already_processed, namespace_='tns:', name_='complex_preexisting_cert'):
        pass
    def exportChildren(self, outfile, level, namespace_='tns:', name_='complex_preexisting_cert', fromsubclass_=False):
        if self.cert_path is not None:
            showIndent(outfile, level)
            outfile.write('<%scert_path>%s</%scert_path>\n' % (namespace_, self.gds_format_string(quote_xml(self.cert_path).encode(ExternalEncoding), input_name='cert_path'), namespace_))
        if self.private_key_path is not None:
            showIndent(outfile, level)
            outfile.write('<%sprivate_key_path>%s</%sprivate_key_path>\n' % (namespace_, self.gds_format_string(quote_xml(self.private_key_path).encode(ExternalEncoding), input_name='private_key_path'), namespace_))
    def hasContent_(self):
        if (
            self.cert_path is not None or
            self.private_key_path is not None
            ):
            return True
        else:
            return False
    def exportLiteral(self, outfile, level, name_='complex_preexisting_cert'):
        level += 1
        self.exportLiteralAttributes(outfile, level, [], name_)
        if self.hasContent_():
            self.exportLiteralChildren(outfile, level, name_)
    def exportLiteralAttributes(self, outfile, level, already_processed, name_):
        pass
    def exportLiteralChildren(self, outfile, level, name_):
        if self.cert_path is not None:
            showIndent(outfile, level)
            outfile.write('cert_path=%s,\n' % quote_python(self.cert_path).encode(ExternalEncoding))
        if self.private_key_path is not None:
            showIndent(outfile, level)
            outfile.write('private_key_path=%s,\n' % quote_python(self.private_key_path).encode(ExternalEncoding))
    def build(self, node):
        self.buildAttributes(node, node.attrib, [])
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        if nodeName_ == 'cert_path':
            cert_path_ = child_.text
            cert_path_ = self.gds_validate_string(cert_path_, node, 'cert_path')
            self.cert_path = cert_path_
        elif nodeName_ == 'private_key_path':
            private_key_path_ = child_.text
            private_key_path_ = self.gds_validate_string(private_key_path_, node, 'private_key_path')
            self.private_key_path = private_key_path_
# end class complex_preexisting_cert


class complex_cass_signer_attributes(GeneratedsSuper):
    subclass = None
    superclass = None
    def __init__(self, server=None, user_identity=None, capability=None):
        self.server = server
        self.user_identity = user_identity
        self.capability = capability
    def factory(*args_, **kwargs_):
        if complex_cass_signer_attributes.subclass:
            return complex_cass_signer_attributes.subclass(*args_, **kwargs_)
        else:
            return complex_cass_signer_attributes(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_server(self): return self.server
    def set_server(self, server): self.server = server
    def get_user_identity(self): return self.user_identity
    def set_user_identity(self, user_identity): self.user_identity = user_identity
    def get_capability(self): return self.capability
    def set_capability(self, capability): self.capability = capability
    def export(self, outfile, level, namespace_='tns:', name_='complex_cass_signer_attributes', namespacedef_=''):
        showIndent(outfile, level)
        outfile.write('<%s%s%s' % (namespace_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = []
        self.exportAttributes(outfile, level, already_processed, namespace_, name_='complex_cass_signer_attributes')
        if self.hasContent_():
            outfile.write('>\n')
            self.exportChildren(outfile, level + 1, namespace_, name_)
            showIndent(outfile, level)
            outfile.write('</%s%s>\n' % (namespace_, name_))
        else:
            outfile.write('/>\n')
    def exportAttributes(self, outfile, level, already_processed, namespace_='tns:', name_='complex_cass_signer_attributes'):
        pass
    def exportChildren(self, outfile, level, namespace_='tns:', name_='complex_cass_signer_attributes', fromsubclass_=False):
        if self.server is not None:
            self.server.export(outfile, level, namespace_, name_='server')
        if self.user_identity is not None:
            self.user_identity.export(outfile, level, namespace_, name_='user_identity', )
        if self.capability is not None:
            showIndent(outfile, level)
            outfile.write('<%scapability>%s</%scapability>\n' % (namespace_, self.gds_format_string(quote_xml(self.capability).encode(ExternalEncoding), input_name='capability'), namespace_))
    def hasContent_(self):
        if (
            self.server is not None or
            self.user_identity is not None or
            self.capability is not None
            ):
            return True
        else:
            return False
    def exportLiteral(self, outfile, level, name_='complex_cass_signer_attributes'):
        level += 1
        self.exportLiteralAttributes(outfile, level, [], name_)
        if self.hasContent_():
            self.exportLiteralChildren(outfile, level, name_)
    def exportLiteralAttributes(self, outfile, level, already_processed, name_):
        pass
    def exportLiteralChildren(self, outfile, level, name_):
        if self.server is not None:
            showIndent(outfile, level)
            outfile.write('server=model_.complex_server(\n')
            self.server.exportLiteral(outfile, level, name_='server')
            showIndent(outfile, level)
            outfile.write('),\n')
        if self.user_identity is not None:
            showIndent(outfile, level)
            outfile.write('user_identity=model_.complex_user_identity(\n')
            self.user_identity.exportLiteral(outfile, level, name_='user_identity')
            showIndent(outfile, level)
            outfile.write('),\n')
        if self.capability is not None:
            showIndent(outfile, level)
            outfile.write('capability=%s,\n' % quote_python(self.capability).encode(ExternalEncoding))
    def build(self, node):
        self.buildAttributes(node, node.attrib, [])
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        if nodeName_ == 'server':
            obj_ = complex_server.factory()
            obj_.build(child_)
            self.set_server(obj_)
        elif nodeName_ == 'user_identity':
            obj_ = complex_user_identity.factory()
            obj_.build(child_)
            self.set_user_identity(obj_)
        elif nodeName_ == 'capability':
            capability_ = child_.text
            capability_ = self.gds_validate_string(capability_, node, 'capability')
            self.capability = capability_
# end class complex_cass_signer_attributes


class complex_server(GeneratedsSuper):
    subclass = None
    superclass = None
    def __init__(self, host=None, port=None, trust_keystore=None, trust_keystore_password=None, trust_keystore_type=None, host_validation_mode=None):
        self.host = host
        self.port = port
        self.trust_keystore = trust_keystore
        self.trust_keystore_password = trust_keystore_password
        self.trust_keystore_type = trust_keystore_type
        self.host_validation_mode = host_validation_mode
    def factory(*args_, **kwargs_):
        if complex_server.subclass:
            return complex_server.subclass(*args_, **kwargs_)
        else:
            return complex_server(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_host(self): return self.host
    def set_host(self, host): self.host = host
    def get_port(self): return self.port
    def set_port(self, port): self.port = port
    def get_trust_keystore(self): return self.trust_keystore
    def set_trust_keystore(self, trust_keystore): self.trust_keystore = trust_keystore
    def get_trust_keystore_password(self): return self.trust_keystore_password
    def set_trust_keystore_password(self, trust_keystore_password): self.trust_keystore_password = trust_keystore_password
    def get_trust_keystore_type(self): return self.trust_keystore_type
    def set_trust_keystore_type(self, trust_keystore_type): self.trust_keystore_type = trust_keystore_type
    def get_host_validation_mode(self): return self.host_validation_mode
    def set_host_validation_mode(self, host_validation_mode): self.host_validation_mode = host_validation_mode
    def export(self, outfile, level, namespace_='tns:', name_='complex_server', namespacedef_=''):
        showIndent(outfile, level)
        outfile.write('<%s%s%s' % (namespace_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = []
        self.exportAttributes(outfile, level, already_processed, namespace_, name_='complex_server')
        if self.hasContent_():
            outfile.write('>\n')
            self.exportChildren(outfile, level + 1, namespace_, name_)
            showIndent(outfile, level)
            outfile.write('</%s%s>\n' % (namespace_, name_))
        else:
            outfile.write('/>\n')
    def exportAttributes(self, outfile, level, already_processed, namespace_='tns:', name_='complex_server'):
        pass
    def exportChildren(self, outfile, level, namespace_='tns:', name_='complex_server', fromsubclass_=False):
        if self.host is not None:
            showIndent(outfile, level)
            outfile.write('<%shost>%s</%shost>\n' % (namespace_, self.gds_format_string(quote_xml(self.host).encode(ExternalEncoding), input_name='host'), namespace_))
        if self.port is not None:
            showIndent(outfile, level)
            outfile.write('<%sport>%s</%sport>\n' % (namespace_, self.gds_format_integer(self.port, input_name='port'), namespace_))
        if self.trust_keystore is not None:
            showIndent(outfile, level)
            outfile.write('<%strust_keystore>%s</%strust_keystore>\n' % (namespace_, self.gds_format_string(quote_xml(self.trust_keystore).encode(ExternalEncoding), input_name='trust_keystore'), namespace_))
        if self.trust_keystore_password is not None:
            showIndent(outfile, level)
            outfile.write('<%strust_keystore_password>%s</%strust_keystore_password>\n' % (namespace_, self.gds_format_string(quote_xml(self.trust_keystore_password).encode(ExternalEncoding), input_name='trust_keystore_password'), namespace_))
        if self.trust_keystore_type is not None:
            showIndent(outfile, level)
            outfile.write('<%strust_keystore_type>%s</%strust_keystore_type>\n' % (namespace_, self.gds_format_string(quote_xml(self.trust_keystore_type).encode(ExternalEncoding), input_name='trust_keystore_type'), namespace_))
        if self.host_validation_mode is not None:
            showIndent(outfile, level)
            outfile.write('<%shost_validation_mode>%s</%shost_validation_mode>\n' % (namespace_, self.gds_format_string(quote_xml(self.host_validation_mode).encode(ExternalEncoding), input_name='host_validation_mode'), namespace_))
    def hasContent_(self):
        if (
            self.host is not None or
            self.port is not None or
            self.trust_keystore is not None or
            self.trust_keystore_password is not None or
            self.trust_keystore_type is not None or
            self.host_validation_mode is not None
            ):
            return True
        else:
            return False
    def exportLiteral(self, outfile, level, name_='complex_server'):
        level += 1
        self.exportLiteralAttributes(outfile, level, [], name_)
        if self.hasContent_():
            self.exportLiteralChildren(outfile, level, name_)
    def exportLiteralAttributes(self, outfile, level, already_processed, name_):
        pass
    def exportLiteralChildren(self, outfile, level, name_):
        if self.host is not None:
            showIndent(outfile, level)
            outfile.write('host=%s,\n' % quote_python(self.host).encode(ExternalEncoding))
        if self.port is not None:
            showIndent(outfile, level)
            outfile.write('port=%d,\n' % self.port)
        if self.trust_keystore is not None:
            showIndent(outfile, level)
            outfile.write('trust_keystore=%s,\n' % quote_python(self.trust_keystore).encode(ExternalEncoding))
        if self.trust_keystore_password is not None:
            showIndent(outfile, level)
            outfile.write('trust_keystore_password=%s,\n' % quote_python(self.trust_keystore_password).encode(ExternalEncoding))
        if self.trust_keystore_type is not None:
            showIndent(outfile, level)
            outfile.write('trust_keystore_type=%s,\n' % quote_python(self.trust_keystore_type).encode(ExternalEncoding))
        if self.host_validation_mode is not None:
            showIndent(outfile, level)
            outfile.write('host_validation_mode=%s,\n' % quote_python(self.host_validation_mode).encode(ExternalEncoding))
    def build(self, node):
        self.buildAttributes(node, node.attrib, [])
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        if nodeName_ == 'host':
            host_ = child_.text
            host_ = self.gds_validate_string(host_, node, 'host')
            self.host = host_
        elif nodeName_ == 'port':
            sval_ = child_.text
            try:
                ival_ = int(sval_)
            except (TypeError, ValueError), exp:
                raise_parse_error(child_, 'requires integer: %s' % exp)
            ival_ = self.gds_validate_integer(ival_, node, 'port')
            self.port = ival_
        elif nodeName_ == 'trust_keystore':
            trust_keystore_ = child_.text
            trust_keystore_ = self.gds_validate_string(trust_keystore_, node, 'trust_keystore')
            self.trust_keystore = trust_keystore_
        elif nodeName_ == 'trust_keystore_password':
            trust_keystore_password_ = child_.text
            trust_keystore_password_ = self.gds_validate_string(trust_keystore_password_, node, 'trust_keystore_password')
            self.trust_keystore_password = trust_keystore_password_
        elif nodeName_ == 'trust_keystore_type':
            trust_keystore_type_ = child_.text
            trust_keystore_type_ = self.gds_validate_string(trust_keystore_type_, node, 'trust_keystore_type')
            self.trust_keystore_type = trust_keystore_type_
        elif nodeName_ == 'host_validation_mode':
            host_validation_mode_ = child_.text
            host_validation_mode_ = self.gds_validate_string(host_validation_mode_, node, 'host_validation_mode')
            self.host_validation_mode = host_validation_mode_
# end class complex_server


class trust_keystore_type(GeneratedsSuper):
    subclass = None
    superclass = None
    def __init__(self, valueOf_=None):
        self.valueOf_ = valueOf_
    def factory(*args_, **kwargs_):
        if trust_keystore_type.subclass:
            return trust_keystore_type.subclass(*args_, **kwargs_)
        else:
            return trust_keystore_type(*args_, **kwargs_)
    factory = staticmethod(factory)
    def export(self, outfile, level, namespace_='tns:', name_='trust_keystore_type', namespacedef_=''):
        showIndent(outfile, level)
        outfile.write('<%s%s%s' % (namespace_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = []
        self.exportAttributes(outfile, level, already_processed, namespace_, name_='trust_keystore_type')
        if self.hasContent_():
            outfile.write('>\n')
            self.exportChildren(outfile, level + 1, namespace_, name_)
            outfile.write('</%s%s>\n' % (namespace_, name_))
        else:
            outfile.write('/>\n')
    def exportAttributes(self, outfile, level, already_processed, namespace_='tns:', name_='trust_keystore_type'):
        pass
    def exportChildren(self, outfile, level, namespace_='tns:', name_='trust_keystore_type', fromsubclass_=False):
        pass
    def hasContent_(self):
        if (

            ):
            return True
        else:
            return False
    def exportLiteral(self, outfile, level, name_='trust_keystore_type'):
        level += 1
        self.exportLiteralAttributes(outfile, level, [], name_)
        if self.hasContent_():
            self.exportLiteralChildren(outfile, level, name_)
    def exportLiteralAttributes(self, outfile, level, already_processed, name_):
        pass
    def exportLiteralChildren(self, outfile, level, name_):
        pass
    def build(self, node):
        self.buildAttributes(node, node.attrib, [])
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        pass
# end class trust_keystore_type


class host_validation_mode(GeneratedsSuper):
    subclass = None
    superclass = None
    def __init__(self, valueOf_=None):
        self.valueOf_ = valueOf_
    def factory(*args_, **kwargs_):
        if host_validation_mode.subclass:
            return host_validation_mode.subclass(*args_, **kwargs_)
        else:
            return host_validation_mode(*args_, **kwargs_)
    factory = staticmethod(factory)
    def export(self, outfile, level, namespace_='tns:', name_='host_validation_mode', namespacedef_=''):
        showIndent(outfile, level)
        outfile.write('<%s%s%s' % (namespace_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = []
        self.exportAttributes(outfile, level, already_processed, namespace_, name_='host_validation_mode')
        if self.hasContent_():
            outfile.write('>\n')
            self.exportChildren(outfile, level + 1, namespace_, name_)
            outfile.write('</%s%s>\n' % (namespace_, name_))
        else:
            outfile.write('/>\n')
    def exportAttributes(self, outfile, level, already_processed, namespace_='tns:', name_='host_validation_mode'):
        pass
    def exportChildren(self, outfile, level, namespace_='tns:', name_='host_validation_mode', fromsubclass_=False):
        pass
    def hasContent_(self):
        if (

            ):
            return True
        else:
            return False
    def exportLiteral(self, outfile, level, name_='host_validation_mode'):
        level += 1
        self.exportLiteralAttributes(outfile, level, [], name_)
        if self.hasContent_():
            self.exportLiteralChildren(outfile, level, name_)
    def exportLiteralAttributes(self, outfile, level, already_processed, name_):
        pass
    def exportLiteralChildren(self, outfile, level, name_):
        pass
    def build(self, node):
        self.buildAttributes(node, node.attrib, [])
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        pass
# end class host_validation_mode


class complex_user_identity(GeneratedsSuper):
    subclass = None
    superclass = None
    def __init__(self, token_identity_slot=None, token_password=None, keystore_file=None, token_driver_home=None, keystore_type=None):
        self.token_identity_slot = token_identity_slot
        self.token_password = token_password
        self.keystore_file = keystore_file
        self.token_driver_home = token_driver_home
        self.keystore_type = keystore_type
    def factory(*args_, **kwargs_):
        if complex_user_identity.subclass:
            return complex_user_identity.subclass(*args_, **kwargs_)
        else:
            return complex_user_identity(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_token_identity_slot(self): return self.token_identity_slot
    def set_token_identity_slot(self, token_identity_slot): self.token_identity_slot = token_identity_slot
    def get_token_password(self): return self.token_password
    def set_token_password(self, token_password): self.token_password = token_password
    def get_keystore_file(self): return self.keystore_file
    def set_keystore_file(self, keystore_file): self.keystore_file = keystore_file
    def get_token_driver_home(self): return self.token_driver_home
    def set_token_driver_home(self, token_driver_home): self.token_driver_home = token_driver_home
    def get_keystore_type(self): return self.keystore_type
    def set_keystore_type(self, keystore_type): self.keystore_type = keystore_type
    def export(self, outfile, level, namespace_='tns:', name_='complex_user_identity', namespacedef_=''):
        showIndent(outfile, level)
        outfile.write('<%s%s%s' % (namespace_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = []
        self.exportAttributes(outfile, level, already_processed, namespace_, name_='complex_user_identity')
        if self.hasContent_():
            outfile.write('>\n')
            self.exportChildren(outfile, level + 1, namespace_, name_)
            showIndent(outfile, level)
            outfile.write('</%s%s>\n' % (namespace_, name_))
        else:
            outfile.write('/>\n')
    def exportAttributes(self, outfile, level, already_processed, namespace_='tns:', name_='complex_user_identity'):
        pass
    def exportChildren(self, outfile, level, namespace_='tns:', name_='complex_user_identity', fromsubclass_=False):
        if self.token_identity_slot is not None:
            showIndent(outfile, level)
            outfile.write('<%stoken_identity_slot>%s</%stoken_identity_slot>\n' % (namespace_, self.gds_format_integer(self.token_identity_slot, input_name='token_identity_slot'), namespace_))
        if self.token_password is not None:
            showIndent(outfile, level)
            outfile.write('<%stoken_password>%s</%stoken_password>\n' % (namespace_, self.gds_format_string(quote_xml(self.token_password).encode(ExternalEncoding), input_name='token_password'), namespace_))
        if self.keystore_file is not None:
            showIndent(outfile, level)
            outfile.write('<%skeystore_file>%s</%skeystore_file>\n' % (namespace_, self.gds_format_string(quote_xml(self.keystore_file).encode(ExternalEncoding), input_name='keystore_file'), namespace_))
        if self.token_driver_home is not None:
            self.token_driver_home.export(outfile, level, namespace_, name_='token_driver_home', )
        if self.keystore_type is not None:
            showIndent(outfile, level)
            outfile.write('<%skeystore_type>%s</%skeystore_type>\n' % (namespace_, self.gds_format_string(quote_xml(self.keystore_type).encode(ExternalEncoding), input_name='keystore_type'), namespace_))
    def hasContent_(self):
        if (
            self.token_identity_slot is not None or
            self.token_password is not None or
            self.keystore_file is not None or
            self.token_driver_home is not None or
            self.keystore_type is not None
            ):
            return True
        else:
            return False
    def exportLiteral(self, outfile, level, name_='complex_user_identity'):
        level += 1
        self.exportLiteralAttributes(outfile, level, [], name_)
        if self.hasContent_():
            self.exportLiteralChildren(outfile, level, name_)
    def exportLiteralAttributes(self, outfile, level, already_processed, name_):
        pass
    def exportLiteralChildren(self, outfile, level, name_):
        if self.token_identity_slot is not None:
            showIndent(outfile, level)
            outfile.write('token_identity_slot=%d,\n' % self.token_identity_slot)
        if self.token_password is not None:
            showIndent(outfile, level)
            outfile.write('token_password=%s,\n' % quote_python(self.token_password).encode(ExternalEncoding))
        if self.keystore_file is not None:
            showIndent(outfile, level)
            outfile.write('keystore_file=%s,\n' % quote_python(self.keystore_file).encode(ExternalEncoding))
        if self.token_driver_home is not None:
            showIndent(outfile, level)
            outfile.write('token_driver_home=model_.complex_token_driver_home(\n')
            self.token_driver_home.exportLiteral(outfile, level, name_='token_driver_home')
            showIndent(outfile, level)
            outfile.write('),\n')
        if self.keystore_type is not None:
            showIndent(outfile, level)
            outfile.write('keystore_type=%s,\n' % quote_python(self.keystore_type).encode(ExternalEncoding))
    def build(self, node):
        self.buildAttributes(node, node.attrib, [])
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        if nodeName_ == 'token_identity_slot':
            sval_ = child_.text
            try:
                ival_ = int(sval_)
            except (TypeError, ValueError), exp:
                raise_parse_error(child_, 'requires integer: %s' % exp)
            ival_ = self.gds_validate_integer(ival_, node, 'token_identity_slot')
            self.token_identity_slot = ival_
        elif nodeName_ == 'token_password':
            token_password_ = child_.text
            token_password_ = self.gds_validate_string(token_password_, node, 'token_password')
            self.token_password = token_password_
        elif nodeName_ == 'keystore_file':
            keystore_file_ = child_.text
            keystore_file_ = self.gds_validate_string(keystore_file_, node, 'keystore_file')
            self.keystore_file = keystore_file_
        elif nodeName_ == 'token_driver_home':
            obj_ = complex_token_driver_home.factory()
            obj_.build(child_)
            self.set_token_driver_home(obj_)
        elif nodeName_ == 'keystore_type':
            keystore_type_ = child_.text
            keystore_type_ = self.gds_validate_string(keystore_type_, node, 'keystore_type')
            self.keystore_type = keystore_type_
# end class complex_user_identity


class keystore_type(GeneratedsSuper):
    subclass = None
    superclass = None
    def __init__(self, valueOf_=None):
        self.valueOf_ = valueOf_
    def factory(*args_, **kwargs_):
        if keystore_type.subclass:
            return keystore_type.subclass(*args_, **kwargs_)
        else:
            return keystore_type(*args_, **kwargs_)
    factory = staticmethod(factory)
    def export(self, outfile, level, namespace_='tns:', name_='keystore_type', namespacedef_=''):
        showIndent(outfile, level)
        outfile.write('<%s%s%s' % (namespace_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = []
        self.exportAttributes(outfile, level, already_processed, namespace_, name_='keystore_type')
        if self.hasContent_():
            outfile.write('>\n')
            self.exportChildren(outfile, level + 1, namespace_, name_)
            outfile.write('</%s%s>\n' % (namespace_, name_))
        else:
            outfile.write('/>\n')
    def exportAttributes(self, outfile, level, already_processed, namespace_='tns:', name_='keystore_type'):
        pass
    def exportChildren(self, outfile, level, namespace_='tns:', name_='keystore_type', fromsubclass_=False):
        pass
    def hasContent_(self):
        if (

            ):
            return True
        else:
            return False
    def exportLiteral(self, outfile, level, name_='keystore_type'):
        level += 1
        self.exportLiteralAttributes(outfile, level, [], name_)
        if self.hasContent_():
            self.exportLiteralChildren(outfile, level, name_)
    def exportLiteralAttributes(self, outfile, level, already_processed, name_):
        pass
    def exportLiteralChildren(self, outfile, level, name_):
        pass
    def build(self, node):
        self.buildAttributes(node, node.attrib, [])
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        pass
# end class keystore_type


class complex_token_driver_home(GeneratedsSuper):
    subclass = None
    superclass = None
    def __init__(self, windows=None, linux=None):
        self.windows = windows
        self.linux = linux
    def factory(*args_, **kwargs_):
        if complex_token_driver_home.subclass:
            return complex_token_driver_home.subclass(*args_, **kwargs_)
        else:
            return complex_token_driver_home(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_windows(self): return self.windows
    def set_windows(self, windows): self.windows = windows
    def get_linux(self): return self.linux
    def set_linux(self, linux): self.linux = linux
    def export(self, outfile, level, namespace_='tns:', name_='complex_token_driver_home', namespacedef_=''):
        showIndent(outfile, level)
        outfile.write('<%s%s%s' % (namespace_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = []
        self.exportAttributes(outfile, level, already_processed, namespace_, name_='complex_token_driver_home')
        if self.hasContent_():
            outfile.write('>\n')
            self.exportChildren(outfile, level + 1, namespace_, name_)
            showIndent(outfile, level)
            outfile.write('</%s%s>\n' % (namespace_, name_))
        else:
            outfile.write('/>\n')
    def exportAttributes(self, outfile, level, already_processed, namespace_='tns:', name_='complex_token_driver_home'):
        pass
    def exportChildren(self, outfile, level, namespace_='tns:', name_='complex_token_driver_home', fromsubclass_=False):
        if self.windows is not None:
            showIndent(outfile, level)
            outfile.write('<%swindows>%s</%swindows>\n' % (namespace_, self.gds_format_string(quote_xml(self.windows).encode(ExternalEncoding), input_name='windows'), namespace_))
        if self.linux is not None:
            showIndent(outfile, level)
            outfile.write('<%slinux>%s</%slinux>\n' % (namespace_, self.gds_format_string(quote_xml(self.linux).encode(ExternalEncoding), input_name='linux'), namespace_))
    def hasContent_(self):
        if (
            self.windows is not None or
            self.linux is not None
            ):
            return True
        else:
            return False
    def exportLiteral(self, outfile, level, name_='complex_token_driver_home'):
        level += 1
        self.exportLiteralAttributes(outfile, level, [], name_)
        if self.hasContent_():
            self.exportLiteralChildren(outfile, level, name_)
    def exportLiteralAttributes(self, outfile, level, already_processed, name_):
        pass
    def exportLiteralChildren(self, outfile, level, name_):
        if self.windows is not None:
            showIndent(outfile, level)
            outfile.write('windows=%s,\n' % quote_python(self.windows).encode(ExternalEncoding))
        if self.linux is not None:
            showIndent(outfile, level)
            outfile.write('linux=%s,\n' % quote_python(self.linux).encode(ExternalEncoding))
    def build(self, node):
        self.buildAttributes(node, node.attrib, [])
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        if nodeName_ == 'windows':
            windows_ = child_.text
            windows_ = self.gds_validate_string(windows_, node, 'windows')
            self.windows = windows_
        elif nodeName_ == 'linux':
            linux_ = child_.text
            linux_ = self.gds_validate_string(linux_, node, 'linux')
            self.linux = linux_
# end class complex_token_driver_home


class complex_post_process(GeneratedsSuper):
    subclass = None
    superclass = None
    def __init__(self, pil_splitter=None):
        self.pil_splitter = pil_splitter
    def factory(*args_, **kwargs_):
        if complex_post_process.subclass:
            return complex_post_process.subclass(*args_, **kwargs_)
        else:
            return complex_post_process(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_pil_splitter(self): return self.pil_splitter
    def set_pil_splitter(self, pil_splitter): self.pil_splitter = pil_splitter
    def export(self, outfile, level, namespace_='tns:', name_='complex_post_process', namespacedef_=''):
        showIndent(outfile, level)
        outfile.write('<%s%s%s' % (namespace_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = []
        self.exportAttributes(outfile, level, already_processed, namespace_, name_='complex_post_process')
        if self.hasContent_():
            outfile.write('>\n')
            self.exportChildren(outfile, level + 1, namespace_, name_)
            showIndent(outfile, level)
            outfile.write('</%s%s>\n' % (namespace_, name_))
        else:
            outfile.write('/>\n')
    def exportAttributes(self, outfile, level, already_processed, namespace_='tns:', name_='complex_post_process'):
        pass
    def exportChildren(self, outfile, level, namespace_='tns:', name_='complex_post_process', fromsubclass_=False):
        if self.pil_splitter is not None:
            showIndent(outfile, level)
            outfile.write('<%spil_splitter>%s</%spil_splitter>\n' % (namespace_, self.gds_format_string(quote_xml(self.pil_splitter).encode(ExternalEncoding), input_name='pil_splitter'), namespace_))
    def hasContent_(self):
        if (
            self.pil_splitter is not None
            ):
            return True
        else:
            return False
    def exportLiteral(self, outfile, level, name_='complex_post_process'):
        level += 1
        self.exportLiteralAttributes(outfile, level, [], name_)
        if self.hasContent_():
            self.exportLiteralChildren(outfile, level, name_)
    def exportLiteralAttributes(self, outfile, level, already_processed, name_):
        pass
    def exportLiteralChildren(self, outfile, level, name_):
        if self.pil_splitter is not None:
            showIndent(outfile, level)
            outfile.write('pil_splitter=%s,\n' % quote_python(self.pil_splitter).encode(ExternalEncoding))
    def build(self, node):
        self.buildAttributes(node, node.attrib, [])
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        if nodeName_ == 'pil_splitter':
            pil_splitter_ = child_.text
            pil_splitter_ = self.gds_validate_string(pil_splitter_, node, 'pil_splitter')
            self.pil_splitter = pil_splitter_
# end class complex_post_process


class complex_images_list(GeneratedsSuper):
    subclass = None
    superclass = None
    def __init__(self, image=None):
        if image is None:
            self.image = []
        else:
            self.image = image
    def factory(*args_, **kwargs_):
        if complex_images_list.subclass:
            return complex_images_list.subclass(*args_, **kwargs_)
        else:
            return complex_images_list(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_image(self): return self.image
    def set_image(self, image): self.image = image
    def add_image(self, value): self.image.append(value)
    def insert_image(self, index, value): self.image[index] = value
    def export(self, outfile, level, namespace_='tns:', name_='complex_images_list', namespacedef_=''):
        showIndent(outfile, level)
        outfile.write('<%s%s%s' % (namespace_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = []
        self.exportAttributes(outfile, level, already_processed, namespace_, name_='complex_images_list')
        if self.hasContent_():
            outfile.write('>\n')
            self.exportChildren(outfile, level + 1, namespace_, name_)
            showIndent(outfile, level)
            outfile.write('</%s%s>\n' % (namespace_, name_))
        else:
            outfile.write('/>\n')
    def exportAttributes(self, outfile, level, already_processed, namespace_='tns:', name_='complex_images_list'):
        pass
    def exportChildren(self, outfile, level, namespace_='tns:', name_='complex_images_list', fromsubclass_=False):
        for image_ in self.image:
            image_.export(outfile, level, namespace_, name_='image')
    def hasContent_(self):
        if (
            self.image
            ):
            return True
        else:
            return False
    def exportLiteral(self, outfile, level, name_='complex_images_list'):
        level += 1
        self.exportLiteralAttributes(outfile, level, [], name_)
        if self.hasContent_():
            self.exportLiteralChildren(outfile, level, name_)
    def exportLiteralAttributes(self, outfile, level, already_processed, name_):
        pass
    def exportLiteralChildren(self, outfile, level, name_):
        showIndent(outfile, level)
        outfile.write('image=[\n')
        level += 1
        for image_ in self.image:
            showIndent(outfile, level)
            outfile.write('model_.complex_image(\n')
            image_.exportLiteral(outfile, level, name_='complex_image')
            showIndent(outfile, level)
            outfile.write('),\n')
        level -= 1
        showIndent(outfile, level)
        outfile.write('],\n')
    def build(self, node):
        self.buildAttributes(node, node.attrib, [])
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        if nodeName_ == 'image':
            obj_ = complex_image.factory()
            obj_.build(child_)
            self.image.append(obj_)
# end class complex_images_list


class complex_image(GeneratedsSuper):
    subclass = None
    superclass = None
    def __init__(self, image_type=None, sign_id=None, output_file_name=None, cert_config=None, name=None, pil_split=None, general_properties_overrides=None, signing_attributes_overrides=None, meta_build_location=None, post_process_commands=None):
        self.image_type = _cast(None, image_type)
        self.sign_id = _cast(None, sign_id)
        self.output_file_name = _cast(None, output_file_name)
        self.cert_config = _cast(None, cert_config)
        self.name = _cast(None, name)
        self.pil_split = pil_split
        self.general_properties_overrides = general_properties_overrides
        self.signing_attributes_overrides = signing_attributes_overrides
        self.meta_build_location = meta_build_location
        self.post_process_commands = post_process_commands
    def factory(*args_, **kwargs_):
        if complex_image.subclass:
            return complex_image.subclass(*args_, **kwargs_)
        else:
            return complex_image(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_pil_split(self): return self.pil_split
    def set_pil_split(self, pil_split): self.pil_split = pil_split
    def get_general_properties_overrides(self): return self.general_properties_overrides
    def set_general_properties_overrides(self, general_properties_overrides): self.general_properties_overrides = general_properties_overrides
    def get_signing_attributes_overrides(self): return self.signing_attributes_overrides
    def set_signing_attributes_overrides(self, signing_attributes_overrides): self.signing_attributes_overrides = signing_attributes_overrides
    def get_meta_build_location(self): return self.meta_build_location
    def set_meta_build_location(self, meta_build_location): self.meta_build_location = meta_build_location
    def get_post_process_commands(self): return self.post_process_commands
    def set_post_process_commands(self, post_process_commands): self.post_process_commands = post_process_commands
    def get_image_type(self): return self.image_type
    def set_image_type(self, image_type): self.image_type = image_type
    def get_sign_id(self): return self.sign_id
    def set_sign_id(self, sign_id): self.sign_id = sign_id
    def get_output_file_name(self): return self.output_file_name
    def set_output_file_name(self, output_file_name): self.output_file_name = output_file_name
    def get_cert_config(self): return self.cert_config
    def set_cert_config(self, cert_config): self.cert_config = cert_config
    def get_name(self): return self.name
    def set_name(self, name): self.name = name
    def export(self, outfile, level, namespace_='tns:', name_='complex_image', namespacedef_=''):
        showIndent(outfile, level)
        outfile.write('<%s%s%s' % (namespace_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = []
        self.exportAttributes(outfile, level, already_processed, namespace_, name_='complex_image')
        if self.hasContent_():
            outfile.write('>\n')
            self.exportChildren(outfile, level + 1, namespace_, name_)
            showIndent(outfile, level)
            outfile.write('</%s%s>\n' % (namespace_, name_))
        else:
            outfile.write('/>\n')
    def exportAttributes(self, outfile, level, already_processed, namespace_='tns:', name_='complex_image'):
        if self.image_type is not None and 'image_type' not in already_processed:
            already_processed.append('image_type')
            outfile.write(' image_type=%s' % (self.gds_format_string(quote_attrib(self.image_type).encode(ExternalEncoding), input_name='image_type'), ))
        if self.sign_id is not None and 'sign_id' not in already_processed:
            already_processed.append('sign_id')
            outfile.write(' sign_id=%s' % (self.gds_format_string(quote_attrib(self.sign_id).encode(ExternalEncoding), input_name='sign_id'), ))
        if self.output_file_name is not None and 'output_file_name' not in already_processed:
            already_processed.append('output_file_name')
            outfile.write(' output_file_name=%s' % (self.gds_format_string(quote_attrib(self.output_file_name).encode(ExternalEncoding), input_name='output_file_name'), ))
        if self.cert_config is not None and 'cert_config' not in already_processed:
            already_processed.append('cert_config')
            outfile.write(' cert_config=%s' % (self.gds_format_string(quote_attrib(self.cert_config).encode(ExternalEncoding), input_name='cert_config'), ))
        if self.name is not None and 'name' not in already_processed:
            already_processed.append('name')
            outfile.write(' name=%s' % (self.gds_format_string(quote_attrib(self.name).encode(ExternalEncoding), input_name='name'), ))
    def exportChildren(self, outfile, level, namespace_='tns:', name_='complex_image', fromsubclass_=False):
        if self.pil_split is not None:
            showIndent(outfile, level)
            outfile.write('<%spil_split>%s</%spil_split>\n' % (namespace_, self.gds_format_boolean(self.gds_str_lower(str(self.pil_split)), input_name='pil_split'), namespace_))
        if self.general_properties_overrides is not None:
            self.general_properties_overrides.export(outfile, level, namespace_, name_='general_properties_overrides', )
        if self.signing_attributes_overrides is not None:
            self.signing_attributes_overrides.export(outfile, level, namespace_, name_='signing_attributes_overrides', )
        if self.meta_build_location is not None:
            showIndent(outfile, level)
            outfile.write('<%smeta_build_location>%s</%smeta_build_location>\n' % (namespace_, self.gds_format_string(quote_xml(self.meta_build_location).encode(ExternalEncoding), input_name='meta_build_location'), namespace_))
        if self.post_process_commands is not None:
            showIndent(outfile, level)
            outfile.write('<%spost_process_commands>%s</%spost_process_commands>\n' % (namespace_, self.gds_format_string(quote_xml(self.post_process_commands).encode(ExternalEncoding), input_name='post_process_commands'), namespace_))
    def hasContent_(self):
        if (
            self.pil_split is not None or
            self.general_properties_overrides is not None or
            self.signing_attributes_overrides is not None or
            self.meta_build_location is not None or
            self.post_process_commands is not None
            ):
            return True
        else:
            return False
    def exportLiteral(self, outfile, level, name_='complex_image'):
        level += 1
        self.exportLiteralAttributes(outfile, level, [], name_)
        if self.hasContent_():
            self.exportLiteralChildren(outfile, level, name_)
    def exportLiteralAttributes(self, outfile, level, already_processed, name_):
        if self.image_type is not None and 'image_type' not in already_processed:
            already_processed.append('image_type')
            showIndent(outfile, level)
            outfile.write('image_type = "%s",\n' % (self.image_type,))
        if self.sign_id is not None and 'sign_id' not in already_processed:
            already_processed.append('sign_id')
            showIndent(outfile, level)
            outfile.write('sign_id = "%s",\n' % (self.sign_id,))
        if self.output_file_name is not None and 'output_file_name' not in already_processed:
            already_processed.append('output_file_name')
            showIndent(outfile, level)
            outfile.write('output_file_name = "%s",\n' % (self.output_file_name,))
        if self.cert_config is not None and 'cert_config' not in already_processed:
            already_processed.append('cert_config')
            showIndent(outfile, level)
            outfile.write('cert_config = "%s",\n' % (self.cert_config,))
        if self.name is not None and 'name' not in already_processed:
            already_processed.append('name')
            showIndent(outfile, level)
            outfile.write('name = "%s",\n' % (self.name,))
    def exportLiteralChildren(self, outfile, level, name_):
        if self.pil_split is not None:
            showIndent(outfile, level)
            outfile.write('pil_split=%s,\n' % self.pil_split)
        if self.general_properties_overrides is not None:
            showIndent(outfile, level)
            outfile.write('general_properties_overrides=model_.complex_general_properties_overrides(\n')
            self.general_properties_overrides.exportLiteral(outfile, level, name_='general_properties_overrides')
            showIndent(outfile, level)
            outfile.write('),\n')
        if self.signing_attributes_overrides is not None:
            showIndent(outfile, level)
            outfile.write('signing_attributes_overrides=model_.complex_signing_attributes_overrides(\n')
            self.signing_attributes_overrides.exportLiteral(outfile, level, name_='signing_attributes_overrides')
            showIndent(outfile, level)
            outfile.write('),\n')
        if self.meta_build_location is not None:
            showIndent(outfile, level)
            outfile.write('meta_build_location=%s,\n' % quote_python(self.meta_build_location).encode(ExternalEncoding))
        if self.post_process_commands is not None:
            showIndent(outfile, level)
            outfile.write('post_process_commands=%s,\n' % quote_python(self.post_process_commands).encode(ExternalEncoding))
    def build(self, node):
        self.buildAttributes(node, node.attrib, [])
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
    def buildAttributes(self, node, attrs, already_processed):
        value = find_attr_value_('image_type', node)
        if value is not None and 'image_type' not in already_processed:
            already_processed.append('image_type')
            self.image_type = value
        value = find_attr_value_('sign_id', node)
        if value is not None and 'sign_id' not in already_processed:
            already_processed.append('sign_id')
            self.sign_id = value
        value = find_attr_value_('output_file_name', node)
        if value is not None and 'output_file_name' not in already_processed:
            already_processed.append('output_file_name')
            self.output_file_name = value
        value = find_attr_value_('cert_config', node)
        if value is not None and 'cert_config' not in already_processed:
            already_processed.append('cert_config')
            self.cert_config = value
        value = find_attr_value_('name', node)
        if value is not None and 'name' not in already_processed:
            already_processed.append('name')
            self.name = value
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        if nodeName_ == 'pil_split':
            sval_ = child_.text
            if sval_ in ('true', '1'):
                ival_ = True
            elif sval_ in ('false', '0'):
                ival_ = False
            else:
                raise_parse_error(child_, 'requires boolean')
            ival_ = self.gds_validate_boolean(ival_, node, 'pil_split')
            self.pil_split = ival_
        elif nodeName_ == 'general_properties_overrides':
            obj_ = complex_general_properties_overrides.factory()
            obj_.build(child_)
            self.set_general_properties_overrides(obj_)
        elif nodeName_ == 'signing_attributes_overrides':
            obj_ = complex_signing_attributes_overrides.factory()
            obj_.build(child_)
            self.set_signing_attributes_overrides(obj_)
        elif nodeName_ == 'meta_build_location':
            meta_build_location_ = child_.text
            meta_build_location_ = self.gds_validate_string(meta_build_location_, node, 'meta_build_location')
            self.meta_build_location = meta_build_location_
        elif nodeName_ == 'post_process_commands':
            post_process_commands_ = child_.text
            post_process_commands_ = self.gds_validate_string(post_process_commands_, node, 'post_process_commands')
            self.post_process_commands = post_process_commands_
# end class complex_image


class complex_general_properties_overrides(GeneratedsSuper):
    subclass = None
    superclass = None
    def __init__(self, max_cert_size=None, key_size=None, num_certs_in_certchain=None, num_root_certs=None, testsig_serialnum=None):
        self.max_cert_size = max_cert_size
        self.key_size = key_size
        self.num_certs_in_certchain = num_certs_in_certchain
        self.num_root_certs = num_root_certs
        self.testsig_serialnum = testsig_serialnum
    def factory(*args_, **kwargs_):
        if complex_general_properties_overrides.subclass:
            return complex_general_properties_overrides.subclass(*args_, **kwargs_)
        else:
            return complex_general_properties_overrides(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_max_cert_size(self): return self.max_cert_size
    def set_max_cert_size(self, max_cert_size): self.max_cert_size = max_cert_size
    def get_key_size(self): return self.key_size
    def set_key_size(self, key_size): self.key_size = key_size
    def get_num_certs_in_certchain(self): return self.num_certs_in_certchain
    def set_num_certs_in_certchain(self, num_certs_in_certchain): self.num_certs_in_certchain = num_certs_in_certchain
    def get_num_root_certs(self): return self.num_root_certs
    def set_num_root_certs(self, num_root_certs): self.num_root_certs = num_root_certs
    def get_testsig_serialnum(self): return self.testsig_serialnum
    def set_testsig_serialnum(self, testsig_serialnum): self.testsig_serialnum = testsig_serialnum
    def export(self, outfile, level, namespace_='tns:', name_='complex_general_properties_overrides', namespacedef_=''):
        showIndent(outfile, level)
        outfile.write('<%s%s%s' % (namespace_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = []
        self.exportAttributes(outfile, level, already_processed, namespace_, name_='complex_general_properties_overrides')
        if self.hasContent_():
            outfile.write('>\n')
            self.exportChildren(outfile, level + 1, namespace_, name_)
            showIndent(outfile, level)
            outfile.write('</%s%s>\n' % (namespace_, name_))
        else:
            outfile.write('/>\n')
    def exportAttributes(self, outfile, level, already_processed, namespace_='tns:', name_='complex_general_properties_overrides'):
        pass
    def exportChildren(self, outfile, level, namespace_='tns:', name_='complex_general_properties_overrides', fromsubclass_=False):
        if self.max_cert_size is not None:
            showIndent(outfile, level)
            outfile.write('<%smax_cert_size>%s</%smax_cert_size>\n' % (namespace_, self.gds_format_integer(self.max_cert_size, input_name='max_cert_size'), namespace_))
        if self.key_size is not None:
            showIndent(outfile, level)
            outfile.write('<%skey_size>%s</%skey_size>\n' % (namespace_, self.gds_format_integer(self.key_size, input_name='key_size'), namespace_))
        if self.num_certs_in_certchain is not None:
            showIndent(outfile, level)
            outfile.write('<%snum_certs_in_certchain>%s</%snum_certs_in_certchain>\n' % (namespace_, self.gds_format_integer(self.num_certs_in_certchain, input_name='num_certs_in_certchain'), namespace_))
        if self.num_root_certs is not None:
            showIndent(outfile, level)
            outfile.write('<%snum_root_certs>%s</%snum_root_certs>\n' % (namespace_, self.gds_format_integer(self.num_root_certs, input_name='num_root_certs'), namespace_))
        if self.testsig_serialnum is not None:
            showIndent(outfile, level)
            outfile.write('<%stestsig_serialnum>%s</%stestsig_serialnum>\n' % (namespace_, self.gds_format_string(quote_xml(self.testsig_serialnum).encode(ExternalEncoding), input_name='testsig_serialnum'), namespace_))
    def hasContent_(self):
        if (
            self.max_cert_size is not None or
            self.key_size is not None or
            self.num_certs_in_certchain is not None or
            self.num_root_certs is not None or
            self.testsig_serialnum is not None
            ):
            return True
        else:
            return False
    def exportLiteral(self, outfile, level, name_='complex_general_properties_overrides'):
        level += 1
        self.exportLiteralAttributes(outfile, level, [], name_)
        if self.hasContent_():
            self.exportLiteralChildren(outfile, level, name_)
    def exportLiteralAttributes(self, outfile, level, already_processed, name_):
        pass
    def exportLiteralChildren(self, outfile, level, name_):
        if self.max_cert_size is not None:
            showIndent(outfile, level)
            outfile.write('max_cert_size=%d,\n' % self.max_cert_size)
        if self.key_size is not None:
            showIndent(outfile, level)
            outfile.write('key_size=%d,\n' % self.key_size)
        if self.num_certs_in_certchain is not None:
            showIndent(outfile, level)
            outfile.write('num_certs_in_certchain=%d,\n' % self.num_certs_in_certchain)
        if self.num_root_certs is not None:
            showIndent(outfile, level)
            outfile.write('num_root_certs=%d,\n' % self.num_root_certs)
        if self.testsig_serialnum is not None:
            showIndent(outfile, level)
            outfile.write('testsig_serialnum=%s,\n' % quote_python(self.testsig_serialnum).encode(ExternalEncoding))
    def build(self, node):
        self.buildAttributes(node, node.attrib, [])
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        if nodeName_ == 'max_cert_size':
            sval_ = child_.text
            try:
                ival_ = int(sval_)
            except (TypeError, ValueError), exp:
                raise_parse_error(child_, 'requires integer: %s' % exp)
            ival_ = self.gds_validate_integer(ival_, node, 'max_cert_size')
            self.max_cert_size = ival_
        elif nodeName_ == 'key_size':
            sval_ = child_.text
            try:
                ival_ = int(sval_)
            except (TypeError, ValueError), exp:
                raise_parse_error(child_, 'requires integer: %s' % exp)
            ival_ = self.gds_validate_integer(ival_, node, 'key_size')
            self.key_size = ival_
        elif nodeName_ == 'num_certs_in_certchain':
            sval_ = child_.text
            try:
                ival_ = int(sval_)
            except (TypeError, ValueError), exp:
                raise_parse_error(child_, 'requires integer: %s' % exp)
            ival_ = self.gds_validate_integer(ival_, node, 'num_certs_in_certchain')
            self.num_certs_in_certchain = ival_
        elif nodeName_ == 'num_root_certs':
            sval_ = child_.text
            try:
                ival_ = int(sval_)
            except (TypeError, ValueError), exp:
                raise_parse_error(child_, 'requires integer: %s' % exp)
            ival_ = self.gds_validate_integer(ival_, node, 'num_root_certs')
            self.num_root_certs = ival_
        elif nodeName_ == 'testsig_serialnum':
            testsig_serialnum_ = child_.text
            testsig_serialnum_ = self.gds_validate_string(testsig_serialnum_, node, 'testsig_serialnum')
            self.testsig_serialnum = testsig_serialnum_
# end class complex_general_properties_overrides


class complex_signing_attributes_overrides(GeneratedsSuper):
    subclass = None
    superclass = None
    def __init__(self, msm_part=None, oem_id=None, model_id=None, sw_id=None, app_id=None, crash_dump=None, rot_en=None, debug=None, exponent=None, tcg_min=None, tcg_max=None):
        self.msm_part = msm_part
        self.oem_id = oem_id
        self.model_id = model_id
        self.sw_id = sw_id
        self.app_id = app_id
        self.crash_dump = crash_dump
        self.rot_en = rot_en
        self.debug = debug
        self.exponent = exponent
        self.tcg_min = tcg_min
        self.tcg_max = tcg_max
    def factory(*args_, **kwargs_):
        if complex_signing_attributes_overrides.subclass:
            return complex_signing_attributes_overrides.subclass(*args_, **kwargs_)
        else:
            return complex_signing_attributes_overrides(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_msm_part(self): return self.msm_part
    def set_msm_part(self, msm_part): self.msm_part = msm_part
    def get_oem_id(self): return self.oem_id
    def set_oem_id(self, oem_id): self.oem_id = oem_id
    def get_model_id(self): return self.model_id
    def set_model_id(self, model_id): self.model_id = model_id
    def get_sw_id(self): return self.sw_id
    def set_sw_id(self, sw_id): self.sw_id = sw_id
    def get_app_id(self): return self.app_id
    def set_app_id(self, app_id): self.app_id = app_id
    def get_crash_dump(self): return self.crash_dump
    def set_crash_dump(self, crash_dump): self.crash_dump = crash_dump
    def get_rot_en(self): return self.rot_en
    def set_rot_en(self, rot_en): self.rot_en = rot_en
    def get_debug(self): return self.debug
    def set_debug(self, debug): self.debug = debug
    def get_exponent(self): return self.exponent
    def set_exponent(self, exponent): self.exponent = exponent
    def get_tcg_min(self): return self.tcg_min
    def set_tcg_min(self, tcg_min): self.tcg_min = tcg_min
    def get_tcg_max(self): return self.tcg_max
    def set_tcg_max(self, tcg_max): self.tcg_max = tcg_max
    def export(self, outfile, level, namespace_='tns:', name_='complex_signing_attributes_overrides', namespacedef_=''):
        showIndent(outfile, level)
        outfile.write('<%s%s%s' % (namespace_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = []
        self.exportAttributes(outfile, level, already_processed, namespace_, name_='complex_signing_attributes_overrides')
        if self.hasContent_():
            outfile.write('>\n')
            self.exportChildren(outfile, level + 1, namespace_, name_)
            showIndent(outfile, level)
            outfile.write('</%s%s>\n' % (namespace_, name_))
        else:
            outfile.write('/>\n')
    def exportAttributes(self, outfile, level, already_processed, namespace_='tns:', name_='complex_signing_attributes_overrides'):
        pass
    def exportChildren(self, outfile, level, namespace_='tns:', name_='complex_signing_attributes_overrides', fromsubclass_=False):
        if self.msm_part is not None:
            showIndent(outfile, level)
            outfile.write('<%smsm_part>%s</%smsm_part>\n' % (namespace_, self.gds_format_string(quote_xml(self.msm_part).encode(ExternalEncoding), input_name='msm_part'), namespace_))
        if self.oem_id is not None:
            showIndent(outfile, level)
            outfile.write('<%soem_id>%s</%soem_id>\n' % (namespace_, self.gds_format_string(quote_xml(self.oem_id).encode(ExternalEncoding), input_name='oem_id'), namespace_))
        if self.model_id is not None:
            showIndent(outfile, level)
            outfile.write('<%smodel_id>%s</%smodel_id>\n' % (namespace_, self.gds_format_string(quote_xml(self.model_id).encode(ExternalEncoding), input_name='model_id'), namespace_))
        if self.sw_id is not None:
            showIndent(outfile, level)
            outfile.write('<%ssw_id>%s</%ssw_id>\n' % (namespace_, self.gds_format_string(quote_xml(self.sw_id).encode(ExternalEncoding), input_name='sw_id'), namespace_))
        if self.app_id is not None:
            showIndent(outfile, level)
            outfile.write('<%sapp_id>%s</%sapp_id>\n' % (namespace_, self.gds_format_string(quote_xml(self.app_id).encode(ExternalEncoding), input_name='app_id'), namespace_))
        if self.crash_dump is not None:
            showIndent(outfile, level)
            outfile.write('<%scrash_dump>%s</%scrash_dump>\n' % (namespace_, self.gds_format_string(quote_xml(self.crash_dump).encode(ExternalEncoding), input_name='crash_dump'), namespace_))
        if self.rot_en is not None:
            showIndent(outfile, level)
            outfile.write('<%srot_en>%s</%srot_en>\n' % (namespace_, self.gds_format_string(quote_xml(self.rot_en).encode(ExternalEncoding), input_name='rot_en'), namespace_))
        if self.debug is not None:
            showIndent(outfile, level)
            outfile.write('<%sdebug>%s</%sdebug>\n' % (namespace_, self.gds_format_string(quote_xml(self.debug).encode(ExternalEncoding), input_name='debug'), namespace_))
        if self.exponent is not None:
            showIndent(outfile, level)
            outfile.write('<%sexponent>%s</%sexponent>\n' % (namespace_, self.gds_format_integer(self.exponent, input_name='exponent'), namespace_))
        if self.tcg_min is not None:
            showIndent(outfile, level)
            outfile.write('<%stcg_min>%s</%stcg_min>\n' % (namespace_, self.gds_format_string(quote_xml(self.tcg_min).encode(ExternalEncoding), input_name='tcg_min'), namespace_))
        if self.tcg_max is not None:
            showIndent(outfile, level)
            outfile.write('<%stcg_max>%s</%stcg_max>\n' % (namespace_, self.gds_format_string(quote_xml(self.tcg_max).encode(ExternalEncoding), input_name='tcg_max'), namespace_))
    def hasContent_(self):
        if (
            self.msm_part is not None or
            self.oem_id is not None or
            self.model_id is not None or
            self.sw_id is not None or
            self.app_id is not None or
            self.crash_dump is not None or
            self.rot_en is not None or
            self.debug is not None or
            self.exponent is not None or
            self.tcg_min is not None or
            self.tcg_max is not None
            ):
            return True
        else:
            return False
    def exportLiteral(self, outfile, level, name_='complex_signing_attributes_overrides'):
        level += 1
        self.exportLiteralAttributes(outfile, level, [], name_)
        if self.hasContent_():
            self.exportLiteralChildren(outfile, level, name_)
    def exportLiteralAttributes(self, outfile, level, already_processed, name_):
        pass
    def exportLiteralChildren(self, outfile, level, name_):
        if self.msm_part is not None:
            showIndent(outfile, level)
            outfile.write('msm_part=%s,\n' % quote_python(self.msm_part).encode(ExternalEncoding))
        if self.oem_id is not None:
            showIndent(outfile, level)
            outfile.write('oem_id=%s,\n' % quote_python(self.oem_id).encode(ExternalEncoding))
        if self.model_id is not None:
            showIndent(outfile, level)
            outfile.write('model_id=%s,\n' % quote_python(self.model_id).encode(ExternalEncoding))
        if self.sw_id is not None:
            showIndent(outfile, level)
            outfile.write('sw_id=%s,\n' % quote_python(self.sw_id).encode(ExternalEncoding))
        if self.app_id is not None:
            showIndent(outfile, level)
            outfile.write('app_id=%s,\n' % quote_python(self.app_id).encode(ExternalEncoding))
        if self.crash_dump is not None:
            showIndent(outfile, level)
            outfile.write('crash_dump=%s,\n' % quote_python(self.crash_dump).encode(ExternalEncoding))
        if self.rot_en is not None:
            showIndent(outfile, level)
            outfile.write('rot_en=%s,\n' % quote_python(self.rot_en).encode(ExternalEncoding))
        if self.debug is not None:
            showIndent(outfile, level)
            outfile.write('debug=%s,\n' % quote_python(self.debug).encode(ExternalEncoding))
        if self.exponent is not None:
            showIndent(outfile, level)
            outfile.write('exponent=%d,\n' % self.exponent)
        if self.tcg_min is not None:
            showIndent(outfile, level)
            outfile.write('tcg_min=%s,\n' % quote_python(self.tcg_min).encode(ExternalEncoding))
        if self.tcg_max is not None:
            showIndent(outfile, level)
            outfile.write('tcg_max=%s,\n' % quote_python(self.tcg_max).encode(ExternalEncoding))
    def build(self, node):
        self.buildAttributes(node, node.attrib, [])
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        if nodeName_ == 'msm_part':
            msm_part_ = child_.text
            msm_part_ = self.gds_validate_string(msm_part_, node, 'msm_part')
            self.msm_part = msm_part_
        elif nodeName_ == 'oem_id':
            oem_id_ = child_.text
            oem_id_ = self.gds_validate_string(oem_id_, node, 'oem_id')
            self.oem_id = oem_id_
        elif nodeName_ == 'model_id':
            model_id_ = child_.text
            model_id_ = self.gds_validate_string(model_id_, node, 'model_id')
            self.model_id = model_id_
        elif nodeName_ == 'sw_id':
            sw_id_ = child_.text
            sw_id_ = self.gds_validate_string(sw_id_, node, 'sw_id')
            self.sw_id = sw_id_
        elif nodeName_ == 'app_id':
            app_id_ = child_.text
            app_id_ = self.gds_validate_string(app_id_, node, 'app_id')
            self.app_id = app_id_
        elif nodeName_ == 'crash_dump':
            crash_dump_ = child_.text
            crash_dump_ = self.gds_validate_string(crash_dump_, node, 'crash_dump')
            self.crash_dump = crash_dump_
        elif nodeName_ == 'rot_en':
            rot_en_ = child_.text
            rot_en_ = self.gds_validate_string(rot_en_, node, 'rot_en')
            self.rot_en = rot_en_
        elif nodeName_ == 'debug':
            debug_ = child_.text
            debug_ = self.gds_validate_string(debug_, node, 'debug')
            self.debug = debug_
        elif nodeName_ == 'exponent':
            sval_ = child_.text
            try:
                ival_ = int(sval_)
            except (TypeError, ValueError), exp:
                raise_parse_error(child_, 'requires integer: %s' % exp)
            ival_ = self.gds_validate_integer(ival_, node, 'exponent')
            self.exponent = ival_
        elif nodeName_ == 'tcg_min':
            tcg_min_ = child_.text
            tcg_min_ = self.gds_validate_string(tcg_min_, node, 'tcg_min')
            self.tcg_min = tcg_min_
        elif nodeName_ == 'tcg_max':
            tcg_max_ = child_.text
            tcg_max_ = self.gds_validate_string(tcg_max_, node, 'tcg_max')
            self.tcg_max = tcg_max_
# end class complex_signing_attributes_overrides


class complex_encryption(GeneratedsSuper):
    subclass = None
    superclass = None
    def __init__(self, selected_encryptor=None, unified_encryption=None):
        self.selected_encryptor = selected_encryptor
        self.unified_encryption = unified_encryption
    def factory(*args_, **kwargs_):
        if complex_encryption.subclass:
            return complex_encryption.subclass(*args_, **kwargs_)
        else:
            return complex_encryption(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_selected_encryptor(self): return self.selected_encryptor
    def set_selected_encryptor(self, selected_encryptor): self.selected_encryptor = selected_encryptor
    def get_unified_encryption(self): return self.unified_encryption
    def set_unified_encryption(self, unified_encryption): self.unified_encryption = unified_encryption
    def export(self, outfile, level, namespace_='tns:', name_='complex_encryption', namespacedef_=''):
        showIndent(outfile, level)
        outfile.write('<%s%s%s' % (namespace_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = []
        self.exportAttributes(outfile, level, already_processed, namespace_, name_='complex_encryption')
        if self.hasContent_():
            outfile.write('>\n')
            self.exportChildren(outfile, level + 1, namespace_, name_)
            showIndent(outfile, level)
            outfile.write('</%s%s>\n' % (namespace_, name_))
        else:
            outfile.write('/>\n')
    def exportAttributes(self, outfile, level, already_processed, namespace_='tns:', name_='complex_encryption'):
        pass
    def exportChildren(self, outfile, level, namespace_='tns:', name_='complex_encryption', fromsubclass_=False):
        if self.selected_encryptor is not None:
            showIndent(outfile, level)
            outfile.write('<%sselected_encryptor>%s</%sselected_encryptor>\n' % (namespace_, self.gds_format_string(quote_xml(self.selected_encryptor).encode(ExternalEncoding), input_name='selected_encryptor'), namespace_))
        if self.unified_encryption is not None:
            self.unified_encryption.export(outfile, level, namespace_, name_='unified_encryption')
    def hasContent_(self):
        if (
            self.selected_encryptor is not None or
            self.unified_encryption is not None
            ):
            return True
        else:
            return False
    def exportLiteral(self, outfile, level, name_='complex_encryption'):
        level += 1
        self.exportLiteralAttributes(outfile, level, [], name_)
        if self.hasContent_():
            self.exportLiteralChildren(outfile, level, name_)
    def exportLiteralAttributes(self, outfile, level, already_processed, name_):
        pass
    def exportLiteralChildren(self, outfile, level, name_):
        if self.selected_encryptor is not None:
            showIndent(outfile, level)
            outfile.write('selected_encryptor=%s,\n' % quote_python(self.selected_encryptor).encode(ExternalEncoding))
        if self.unified_encryption is not None:
            showIndent(outfile, level)
            outfile.write('unified_encryption=model_.complex_unified_encryption(\n')
            self.unified_encryption.exportLiteral(outfile, level, name_='unified_encryption')
            showIndent(outfile, level)
            outfile.write('),\n')
    def build(self, node):
        self.buildAttributes(node, node.attrib, [])
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        if nodeName_ == 'selected_encryptor':
            selected_encryptor_ = child_.text
            selected_encryptor_ = self.gds_validate_string(selected_encryptor_, node, 'selected_encryptor')
            self.selected_encryptor = selected_encryptor_
        elif nodeName_ == 'unified_encryption':
            obj_ = complex_unified_encryption.factory()
            obj_.build(child_)
            self.set_unified_encryption(obj_)
# end class complex_encryption


class complex_unified_encryption(GeneratedsSuper):
    subclass = None
    superclass = None
    def __init__(self, use_file_interface=None, L1_encryption_key=None, L2_encryption_key=None, L3_encryption_key=None):
        self.use_file_interface = use_file_interface
        self.L1_encryption_key = L1_encryption_key
        self.L2_encryption_key = L2_encryption_key
        self.L3_encryption_key = L3_encryption_key
    def factory(*args_, **kwargs_):
        if complex_unified_encryption.subclass:
            return complex_unified_encryption.subclass(*args_, **kwargs_)
        else:
            return complex_unified_encryption(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_use_file_interface(self): return self.use_file_interface
    def set_use_file_interface(self, use_file_interface): self.use_file_interface = use_file_interface
    def get_L1_encryption_key(self): return self.L1_encryption_key
    def set_L1_encryption_key(self, L1_encryption_key): self.L1_encryption_key = L1_encryption_key
    def get_L2_encryption_key(self): return self.L2_encryption_key
    def set_L2_encryption_key(self, L2_encryption_key): self.L2_encryption_key = L2_encryption_key
    def get_L3_encryption_key(self): return self.L3_encryption_key
    def set_L3_encryption_key(self, L3_encryption_key): self.L3_encryption_key = L3_encryption_key
    def export(self, outfile, level, namespace_='tns:', name_='complex_unified_encryption', namespacedef_=''):
        showIndent(outfile, level)
        outfile.write('<%s%s%s' % (namespace_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = []
        self.exportAttributes(outfile, level, already_processed, namespace_, name_='complex_unified_encryption')
        if self.hasContent_():
            outfile.write('>\n')
            self.exportChildren(outfile, level + 1, namespace_, name_)
            showIndent(outfile, level)
            outfile.write('</%s%s>\n' % (namespace_, name_))
        else:
            outfile.write('/>\n')
    def exportAttributes(self, outfile, level, already_processed, namespace_='tns:', name_='complex_unified_encryption'):
        pass
    def exportChildren(self, outfile, level, namespace_='tns:', name_='complex_unified_encryption', fromsubclass_=False):
        if self.use_file_interface is not None:
            showIndent(outfile, level)
            outfile.write('<%suse_file_interface>%s</%suse_file_interface>\n' % (namespace_, self.gds_format_boolean(self.gds_str_lower(str(self.use_file_interface)), input_name='use_file_interface'), namespace_))
        if self.L1_encryption_key is not None:
            showIndent(outfile, level)
            outfile.write('<%sL1_encryption_key>%s</%sL1_encryption_key>\n' % (namespace_, self.gds_format_string(quote_xml(self.L1_encryption_key).encode(ExternalEncoding), input_name='L1_encryption_key'), namespace_))
        if self.L2_encryption_key is not None:
            showIndent(outfile, level)
            outfile.write('<%sL2_encryption_key>%s</%sL2_encryption_key>\n' % (namespace_, self.gds_format_string(quote_xml(self.L2_encryption_key).encode(ExternalEncoding), input_name='L2_encryption_key'), namespace_))
        if self.L3_encryption_key is not None:
            showIndent(outfile, level)
            outfile.write('<%sL3_encryption_key>%s</%sL3_encryption_key>\n' % (namespace_, self.gds_format_string(quote_xml(self.L3_encryption_key).encode(ExternalEncoding), input_name='L3_encryption_key'), namespace_))
    def hasContent_(self):
        if (
            self.use_file_interface is not None or
            self.L1_encryption_key is not None or
            self.L2_encryption_key is not None or
            self.L3_encryption_key is not None
            ):
            return True
        else:
            return False
    def exportLiteral(self, outfile, level, name_='complex_unified_encryption'):
        level += 1
        self.exportLiteralAttributes(outfile, level, [], name_)
        if self.hasContent_():
            self.exportLiteralChildren(outfile, level, name_)
    def exportLiteralAttributes(self, outfile, level, already_processed, name_):
        pass
    def exportLiteralChildren(self, outfile, level, name_):
        if self.use_file_interface is not None:
            showIndent(outfile, level)
            outfile.write('use_file_interface=%s,\n' % self.use_file_interface)
        if self.L1_encryption_key is not None:
            showIndent(outfile, level)
            outfile.write('L1_encryption_key=%s,\n' % quote_python(self.L1_encryption_key).encode(ExternalEncoding))
        if self.L2_encryption_key is not None:
            showIndent(outfile, level)
            outfile.write('L2_encryption_key=%s,\n' % quote_python(self.L2_encryption_key).encode(ExternalEncoding))
        if self.L3_encryption_key is not None:
            showIndent(outfile, level)
            outfile.write('L3_encryption_key=%s,\n' % quote_python(self.L3_encryption_key).encode(ExternalEncoding))
    def build(self, node):
        self.buildAttributes(node, node.attrib, [])
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        if nodeName_ == 'use_file_interface':
            sval_ = child_.text
            if sval_ in ('true', '1'):
                ival_ = True
            elif sval_ in ('false', '0'):
                ival_ = False
            else:
                raise_parse_error(child_, 'requires boolean')
            ival_ = self.gds_validate_boolean(ival_, node, 'use_file_interface')
            self.use_file_interface = ival_
        elif nodeName_ == 'L1_encryption_key':
            L1_encryption_key_ = child_.text
            L1_encryption_key_ = self.gds_validate_string(L1_encryption_key_, node, 'L1_encryption_key')
            self.L1_encryption_key = L1_encryption_key_
        elif nodeName_ == 'L2_encryption_key':
            L2_encryption_key_ = child_.text
            L2_encryption_key_ = self.gds_validate_string(L2_encryption_key_, node, 'L2_encryption_key')
            self.L2_encryption_key = L2_encryption_key_
        elif nodeName_ == 'L3_encryption_key':
            L3_encryption_key_ = child_.text
            L3_encryption_key_ = self.gds_validate_string(L3_encryption_key_, node, 'L3_encryption_key')
            self.L3_encryption_key = L3_encryption_key_
# end class complex_unified_encryption


USAGE_TEXT = """
Usage: python <Parser>.py [ -s ] <in_xml_file>
"""

def usage():
    print USAGE_TEXT
    sys.exit(1)


def get_root_tag(node):
    tag = Tag_pattern_.match(node.tag).groups()[-1]
    rootClass = globals().get(tag)
    return tag, rootClass


def parse(inFileName):
    doc = parsexml_(inFileName)
    rootNode = doc.getroot()
    rootTag, rootClass = get_root_tag(rootNode)
    if rootClass is None:
        rootTag = 'secimage'
        rootClass = secimage
    rootObj = rootClass.factory()
    rootObj.build(rootNode)
    # Enable Python to collect the space used by the DOM.
    doc = None
    sys.stdout.write('<?xml version="1.0" ?>\n')
    rootObj.export(sys.stdout, 0, name_=rootTag, 
        namespacedef_='xmlns:tns="http://www.qualcomm.com/secimage"')
    return rootObj


def parseString(inString):
    from StringIO import StringIO
    doc = parsexml_(StringIO(inString))
    rootNode = doc.getroot()
    rootTag, rootClass = get_root_tag(rootNode)
    if rootClass is None:
        rootTag = 'secimage'
        rootClass = secimage
    rootObj = rootClass.factory()
    rootObj.build(rootNode)
    # Enable Python to collect the space used by the DOM.
    doc = None
    sys.stdout.write('<?xml version="1.0" ?>\n')
    rootObj.export(sys.stdout, 0, name_="secimage",
        namespacedef_='xmlns:tns="http://www.qualcomm.com/secimage"')
    return rootObj


def parseLiteral(inFileName):
    doc = parsexml_(inFileName)
    rootNode = doc.getroot()
    rootTag, rootClass = get_root_tag(rootNode)
    if rootClass is None:
        rootTag = 'secimage'
        rootClass = secimage
    rootObj = rootClass.factory()
    rootObj.build(rootNode)
    # Enable Python to collect the space used by the DOM.
    doc = None
    sys.stdout.write('#from auto_gen_xml_config import *\n\n')
    sys.stdout.write('import auto_gen_xml_config as model_\n\n')
    sys.stdout.write('rootObj = model_.rootTag(\n')
    rootObj.exportLiteral(sys.stdout, 0, name_=rootTag)
    sys.stdout.write(')\n')
    return rootObj


def main():
    args = sys.argv[1:]
    if len(args) == 1:
        parse(args[0])
    else:
        usage()


if __name__ == '__main__':
    #import pdb; pdb.set_trace()
    main()


__all__ = [
    "complex_attest_ca_cert",
    "complex_attest_cert",
    "complex_cass_signer_attributes",
    "complex_cert_config",
    "complex_cert_configs_list",
    "complex_default_attributes",
    "complex_elf_properties",
    "complex_encryption",
    "complex_ewm_properties",
    "complex_general_properties",
    "complex_general_properties_overrides",
    "complex_image",
    "complex_image_type",
    "complex_image_types_list",
    "complex_images_list",
    "complex_local_signer_attributes",
    "complex_mbn_properties",
    "complex_metadata",
    "complex_multirootcert",
    "complex_openssl_config_inputs",
    "complex_params_list",
    "complex_parsegen",
    "complex_post_process",
    "complex_preexisting_cert",
    "complex_root_cert",
    "complex_server",
    "complex_signer_attributes",
    "complex_signing",
    "complex_signing_attributes_overrides",
    "complex_token_driver_home",
    "complex_unified_encryption",
    "complex_user_identity",
    "host_validation_mode",
    "keystore_type",
    "secimage",
    "selected_signer",
    "trust_keystore_type"
    ]
